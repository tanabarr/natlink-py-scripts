# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8, Tue Dec 03 13:52:38 2013

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <1> = 'package install' ;
        <2> = 'package remove' ;
        <3> = 'screen next' ;
        <4> = 'screen prev' ;
        <5> = 'screen' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <6> = 'slap' ;
        <7> = 'back' ;
        <8> = 'hat' ;
        <9> = 'clam' ;
        <10> = 'lat' ;
        <11> = 'numb' ;
        <12> = 'lace' ;
        <13> = 'race' ;
        <14> = 'score' ;
        <15> = 'eke' ;
        <16> = 'dall' ;
        <17> = 'pipe' ;
        <18> = 'laip' ;
        <19> = 'rye' ;
        <20> = 'Alpha' ;
        <21> = 'bravo' ;
        <22> = 'Charlie' ;
        <23> = 'Delta' ;
        <24> = 'echo' ;
        <25> = 'foxtrot' ;
        <26> = 'golf' ;
        <27> = 'Hotel' ;
        <28> = 'India' ;
        <29> = 'Juliet' ;
        <30> = 'kilo' ;
        <31> = 'Lima' ;
        <32> = 'Mike' ;
        <33> = 'November' ;
        <34> = 'Oscar' ;
        <35> = 'Poppa' ;
        <36> = 'Québec' ;
        <37> = 'Romeo' ;
        <38> = 'Sierra' ;
        <39> = 'tango' ;
        <40> = 'uniform' ;
        <41> = 'Victor' ;
        <42> = 'whiskey' ;
        <43> = 'x-ray' ;
        <44> = 'Yankee' ;
        <45> = 'Zulu' ;
        <46> = 'nowrap' ;
        <47> = 'double backslash' ;
        <48> = 'double dot slash' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'putty','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # package install
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'apt-cyg install '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 2, 'package install', e)
            self.firstWord = -1

    # package remove
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'apt-cyg remove '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 3, 'package remove', e)
            self.firstWord = -1

    # screen next
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 12, 'screen next', e)
            self.firstWord = -1

    # screen prev
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 13, 'screen prev', e)
            self.firstWord = -1

    # screen 0..9
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{$}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_5(words[2:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 14, 'screen 0..9', e)
            self.firstWord = -1

    # slap
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 21, 'slap', e)
            self.firstWord = -1

    # back
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 22, 'back', e)
            self.firstWord = -1

    # hat
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '^'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 23, 'hat', e)
            self.firstWord = -1

    # clam
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 24, 'clam', e)
            self.firstWord = -1

    # lat
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '@'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 25, 'lat', e)
            self.firstWord = -1

    # numb
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '#'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 26, 'numb', e)
            self.firstWord = -1

    # lace
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 27, 'lace', e)
            self.firstWord = -1

    # race
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_13(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 28, 'race', e)
            self.firstWord = -1

    # score
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '_'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_14(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 29, 'score', e)
            self.firstWord = -1

    # eke
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '='
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 30, 'eke', e)
            self.firstWord = -1

    # dall
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 31, 'dall', e)
            self.firstWord = -1

    # pipe
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '|'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_17(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 32, 'pipe', e)
            self.firstWord = -1

    # laip
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '('
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 33, 'laip', e)
            self.firstWord = -1

    # rye
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ')'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 34, 'rye', e)
            self.firstWord = -1

    # Alpha
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'a'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 42, 'Alpha', e)
            self.firstWord = -1

    # bravo
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 43, 'bravo', e)
            self.firstWord = -1

    # Charlie
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 44, 'Charlie', e)
            self.firstWord = -1

    # Delta
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 45, 'Delta', e)
            self.firstWord = -1

    # echo
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 46, 'echo', e)
            self.firstWord = -1

    # foxtrot
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'f'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 47, 'foxtrot', e)
            self.firstWord = -1

    # golf
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'g'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 48, 'golf', e)
            self.firstWord = -1

    # Hotel
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 49, 'Hotel', e)
            self.firstWord = -1

    # India
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 50, 'India', e)
            self.firstWord = -1

    # Juliet
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'j'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 51, 'Juliet', e)
            self.firstWord = -1

    # kilo
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 52, 'kilo', e)
            self.firstWord = -1

    # Lima
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 53, 'Lima', e)
            self.firstWord = -1

    # Mike
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'm'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_32(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 54, 'Mike', e)
            self.firstWord = -1

    # November
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 55, 'November', e)
            self.firstWord = -1

    # Oscar
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'o'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 56, 'Oscar', e)
            self.firstWord = -1

    # Poppa
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'p'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_35(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 57, 'Poppa', e)
            self.firstWord = -1

    # Québec
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'q'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 58, 'Québec', e)
            self.firstWord = -1

    # Romeo
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_37(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 59, 'Romeo', e)
            self.firstWord = -1

    # Sierra
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 's'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 60, 'Sierra', e)
            self.firstWord = -1

    # tango
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 't'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 61, 'tango', e)
            self.firstWord = -1

    # uniform
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_40(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 62, 'uniform', e)
            self.firstWord = -1

    # Victor
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'v'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 63, 'Victor', e)
            self.firstWord = -1

    # whiskey
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_42(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 64, 'whiskey', e)
            self.firstWord = -1

    # x-ray
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'x'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_43(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 65, 'x-ray', e)
            self.firstWord = -1

    # Yankee
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'y'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_44(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 66, 'Yankee', e)
            self.firstWord = -1

    # Zulu
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'z'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_45(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 67, 'Zulu', e)
            self.firstWord = -1

    # nowrap
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set nowrap{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_46(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 68, 'nowrap', e)
            self.firstWord = -1

    # double backslash
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\/\\/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_47(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 69, 'double backslash', e)
            self.firstWord = -1

    # double dot slash
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '../'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 70, 'double dot slash', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
