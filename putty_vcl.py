# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8, Wed Dec 04 13:48:48 2013

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <1> = 'slap' ;
        <2> = 'back' ;
        <3> = 'hat' ;
        <4> = 'clam' ;
        <5> = 'lat' ;
        <6> = 'numb' ;
        <7> = 'lace' ;
        <8> = 'race' ;
        <9> = 'score' ;
        <10> = 'eke' ;
        <11> = 'dall' ;
        <12> = 'pipe' ;
        <13> = 'laip' ;
        <14> = 'rye' ;
        <n> = (('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = ('Left' | 'Right' ) ;
        <start_end> = ('Start' | 'End' ) ;
        <compass> = ('North' | 'South' | 'East' | 'West' ) ;
        <delmode> = ('Change' | 'Kill' ) ;
        <15> = ((('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ) ) <direction> ;
        <16> = 'Kill' ('Char' | '1' | 'One' ) ;
        <17> = 'Kill Back' [ '1' ] ;
        <18> = 'Kill' <n> ;
        <19> = [ 'Kill' ] 'Back' <n> ;
        <20> = [ 'One' ] 'Word' <left_right> ;
        <21> = <n> 'Words' <left_right> ;
        <22> = 'Kill Word' ;
        <23> = 'Kill' <23b> ;
        <23b> = <n> 'Words' ;
        <24> = 'Kill Back Word' ;
        <25> = 'Kill Back' <25b> ;
        <25b> = <n> 'Words' ;
        <26> = 'Line' <start_end> ;
        <27> = 'New Line' ;
        <28> = 'Copy Line' ;
        <29> = 'Kill Line' ;
        <30> = 'Kill Back Line' ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <31> = 'Press' <key> ;
        <32> = <key> 'Here' ;
        <33> = 'Space Bar' ;
        <34> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) ;
        <35> = [ 'Press' ] (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <36> = [ 'Press' ] ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <37> = [ 'Press' ] ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <38> = [ 'Press' ] ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <39> = 'Copy previous line' ;
        <40> = 'Copy current line' ;
        <41> = 'Copy next line' ;
        <42> = 'Blank line previous' ;
        <43> = 'Blank line next' ;
        <44> = 'Change character case' ;
        <45> = 'Define' ;
        <46> = 'Include' ;
        <47> = 'Equals' ;
        <48> = 'Hash' ;
        <49> = 'Insert space' ;
        <50> = 'Begin comment' ;
        <51> = 'End comment' ;
        <52> = 'Begin long comment' ;
        <53> = 'End long comment' ;
        <54> = 'Insert line break' ;
        <55> = 'Line comment' ;
        <56> = 'Double slash backslash' ;
        <57> = 'Double dot slash' ;
        <58> = 'List changes' ;
        <59> = 'Previous change' ;
        <60> = 'Undo jump' ;
        <61> = 'Return' ;
        <62> = 'Set mark' ;
        <63> = 'Goto mark' ;
        <64> = 'Beginning previous' ;
        <65> = 'Beginning next' ;
        <66> = 'Match bracket' ;
        <67> = 'Scroll to bottom' ;
        <68> = 'scroll to top' ;
        <69> = 'Line' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 | 253 | 254 | 255 | 256 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 267 | 268 | 269 | 270 | 271 | 272 | 273 | 274 | 275 | 276 | 277 | 278 | 279 | 280 | 281 | 282 | 283 | 284 | 285 | 286 | 287 | 288 | 289 | 290 | 291 | 292 | 293 | 294 | 295 | 296 | 297 | 298 | 299 | 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308 | 309 | 310 | 311 | 312 | 313 | 314 | 315 | 316 | 317 | 318 | 319 | 320 | 321 | 322 | 323 | 324 | 325 | 326 | 327 | 328 | 329 | 330 | 331 | 332 | 333 | 334 | 335 | 336 | 337 | 338 | 339 | 340 | 341 | 342 | 343 | 344 | 345 | 346 | 347 | 348 | 349 | 350 | 351 | 352 | 353 | 354 | 355 | 356 | 357 | 358 | 359 | 360 | 361 | 362 | 363 | 364 | 365 | 366 | 367 | 368 | 369 | 370 | 371 | 372 | 373 | 374 | 375 | 376 | 377 | 378 | 379 | 380 | 381 | 382 | 383 | 384 | 385 | 386 | 387 | 388 | 389 | 390 | 391 | 392 | 393 | 394 | 395 | 396 | 397 | 398 | 399 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 425 | 426 | 427 | 428 | 429 | 430 | 431 | 432 | 433 | 434 | 435 | 436 | 437 | 438 | 439 | 440 | 441 | 442 | 443 | 444 | 445 | 446 | 447 | 448 | 449 | 450 | 451 | 452 | 453 | 454 | 455 | 456 | 457 | 458 | 459 | 460 | 461 | 462 | 463 | 464 | 465 | 466 | 467 | 468 | 469 | 470 | 471 | 472 | 473 | 474 | 475 | 476 | 477 | 478 | 479 | 480 | 481 | 482 | 483 | 484 | 485 | 486 | 487 | 488 | 489 | 490 | 491 | 492 | 493 | 494 | 495 | 496 | 497 | 498 | 499 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 509 | 510 | 511 | 512 | 513 | 514 | 515 | 516 | 517 | 518 | 519 | 520 | 521 | 522 | 523 | 524 | 525 | 526 | 527 | 528 | 529 | 530 | 531 | 532 | 533 | 534 | 535 | 536 | 537 | 538 | 539 | 540 | 541 | 542 | 543 | 544 | 545 | 546 | 547 | 548 | 549 | 550 | 551 | 552 | 553 | 554 | 555 | 556 | 557 | 558 | 559 | 560 | 561 | 562 | 563 | 564 | 565 | 566 | 567 | 568 | 569 | 570 | 571 | 572 | 573 | 574 | 575 | 576 | 577 | 578 | 579 | 580 | 581 | 582 | 583 | 584 | 585 | 586 | 587 | 588 | 589 | 590 | 591 | 592 | 593 | 594 | 595 | 596 | 597 | 598 | 599 | 600 | 601 | 602 | 603 | 604 | 605 | 606 | 607 | 608 | 609 | 610 | 611 | 612 | 613 | 614 | 615 | 616 | 617 | 618 | 619 | 620 | 621 | 622 | 623 | 624 | 625 | 626 | 627 | 628 | 629 | 630 | 631 | 632 | 633 | 634 | 635 | 636 | 637 | 638 | 639 | 640 | 641 | 642 | 643 | 644 | 645 | 646 | 647 | 648 | 649 | 650 | 651 | 652 | 653 | 654 | 655 | 656 | 657 | 658 | 659 | 660 | 661 | 662 | 663 | 664 | 665 | 666 | 667 | 668 | 669 | 670 | 671 | 672 | 673 | 674 | 675 | 676 | 677 | 678 | 679 | 680 | 681 | 682 | 683 | 684 | 685 | 686 | 687 | 688 | 689 | 690 | 691 | 692 | 693 | 694 | 695 | 696 | 697 | 698 | 699 | 700 | 701 | 702 | 703 | 704 | 705 | 706 | 707 | 708 | 709 | 710 | 711 | 712 | 713 | 714 | 715 | 716 | 717 | 718 | 719 | 720 | 721 | 722 | 723 | 724 | 725 | 726 | 727 | 728 | 729 | 730 | 731 | 732 | 733 | 734 | 735 | 736 | 737 | 738 | 739 | 740 | 741 | 742 | 743 | 744 | 745 | 746 | 747 | 748 | 749 | 750 | 751 | 752 | 753 | 754 | 755 | 756 | 757 | 758 | 759 | 760 | 761 | 762 | 763 | 764 | 765 | 766 | 767 | 768 | 769 | 770 | 771 | 772 | 773 | 774 | 775 | 776 | 777 | 778 | 779 | 780 | 781 | 782 | 783 | 784 | 785 | 786 | 787 | 788 | 789 | 790 | 791 | 792 | 793 | 794 | 795 | 796 | 797 | 798 | 799 | 800 | 801 | 802 | 803 | 804 | 805 | 806 | 807 | 808 | 809 | 810 | 811 | 812 | 813 | 814 | 815 | 816 | 817 | 818 | 819 | 820 | 821 | 822 | 823 | 824 | 825 | 826 | 827 | 828 | 829 | 830 | 831 | 832 | 833 | 834 | 835 | 836 | 837 | 838 | 839 | 840 | 841 | 842 | 843 | 844 | 845 | 846 | 847 | 848 | 849 | 850 | 851 | 852 | 853 | 854 | 855 | 856 | 857 | 858 | 859 | 860 | 861 | 862 | 863 | 864 | 865 | 866 | 867 | 868 | 869 | 870 | 871 | 872 | 873 | 874 | 875 | 876 | 877 | 878 | 879 | 880 | 881 | 882 | 883 | 884 | 885 | 886 | 887 | 888 | 889 | 890 | 891 | 892 | 893 | 894 | 895 | 896 | 897 | 898 | 899 | 900 | 901 | 902 | 903 | 904 | 905 | 906 | 907 | 908 | 909 | 910 | 911 | 912 | 913 | 914 | 915 | 916 | 917 | 918 | 919 | 920 | 921 | 922 | 923 | 924 | 925 | 926 | 927 | 928 | 929 | 930 | 931 | 932 | 933 | 934 | 935 | 936 | 937 | 938 | 939 | 940 | 941 | 942 | 943 | 944 | 945 | 946 | 947 | 948 | 949 | 950 | 951 | 952 | 953 | 954 | 955 | 956 | 957 | 958 | 959 | 960 | 961 | 962 | 963 | 964 | 965 | 966 | 967 | 968 | 969 | 970 | 971 | 972 | 973 | 974 | 975 | 976 | 977 | 978 | 979 | 980 | 981 | 982 | 983 | 984 | 985 | 986 | 987 | 988 | 989 | 990 | 991 | 992 | 993 | 994 | 995 | 996 | 997 | 998 | 999) ;
        <70> = 'Back till' <key> ;
        <71> = 'Till' <key> ;
        <72> = 'Search' <dgndictation> ;
        <73> = 'Split vertical' ;
        <74> = 'Window left' ;
        <75> = 'Window right' ;
        <76> = 'Window up' ;
        <77> = 'Window down' ;
        <78> = 'Next window' ;
        <79> = 'Window close' ;
        <80> = 'Previous buffer' ;
        <81> = 'Remove buffer' ;
        <82> = 'Next buffer' ;
        <83> = 'Switch buffer' ;
        <84> = 'list buffers' ;
        <85> = 'Start macro' ;
        <86> = 'Repeat macro' ;
        <87> = 'Format' ;
        <88> = 'Replace' ;
        <89> = 'Normal mode' ;
        <90> = 'undo that' ;
        <91> = 'undo that' ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99) 'times' ;
        <92> = 'Redo that' ;
        <93> = 'Insert' ;
        <94> = 'Insert begin' ;
        <95> = 'Substitute' ;
        <96> = 'Change' ;
        <97> = 'Truncate' ;
        <98> = 'Append' ;
        <99> = 'Append line' ;
        <100> = 'Open above' ;
        <101> = 'Open down' ;
        <102> = 'Make' ;
        <103> = 'Update' ;
        <104> = 'List errors' ;
        <105> = 'Next error' ;
        <106> = 'Previous error' ;
        <107> = 'Save file' ;
        <108> = 'Close file' ;
        <109> = 'Save and close file' ;
        <110> = 'Previous command' ;
        <111> = 'Edit another' ;
        <112> = 'File browser' ;
        <113> = ('sub' | 'substitute' ) 'line' ;
        <114> = ('sub' | 'substitute' ) 'all' ;
        <115> = 'Folds' ;
        <116> = 'Taglist' ;
        <117> = 'Nowrap' ;
        <118> = 'Edit vim RC' ;
        <119> = 'Reload' ;
        <120> = 'package install' ;
        <121> = 'package remove' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<73>|<74>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<90>|<91>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<99>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<117>|<118>|<119>|<120>|<121>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'putty','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    # slap
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 5, 'slap', e)
            self.firstWord = -1

    # back
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 6, 'back', e)
            self.firstWord = -1

    # hat
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '^'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 7, 'hat', e)
            self.firstWord = -1

    # clam
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '!'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 8, 'clam', e)
            self.firstWord = -1

    # lat
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '@'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 9, 'lat', e)
            self.firstWord = -1

    # numb
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '#'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 10, 'numb', e)
            self.firstWord = -1

    # lace
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 11, 'lace', e)
            self.firstWord = -1

    # race
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_8(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 12, 'race', e)
            self.firstWord = -1

    # score
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '_'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 13, 'score', e)
            self.firstWord = -1

    # eke
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '='
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 14, 'eke', e)
            self.firstWord = -1

    # dall
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 15, 'dall', e)
            self.firstWord = -1

    # pipe
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '|'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 16, 'pipe', e)
            self.firstWord = -1

    # laip
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '('
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_13(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 17, 'laip', e)
            self.firstWord = -1

    # rye
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ')'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_14(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 18, 'rye', e)
            self.firstWord = -1

    def get_n(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '{b}'
        elif word == 'Right':
            list_buffer += '{w}'
        return list_buffer

    def get_start_end(self, list_buffer, functional, word):
        if word == 'Start':
            list_buffer += '{Home}'
        elif word == 'End':
            list_buffer += '{End}'
        return list_buffer

    def get_compass(self, list_buffer, functional, word):
        if word == 'North':
            list_buffer += '{Shift+h}'
        elif word == 'South':
            list_buffer += '{Shift+l}'
        elif word == 'East':
            list_buffer += '{'
            list_buffer += '$'
            list_buffer += '}'
        elif word == 'West':
            list_buffer += '{0}'
        return list_buffer

    def get_delmode(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += '{c}'
        elif word == 'Kill':
            list_buffer += '{d}'
        return list_buffer

    # ((0..30)) <direction>
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 39, '((0..30)) <direction>', e)
            self.firstWord = -1

    # Kill (Char | 1 | One)
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_16(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 40, 'Kill (Char | 1 | One)', e)
            self.firstWord = -1

    # Kill Back [1]
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != '1':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_17(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 41, 'Kill Back [1]', e)
            self.firstWord = -1

    # Kill <n>
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 42, 'Kill <n>', e)
            self.firstWord = -1

    # [Kill] Back <n>
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 0 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'Kill':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Backspace_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 43, '[Kill] Back <n>', e)
            self.firstWord = -1

    # [One] Word <left_right>
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 0 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'One':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 46, '[One] Word <left_right>', e)
            self.firstWord = -1

    # <n> Words <left_right>
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            limit = ''
            word = fullResults[0 + self.firstWord][0]
            limit = self.get_n(limit, True, word)
            for i in range(to_long(limit)):
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 47, '<n> Words <left_right>', e)
            self.firstWord = -1

    # Kill Word
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'dw'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 48, 'Kill Word', e)
            self.firstWord = -1

    # Kill <n> Words
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += 'dw'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 49, 'Kill <n> Words', e)
            self.firstWord = -1

    # Kill Back Word
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'db'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 50, 'Kill Back Word', e)
            self.firstWord = -1

    # Kill Back <n> Words
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += 'db'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 51, 'Kill Back <n> Words', e)
            self.firstWord = -1

    # Line <start_end>
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_start_end(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 54, 'Line <start_end>', e)
            self.firstWord = -1

    # New Line
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}i{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_27(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 55, 'New Line', e)
            self.firstWord = -1

    # Copy Line
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'yy'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 57, 'Copy Line', e)
            self.firstWord = -1

    # Kill Line
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'dd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 58, 'Kill Line', e)
            self.firstWord = -1

    # Kill Back Line
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':-1d'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 59, 'Kill Back Line', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # Press <key>
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, 'Press <key>', e)
            self.firstWord = -1

    # <key> Here
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 21, '<key> Here', e)
            self.firstWord = -1

    # Space Bar
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 23, 'Space Bar', e)
            self.firstWord = -1

    # Tab Key
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, 'Tab Key', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # [Press] ((Left | Right | Up | Down | space-bar | tab-key | Enter | page-up | page-down | Backspace | delete | escape)) <nn>
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 0 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'Press':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 36, '[Press] ((Left | Right | Up | Down | space-bar | tab-key | Enter | page-up | page-down | Backspace | delete | escape)) <nn>', e)
            self.firstWord = -1

    # [Press] (Shift | control-key | Alt) <key> <nn>
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 0 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'Press':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 37, '[Press] (Shift | control-key | Alt) <key> <nn>', e)
            self.firstWord = -1

    # [Press] (Shift | control-key | Alt) <mod> <key> <nn>
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 0 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'Press':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 38, '[Press] (Shift | control-key | Alt) <mod> <key> <nn>', e)
            self.firstWord = -1

    # [Press] (Shift | control-key | Alt) <mod> <mod> <key> <nn>
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        opt = 0 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][0] != 'Press':
            fullResults.insert(opt, 'dummy')
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 39, '[Press] (Shift | control-key | Alt) <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # Copy previous line
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':-1y'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 106, 'Copy previous line', e)
            self.firstWord = -1

    # Copy current line
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'yy'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_40(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 107, 'Copy current line', e)
            self.firstWord = -1

    # Copy next line
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':+1y'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 108, 'Copy next line', e)
            self.firstWord = -1

    # Blank line previous
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'O'
            top_buffer += '{down}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_42(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 109, 'Blank line previous', e)
            self.firstWord = -1

    # Blank line next
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'o'
            top_buffer += '{up}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_43(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 110, 'Blank line next', e)
            self.firstWord = -1

    # Change character case
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_44(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 111, 'Change character case', e)
            self.firstWord = -1

    # Define
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'id'
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_45(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 114, 'Define', e)
            self.firstWord = -1

    # Include
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'ii'
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_46(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 115, 'Include', e)
            self.firstWord = -1

    # Equals
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'i{right}'
            top_buffer += ' = '
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_47(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 116, 'Equals', e)
            self.firstWord = -1

    # Hash
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 117, 'Hash', e)
            self.firstWord = -1

    # Insert space
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_49(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 118, 'Insert space', e)
            self.firstWord = -1

    # Begin comment
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i/* '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_50(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 119, 'Begin comment', e)
            self.firstWord = -1

    # End comment
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i */'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_51(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 120, 'End comment', e)
            self.firstWord = -1

    # Begin long comment
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'ib'
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_52(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 121, 'Begin long comment', e)
            self.firstWord = -1

    # End long comment
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'ie'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_53(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 122, 'End long comment', e)
            self.firstWord = -1

    # Insert line break
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_54(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 123, 'Insert line break', e)
            self.firstWord = -1

    # Line comment
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'il'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_55(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 124, 'Line comment', e)
            self.firstWord = -1

    # Double slash backslash
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\/\\/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 125, 'Double slash backslash', e)
            self.firstWord = -1

    # Double dot slash
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '../'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 126, 'Double dot slash', e)
            self.firstWord = -1

    # List changes
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':changes'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 129, 'List changes', e)
            self.firstWord = -1

    # Previous change
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'g;'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 130, 'Previous change', e)
            self.firstWord = -1

    # Undo jump
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '``'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 132, 'Undo jump', e)
            self.firstWord = -1

    # Return
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\'\''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 133, 'Return', e)
            self.firstWord = -1

    # Set mark
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 134, 'Set mark', e)
            self.firstWord = -1

    # Goto mark
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\'zi'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 135, 'Goto mark', e)
            self.firstWord = -1

    # Beginning previous
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 136, 'Beginning previous', e)
            self.firstWord = -1

    # Beginning next
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '+'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_65(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 137, 'Beginning next', e)
            self.firstWord = -1

    # Match bracket
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '%'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 138, 'Match bracket', e)
            self.firstWord = -1

    # Scroll to bottom
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zb'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 139, 'Scroll to bottom', e)
            self.firstWord = -1

    # scroll to top
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zt'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 140, 'scroll to top', e)
            self.firstWord = -1

    # Line 1..999
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += ' {Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_69(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 141, 'Line 1..999', e)
            self.firstWord = -1

    # Back till <key>
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'T '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 142, 'Back till <key>', e)
            self.firstWord = -1

    # Till <key>
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 143, 'Till <key>', e)
            self.firstWord = -1

    # Search <_anything>
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'dgndictation':
            fullResults.insert(opt, ['', 'dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/ '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 144, 'Search <_anything>', e)
            self.firstWord = -1

    # Split vertical
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':vsp'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 147, 'Split vertical', e)
            self.firstWord = -1

    # Window left
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 148, 'Window left', e)
            self.firstWord = -1

    # Window right
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 149, 'Window right', e)
            self.firstWord = -1

    # Window up
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 150, 'Window up', e)
            self.firstWord = -1

    # Window down
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'j'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_77(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 151, 'Window down', e)
            self.firstWord = -1

    # Next window
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 152, 'Next window', e)
            self.firstWord = -1

    # Window close
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ESC}{Ctrl+w}'
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 153, 'Window close', e)
            self.firstWord = -1

    # Previous buffer
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bp'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 156, 'Previous buffer', e)
            self.firstWord = -1

    # Remove buffer
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bd'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 157, 'Remove buffer', e)
            self.firstWord = -1

    # Next buffer
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bn'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 158, 'Next buffer', e)
            self.firstWord = -1

    # Switch buffer
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':b#'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 159, 'Switch buffer', e)
            self.firstWord = -1

    # list buffers
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':buffers'
            top_buffer += '{enter}'
            top_buffer += ':b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 160, 'list buffers', e)
            self.firstWord = -1

    # Start macro
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'qz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 163, 'Start macro', e)
            self.firstWord = -1

    # Repeat macro
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\'@\'z'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 164, 'Repeat macro', e)
            self.firstWord = -1

    # Format
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'Q'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 165, 'Format', e)
            self.firstWord = -1

    # Replace
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'R'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 166, 'Replace', e)
            self.firstWord = -1

    # Normal mode
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ESC}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 167, 'Normal mode', e)
            self.firstWord = -1

    # undo that
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 168, 'undo that', e)
            self.firstWord = -1

    # undo that 1..99 times
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += 'u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_91(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 169, 'undo that 1..99 times', e)
            self.firstWord = -1

    # Redo that
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_92(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 170, 'Redo that', e)
            self.firstWord = -1

    # Insert
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ESC}'
            top_buffer += 'i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_93(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 171, 'Insert', e)
            self.firstWord = -1

    # Insert begin
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'I'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_94(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 172, 'Insert begin', e)
            self.firstWord = -1

    # Substitute
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 's'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_95(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 173, 'Substitute', e)
            self.firstWord = -1

    # Change
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'C'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 174, 'Change', e)
            self.firstWord = -1

    # Truncate
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'D'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 175, 'Truncate', e)
            self.firstWord = -1

    # Append
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'a'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_98(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 176, 'Append', e)
            self.firstWord = -1

    # Append line
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_99(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 177, 'Append line', e)
            self.firstWord = -1

    # Open above
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'O'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_100(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 178, 'Open above', e)
            self.firstWord = -1

    # Open down
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'o'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_101(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 179, 'Open down', e)
            self.firstWord = -1

    # Make
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':make'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 182, 'Make', e)
            self.firstWord = -1

    # Update
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':!ctags -a .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_103(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 183, 'Update', e)
            self.firstWord = -1

    # List errors
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':clist'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_104(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 184, 'List errors', e)
            self.firstWord = -1

    # Next error
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':cn'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 185, 'Next error', e)
            self.firstWord = -1

    # Previous error
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':cp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_106(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 186, 'Previous error', e)
            self.firstWord = -1

    # Save file
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':w'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 187, 'Save file', e)
            self.firstWord = -1

    # Close file
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':q'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_108(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 188, 'Close file', e)
            self.firstWord = -1

    # Save and close file
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':x'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 189, 'Save and close file', e)
            self.firstWord = -1

    # Previous command
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 191, 'Previous command', e)
            self.firstWord = -1

    # Edit another
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_111(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 192, 'Edit another', e)
            self.firstWord = -1

    # File browser
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e.'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 193, 'File browser', e)
            self.firstWord = -1

    # (sub | substitute) line
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':s///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_113(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 194, '(sub | substitute) line', e)
            self.firstWord = -1

    # (sub | substitute) all
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':%s///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_114(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 195, '(sub | substitute) all', e)
            self.firstWord = -1

    # Folds
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_115(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 198, 'Folds', e)
            self.firstWord = -1

    # Taglist
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ''
            top_buffer += '{ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 199, 'Taglist', e)
            self.firstWord = -1

    # Nowrap
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set nowrap{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_117(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 202, 'Nowrap', e)
            self.firstWord = -1

    # Edit vim RC
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e ~\\.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 203, 'Edit vim RC', e)
            self.firstWord = -1

    # Reload
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':source $MYVIMRC'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_119(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 204, 'Reload', e)
            self.firstWord = -1

    # package install
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'apt-get install '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_120(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 6, 'package install', e)
            self.firstWord = -1

    # package remove
    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'apt-get remove '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_121(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 7, 'package remove', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
