# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.1, Fri Mar 21 18:50:40 2014

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <1> = 'Press' <key> ;
        <2> = <key> 'Here' ;
        <3> = 'Space Bar' ;
        <4> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <5> = 'Press' <special> <nn> ;
        <184> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <6> = 'Press' <mod> <key> <nn> ;
        <185> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <7> = 'Press' <mod> <mod> <key> <nn> ;
        <186> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <8> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <187> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <0to9> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <2to9> = (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <1to20> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <1to30> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = ('Left' | 'Right' ) ;
        <top_bottom> = ('Top' | 'Bottom' | 'Middle' ) ;
        <9> = ((1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ) <direction> ;
        <10> = ('Change' | 'Copy' ) ('Char' | '1' | 'One' ) ;
        <11> = ('Change' | 'Copy' ) 'Back 1' ;
        <188> = ('Change' | 'Copy' ) 'Back' ;
        <12> = ('Change' | 'Copy' ) <12b> ;
        <12b> = <1to30> 'Chars' ;
        <189> = ('Change' | 'Copy' ) <1to30> ;
        <13> = ('Change' | 'Copy' ) 'Back' <13b> ;
        <13b> = <1to30> 'Chars' ;
        <190> = ('Change' | 'Copy' ) 'Back' <1to30> ;
        <14> = 'Kill' ('Char' | '1' | 'One' ) ;
        <15> = 'Kill Back 1' ;
        <191> = 'Kill Back' ;
        <16> = 'Kill' <16b> ;
        <16b> = <1to30> 'Chars' ;
        <192> = 'Kill' <1to30> ;
        <17> = 'Kill Back' <17b> ;
        <17b> = <1to30> 'Chars' ;
        <193> = 'Kill Back' <1to30> ;
        <18> = 'Change case' ('back' ) <1to30> ;
        <195> = 'Change case' ('back' ) ;
        <194> = 'Change case' <1to30> ;
        <196> = 'Change case' ;
        <19> = 'One Word' ;
        <197> = 'Word' ;
        <20> = 'Back One Word' ;
        <198> = 'Back Word' ;
        <21> = <1to30> 'Words' ;
        <22> = 'Back' <22b> ;
        <22b> = <1to30> 'Words' ;
        <23> = <edit_mode> 'Word' ;
        <24> = <edit_mode> <1to30> 'Words' ;
        <25> = <edit_mode> 'Back Word' ;
        <26> = <edit_mode> 'Back' <26b> ;
        <26b> = <1to30> 'Words' ;
        <27> = <edit_mode> 'Next Word' ;
        <line_actions> = ('Move to' | 'Copy to' | 'Change' | 'Kill' | 'Copy' | 'Sub' | 'Duplicate' | 'Start' | 'Append' | 'beginning' | 'middle' | 'near the end' | 'New Here' | 'New insert' | 'New Back' | 'Append semicolon' ) ;
        <edit_mode> = ('Change' | 'Kill' | 'Copy' ) ;
        <28> = <line_actions> 'Line' ;
        <29> = 'Swap' ('Back' | 'Next' ) 'Line' ;
        <199> = 'Swap Line' ;
        <30> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Line Here' ;
        <201> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Line' ;
        <200> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Here' ;
        <202> = <edit_mode> ('Beginning' | 'Start' | 'End' ) ;
        <31> = 'Blank' ('back' | 'insert' ) 'Line' ;
        <32> = 'Join' ('Back' | 'Next' ) 'Line' ;
        <203> = 'Join Line' ;
        <relative_range_actions> = ('Change' | 'Kill' | 'Copy' | 'Move to' | 'Copy to' | 'copy here' | 'Duplicate' | 'indent' | 'reverse indent' | 'Sub' | 'Comment' ) ;
        <33> = <relative_range_actions> ('Next' | 'Back' ) 'Line' ;
        <34> = <relative_range_actions> (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <35> = <relative_range_actions> 'Back' (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <range_actions> = ('Move to' | 'Copy to' | 'Change' | 'Kill' | 'Copy' | 'Sub' | 'copy here' | 'comment' ) ;
        <36> = <range_actions> 'Range' ;
        <insert> = ('insert' | 'append' ) ;
        <37> = 'Flow' ('Start' | 'Append' ) <insert> ;
        <204> = 'Flow' ('Start' | 'Append' ) ;
        <38> = <edit_mode> ('Flow Here' | 'Flow All' | 'Back Flow Here' ) ;
        <39> = ('Indent' | 'reverse indent' ) ('Line' | 'Range' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <205> = ('Indent' | 'reverse indent' ) ('Line' | 'Range' ) ;
        <sub_action> = ('line' | 'all' | 'here' | 'back here' ) ;
        <40> = ('sub' | 'substitute' ) <sub_action> ;
        <text_actions> = ('Paste' | 'Paste Back' | 'Insert' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' ) ;
        <41> = (('Paste' | 'Paste Back' | 'Insert' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' ) ) ;
        <standard_actions> = ('Start macro' | 'Repeat macro' | 'Format' | 'Normal mode' | 'visual mode' ) ;
        <42> = (('Start macro' | 'Repeat macro' | 'Format' | 'Normal mode' | 'visual mode' ) ) ;
        <43> = 'edit' ('undo' | 'redo' ) <2to9> ;
        <206> = 'edit' ('undo' | 'redo' ) ;
        <line_mod> = ('Insert' | 'Append' | 'Sub' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' | 'beginning' | 'middlie' | 'end' | 'insert back' | 'insert' | 'Change' | 'Kill' | 'Copy' | 'Paste' | 'Paste Back' | 'Move to' | 'Copy to' | 'copy here' | 'indent' | 'reverse indent' | 'Comment' | 'Blank back' | 'Blank insert' ) ;
        <44> = 'line' <line_mod> <0to9> ;
        <210> = 'line' <0to9> ;
        <45> = 'line' <line_mod> <0to9> <0to9> ;
        <211> = 'line' <0to9> <0to9> ;
        <46> = 'line' <line_mod> <0to9> <0to9> <0to9> ;
        <212> = 'line' <0to9> <0to9> <0to9> ;
        <47> = 'line' <line_mod> <0to9> <0to9> <0to9> <0to9> ;
        <213> = 'line' <0to9> <0to9> <0to9> <0to9> ;
        <navigation_actions> = ('List changes' | 'back change' | 'Undo jump' | 'Return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Beginning back' | 'Beginning next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' ) ;
        <48> = (('List changes' | 'back change' | 'Undo jump' | 'Return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Beginning back' | 'Beginning next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' ) ) ;
        <49> = 'Halfpage' ('Up' | 'Down' ) ;
        <217> = 'Halfpage' ;
        <50> = 'Page' <top_bottom> ;
        <51> = 'Back till' <key> ;
        <52> = 'Till' <key> ;
        <53> = 'Till next' ;
        <54> = 'Search' <dgndictation> ;
        <55> = 'Search go' <dgndictation> ;
        <56> = 'clear Search' ;
        <57> = 'Make' ;
        <58> = 'Vim Update Tag File' ;
        <59> = 'List errors' ;
        <60> = 'Next error' ;
        <61> = 'back error' ;
        <62> = 'Save file' ;
        <63> = 'Close file' ;
        <64> = 'Save and close file' ;
        <65> = 'back command' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <218> = 'back command' ;
        <66> = 'Edit another' ;
        <67> = 'File browser' ;
        <68> = 'vim diff split' ;
        <69> = 'Insert space' ;
        <70> = 'Insert space after' ;
        <71> = 'Append comment' ;
        <72> = 'Insert line break' ;
        <73> = 'Line comment' ;
        <74> = 'Double slash backslash' ;
        <75> = 'reference' ;
        <76> = 'Function definition' ;
        <77> = 'Function definition' <dgndictation> ;
        <78> = 'Show Help' ;
        <79> = 'Set setting' ;
        <80> = 'Set dark background' ;
        <81> = 'Set light background' ;
        <82> = 'Split vertical' ;
        <window_action> = ('left' | 'right' | 'up' | 'down' | 'next' | 'close' ) ;
        <83> = 'Vim Window' <window_action> ;
        <84> = 'Vim Window crop' ;
        <85> = 'Vim Window make fat' ;
        <86> = 'Vim Window make thin' ;
        <87> = 'back buffer' ;
        <88> = 'Close buffer' ;
        <89> = 'Next buffer' ;
        <90> = 'Switch buffer' ;
        <91> = 'Show buffers' ;
        <92> = 'numbered buffer' <1to30> ;
        <tab_actions> = ('back' | 'Close' | 'Next' | 'List' | 'Last' | 'First' ) ;
        <93> = <tab_actions> 'tab' ;
        <94> = 'switch tab' <1to30> ;
        <95> = 'vim Tag back' ;
        <96> = 'vim Tag Jump' ;
        <97> = 'vim Tag Next' ;
        <98> = 'Vim Tag Match' ;
        <99> = 'Vim Tag Return' ;
        <100> = 'Vim Tag Stack' ;
        <101> = 'Vim Folds' ;
        <102> = 'Vim show Taglist' ;
        <103> = 'Vim Align' ;
        <104> = 'Vim Align' <key> ;
        <105> = 'complete' ;
        <106> = 'local complete' ;
        <107> = 'Remove preview' ;
        <108> = 'Unite files' ;
        <109> = 'Unite files recursive' ;
        <110> = 'Unite recent' ;
        <111> = 'Unite history' ;
        <112> = 'Unite buffer' ;
        <113> = 'Unite insert' ;
        <114> = 'comment' ('range' | 'line' ) ;
        <comment_type> = ('frame' | 'function' | 'method' | 'class' | 'implementation' | 'header' | 'source section' | 'header section' | 'keyword' | 'special' | 'date' | 'time' | 'toggle type' ) ;
        <115> = <comment_type> 'comment' ;
        <statement_type> = ('do' | 'for' | 'if' | 'if else' | 'else' | 'while' | 'switch' | 'case' ) ;
        <116> = <statement_type> 'statement' ;
        <idiom_type> = ('function' | 'static' | 'main' | 'for increment' | 'print' | 'file print' ) ;
        <117> = <idiom_type> 'idiom' ;
        <118> = 'start' ('brace' | 'comment' ) ('block' ) ;
        <219> = 'start' ('brace' | 'comment' ) ;
        <preprocessor_type> = ('include header' | 'include global' | 'include local' | 'define' ) ;
        <119> = <preprocessor_type> 'preprocessor' ;
        <120> = 'Bundle command' ('Install' | 'Clean' | 'List' ) ;
        <121> = 'Nowrap' ;
        <122> = 'setting based' ;
        <123> = 'Edit vim RC' ;
        <124> = 'Reload' ;
        <125> = 'command history' ;
        <126> = 'pattern match history' ;
        <127> = 'histogram debug' ;
        <128> = 'ifdef' ('debug' | 'trace' ) ;
        <129> = 'ifdef end' ;
        <130> = 'screen new' ;
        <131> = 'screen remove' ;
        <132> = 'screen crop' ;
        <133> = 'screen scroll back' ;
        <134> = 'screen paste' ;
        <135> = 'screen mark' ;
        <136> = 'screen kill' ;
        <137> = 'screen help' ;
        <138> = 'screen split' ;
        <139> = 'screen title' ;
        <140> = 'screen list' ;
        <141> = 'screen switch' ;
        <142> = 'screen detach' ;
        <143> = 'screen next' ;
        <144> = 'screen previous' ;
        <145> = 'screen' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <146> = 'screen attach' ;
        <147> = 'screen join' ;
        <148> = 'screen search' ('backward' | 'forward' ) ;
        <149> = 'screen search next' ('backward' | 'forward' ) ;
        <machine> = ('release five' | 'release six' | 'P.O. Box' | 'PA install' | 'build Debian' | 'build Debian one' | 'build Debian two' | 'build cent toss' | 'build wheezy' | 'metabox one' | 'lark' | 'Embarcadero' | 'remote foil' | 'local foil' ) ;
        <common_actions> = ('edit' | 'source' ) ;
        <150> = 'vim config' ;
        <151> = 'edit vim config' ;
        <152> = <common_actions> 'bash config' ;
        <153> = 'bash history' ;
        <154> = 'break' ;
        <155> = 'escape process' ;
        <156> = ('foreground' | 'background' ) 'process' ;
        <157> = 'double dash' ;
        <158> = 'Bash Tag File Update' ;
        <159> = 'make tar' ;
        <160> = 'extract tar' ;
        <161> = 'confirm force remove file' ;
        <162> = 'back directory' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <163> = 'change ownership' ;
        <164> = 'change' ('permissions' | 'mode' ) ;
        <165> = 'home root' ;
        <166> = 'enter list' ;
        <167> = 'change absolute directory' ;
        <168> = 'present working directory' ;
        <169> = 'vim diff' ;
        <170> = 'cygwin password' ;
        <show> = ('show' | 'show some of' | 'show a lot of' | 'local show' ) ;
        <desc> = ('long' | 'full' | 'recent' | 'recursive' | 'human' ) ;
        <171> = <show> <desc> <desc> <desc> 'directory' ;
        <222> = <show> <desc> <desc> 'directory' ;
        <221> = <show> <desc> 'directory' ;
        <220> = <show> 'directory' ;
        <172> = <show> <desc> 'directory' ;
        <173> = <show> 'directory' ;
        <174> = 'show disk space' ;
        <usage> = ('usage' | 'usage kilobytes' | 'usage megabytes' ) ;
        <175> = 'show disk' <usage> ;
        <176> = 'secure login to' <machine> ;
        <223> = 'secure login' <machine> ;
        <177> = 'S F T P' <machine> ;
        <178> = 'multiple get' ;
        <179> = 'local change directory' ;
        <180> = 'local working directory' ;
        <scp> = ('secure copy' | 'secure recursive copy' | 'recursive secure copy' | 'secure clone' ) ;
        <181> = 'package install' ;
        <182> = 'package remove' ;
        <183> = 'Add' ('link' | 'torrent' | 'magnet' ) ;
        <any> = <1>|<2>|<3>|<4>|<5>|<184>|<6>|<185>|<7>|<186>|<8>|<187>|<9>|<10>|<11>|<188>|<12>|<189>|<13>|<190>|<14>|<15>|<191>|<16>|<192>|<17>|<193>|<18>|<195>|<194>|<196>|<19>|<197>|<20>|<198>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<199>|<30>|<201>|<200>|<202>|<31>|<32>|<203>|<33>|<34>|<35>|<36>|<37>|<204>|<38>|<39>|<205>|<40>|<41>|<42>|<43>|<206>|<44>|<210>|<45>|<211>|<46>|<212>|<47>|<213>|<48>|<49>|<217>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<218>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<73>|<74>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<90>|<91>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<99>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<117>|<118>|<219>|<119>|<120>|<121>|<122>|<123>|<124>|<125>|<126>|<127>|<128>|<129>|<130>|<131>|<132>|<133>|<134>|<135>|<136>|<137>|<138>|<139>|<140>|<141>|<142>|<143>|<144>|<145>|<146>|<147>|<148>|<149>|<150>|<151>|<152>|<153>|<154>|<155>|<156>|<157>|<158>|<159>|<160>|<161>|<162>|<163>|<164>|<165>|<166>|<167>|<168>|<169>|<170>|<171>|<222>|<221>|<220>|<172>|<173>|<174>|<175>|<176>|<223>|<177>|<178>|<179>|<180>|<181>|<182>|<183>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'putty','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # <key> 'Here'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 21, '<key> \'Here\'', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 23, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 36, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_184(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 36, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_185(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_186(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_187(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    def get_0to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_2to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_1to20(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_1to30(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '{b}'
        elif word == 'Right':
            list_buffer += '{w}'
        return list_buffer

    def get_top_bottom(self, list_buffer, functional, word):
        if word == 'Top':
            list_buffer += '{Shift+h}'
        elif word == 'Bottom':
            list_buffer += '{Shift+l}'
        elif word == 'Middle':
            list_buffer += '{Shift+m}'
        return list_buffer

    # (1..30) <direction>
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 22, '(1..30) <direction>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') ('Char' | '1' | 'One')
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_10(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 23, '(\'Change\' | \'Copy\') (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back 1'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_11(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 24, '(\'Change\' | \'Copy\') \'Back 1\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back'
    def gotResults_188(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_188(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 24, '(\'Change\' | \'Copy\') \'Back\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30> 'Chars'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 25, '(\'Change\' | \'Copy\') <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30>
    def gotResults_189(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 25, '(\'Change\' | \'Copy\') <1to30>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30> 'Chars'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 26, '(\'Change\' | \'Copy\') \'Back\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30>
    def gotResults_190(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 26, '(\'Change\' | \'Copy\') \'Back\' <1to30>', e)
            self.firstWord = -1

    # 'Kill' ('Char' | '1' | 'One')
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_14(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 27, '\'Kill\' (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # 'Kill Back 1'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 28, '\'Kill Back 1\'', e)
            self.firstWord = -1

    # 'Kill Back'
    def gotResults_191(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_191(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 28, '\'Kill Back\'', e)
            self.firstWord = -1

    # 'Kill' <1to30> 'Chars'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 29, '\'Kill\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill' <1to30>
    def gotResults_192(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 29, '\'Kill\' <1to30>', e)
            self.firstWord = -1

    # 'Kill Back' <1to30> 'Chars'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 30, '\'Kill Back\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill Back' <1to30>
    def gotResults_193(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 30, '\'Kill Back\' <1to30>', e)
            self.firstWord = -1

    # 'Change case' ('back') <1to30>
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                when_value += '1'
            if when_value != "":
                when_value2 = ''
                word = fullResults[2 + self.firstWord][0]
                when_value2 = self.get_1to30(when_value2, True, word)
                if when_value2 != "":
                    top_buffer += '{Left_'
                    word = fullResults[2 + self.firstWord][0]
                    top_buffer = self.get_1to30(top_buffer, False, word)
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_1to30(when_value, True, word)
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_1to30(top_buffer, False, word)
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 31, '\'Change case\' (\'back\') <1to30>', e)
            self.firstWord = -1

    # 'Change case' ('back')
    def gotResults_195(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                when_value += '1'
            if when_value != "":
                when_value2 = ''
                when_value2 += ''
                if when_value2 != "":
                    top_buffer += '{Left_'
                    top_buffer += ''
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_195(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 31, '\'Change case\' (\'back\')', e)
            self.firstWord = -1

    # 'Change case' <1to30>
    def gotResults_194(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                when_value2 = ''
                word = fullResults[1 + self.firstWord][0]
                when_value2 = self.get_1to30(when_value2, True, word)
                if when_value2 != "":
                    top_buffer += '{Left_'
                    word = fullResults[1 + self.firstWord][0]
                    top_buffer = self.get_1to30(top_buffer, False, word)
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_1to30(when_value, True, word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_1to30(top_buffer, False, word)
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 31, '\'Change case\' <1to30>', e)
            self.firstWord = -1

    # 'Change case'
    def gotResults_196(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                when_value2 = ''
                when_value2 += ''
                if when_value2 != "":
                    top_buffer += '{Left_'
                    top_buffer += ''
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_196(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 31, '\'Change case\'', e)
            self.firstWord = -1

    # 'One Word'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 34, '\'One Word\'', e)
            self.firstWord = -1

    # 'Word'
    def gotResults_197(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_197(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 34, '\'Word\'', e)
            self.firstWord = -1

    # 'Back One Word'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 35, '\'Back One Word\'', e)
            self.firstWord = -1

    # 'Back Word'
    def gotResults_198(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_198(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 35, '\'Back Word\'', e)
            self.firstWord = -1

    # <1to30> 'Words'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 36, '<1to30> \'Words\'', e)
            self.firstWord = -1

    # 'Back' <1to30> 'Words'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 37, '\'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Word'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 38, '<edit_mode> \'Word\'', e)
            self.firstWord = -1

    # <edit_mode> <1to30> 'Words'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 39, '<edit_mode> <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Word'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 40, '<edit_mode> \'Back Word\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back' <1to30> 'Words'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 41, '<edit_mode> \'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Next Word'
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 42, '<edit_mode> \'Next Word\'', e)
            self.firstWord = -1

    def get_line_actions(self, list_buffer, functional, word):
        if word == 'Move to':
            list_buffer += ':.m'
        elif word == 'Copy to':
            list_buffer += ':.co'
        elif word == 'Change':
            list_buffer += 'cc'
        elif word == 'Kill':
            list_buffer += 'dd'
        elif word == 'Copy':
            list_buffer += 'yy'
        elif word == 'Sub':
            list_buffer += ':.s///{Left_2}'
        elif word == 'Duplicate':
            list_buffer += 'yyp'
        elif word == 'Start':
            list_buffer += '\\^i'
        elif word == 'Append':
            list_buffer += '$i'
        elif word == 'beginning':
            list_buffer += '20li'
        elif word == 'middle':
            list_buffer += '40li'
        elif word == 'near the end':
            list_buffer += '60li'
        elif word == 'New Here':
            list_buffer += 'i{enter}'
        elif word == 'New insert':
            list_buffer += 'o'
        elif word == 'New Back':
            list_buffer += 'O'
        elif word == 'Append semicolon':
            list_buffer += '$i;'
        return list_buffer

    def get_edit_mode(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += '{c}'
        elif word == 'Kill':
            list_buffer += '{d}'
        elif word == 'Copy':
            list_buffer += '{y}'
        return list_buffer

    # <line_actions> 'Line'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_line_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 54, '<line_actions> \'Line\'', e)
            self.firstWord = -1

    # 'Swap' ('Back' | 'Next') 'Line'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            else:
                top_buffer += ''
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_29(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 55, '\'Swap\' (\'Back\' | \'Next\') \'Line\'', e)
            self.firstWord = -1

    # 'Swap Line'
    def gotResults_199(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += ''
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_199(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 55, '\'Swap Line\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Line Here'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 56, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Line Here\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Line'
    def gotResults_201(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 56, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Line\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Here'
    def gotResults_200(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 56, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Here\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End')
    def gotResults_202(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 56, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\')', e)
            self.firstWord = -1

    # 'Blank' ('back' | 'insert') 'Line'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                top_buffer += 'O{down}'
            elif word == 'insert':
                top_buffer += 'o{up}'
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_31(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 57, '\'Blank\' (\'back\' | \'insert\') \'Line\'', e)
            self.firstWord = -1

    # 'Join' ('Back' | 'Next') 'Line'
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_32(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 58, '\'Join\' (\'Back\' | \'Next\') \'Line\'', e)
            self.firstWord = -1

    # 'Join Line'
    def gotResults_203(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_203(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 58, '\'Join Line\'', e)
            self.firstWord = -1

    def get_relative_range_actions(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += 'c{enter}'
        elif word == 'Kill':
            list_buffer += 'd{enter}'
        elif word == 'Copy':
            list_buffer += 'y{enter}'
        elif word == 'Move to':
            list_buffer += 'm'
        elif word == 'Copy to':
            list_buffer += 'co'
        elif word == 'copy here':
            list_buffer += 'co-1{enter}'
        elif word == 'Duplicate':
            list_buffer += 'yyp{enter}'
        elif word == 'indent':
            list_buffer += '>{enter}'
        elif word == 'reverse indent':
            list_buffer += '<{enter}'
        elif word == 'Sub':
            list_buffer += 's///gc{Left_4}'
        elif word == 'Comment':
            list_buffer += 'TComment{enter}'
        return list_buffer

    # <relative_range_actions> ('Next' | 'Back') 'Line'
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Next':
                top_buffer += '+'
            elif word == 'Back':
                top_buffer += '-'
            top_buffer += '1'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 67, '<relative_range_actions> (\'Next\' | \'Back\') \'Line\'', e)
            self.firstWord = -1

    # <relative_range_actions> 2..30 'Lines'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':.,+'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 68, '<relative_range_actions> 2..30 \'Lines\'', e)
            self.firstWord = -1

    # <relative_range_actions> 'Back' 2..30 'Lines'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':-'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += ',-1'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 69, '<relative_range_actions> \'Back\' 2..30 \'Lines\'', e)
            self.firstWord = -1

    def get_range_actions(self, list_buffer, functional, word):
        if word == 'Move to':
            list_buffer += 'm'
        elif word == 'Copy to':
            list_buffer += 'co'
        elif word == 'Change':
            list_buffer += 'c'
        elif word == 'Kill':
            list_buffer += 'd'
        elif word == 'Copy':
            list_buffer += 'y'
        elif word == 'Sub':
            list_buffer += 's///'
        elif word == 'copy here':
            list_buffer += 'co.'
        elif word == 'comment':
            list_buffer += 'TComment'
        return list_buffer

    # <range_actions> 'Range'
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_range_actions(top_buffer, False, word)
            top_buffer += '{Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 76, '<range_actions> \'Range\'', e)
            self.firstWord = -1

    def get_insert(self, list_buffer, functional, word):
        if word == 'insert':
            list_buffer += 'I'
        elif word == 'append':
            list_buffer += 'A'
        return list_buffer

    # 'Flow' ('Start' | 'Append') <insert>
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'Append':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_insert(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 80, '\'Flow\' (\'Start\' | \'Append\') <insert>', e)
            self.firstWord = -1

    # 'Flow' ('Start' | 'Append')
    def gotResults_204(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'Append':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_204(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 80, '\'Flow\' (\'Start\' | \'Append\')', e)
            self.firstWord = -1

    # <edit_mode> ('Flow Here' | 'Flow All' | 'Back Flow Here')
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Flow Here':
                top_buffer += '.,$'
            elif word == 'Flow All':
                top_buffer += '0,$'
            elif word == 'Back Flow Here':
                top_buffer += '0,.'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 81, '<edit_mode> (\'Flow Here\' | \'Flow All\' | \'Back Flow Here\')', e)
            self.firstWord = -1

    # ('Indent' | 'reverse indent') ('Line' | 'Range') 1..9
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'Indent':
                        top_buffer += '>'
                    elif word == 'reverse indent':
                        top_buffer += '<'
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'Line':
                        top_buffer += '{enter}'
                    elif word == 'Range':
                        top_buffer += '{Left}'
            else:
                top_buffer += '{esc}'
                top_buffer += ':'
                word = fullResults[0 + self.firstWord][0]
                if word == 'Indent':
                    top_buffer += '>'
                elif word == 'reverse indent':
                    top_buffer += '<'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Line':
                    top_buffer += '{enter}'
                elif word == 'Range':
                    top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_39(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 84, '(\'Indent\' | \'reverse indent\') (\'Line\' | \'Range\') 1..9', e)
            self.firstWord = -1

    # ('Indent' | 'reverse indent') ('Line' | 'Range')
    def gotResults_205(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'Indent':
                        top_buffer += '>'
                    elif word == 'reverse indent':
                        top_buffer += '<'
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'Line':
                        top_buffer += '{enter}'
                    elif word == 'Range':
                        top_buffer += '{Left}'
            else:
                top_buffer += '{esc}'
                top_buffer += ':'
                word = fullResults[0 + self.firstWord][0]
                if word == 'Indent':
                    top_buffer += '>'
                elif word == 'reverse indent':
                    top_buffer += '<'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Line':
                    top_buffer += '{enter}'
                elif word == 'Range':
                    top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_205(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 84, '(\'Indent\' | \'reverse indent\') (\'Line\' | \'Range\')', e)
            self.firstWord = -1

    def get_sub_action(self, list_buffer, functional, word):
        if word == 'line':
            list_buffer += 's'
        elif word == 'all':
            list_buffer += '%s'
        elif word == 'here':
            list_buffer += '.,$s'
        elif word == 'back here':
            list_buffer += '0,.s'
        return list_buffer

    # ('sub' | 'substitute') <sub_action>
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_sub_action(top_buffer, False, word)
            top_buffer += '///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 87, '(\'sub\' | \'substitute\') <sub_action>', e)
            self.firstWord = -1

    def get_text_actions(self, list_buffer, functional, word):
        if word == 'Paste':
            list_buffer += 'p'
        elif word == 'Paste Back':
            list_buffer += 'P'
        elif word == 'Insert':
            list_buffer += 'i'
        elif word == 'Append':
            list_buffer += 'a'
        elif word == 'Substitute':
            list_buffer += 's'
        elif word == 'Replace':
            list_buffer += 'R'
        elif word == 'diff push':
            list_buffer += 'dp'
        elif word == 'diff pull':
            list_buffer += 'do'
        elif word == 'diff next':
            list_buffer += '\\]c'
        elif word == 'diff back':
            list_buffer += '\\[c'
        return list_buffer

    # (('Paste' | 'Paste Back' | 'Insert' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back'))
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Paste':
                top_buffer += 'p'
            elif word == 'Paste Back':
                top_buffer += 'P'
            elif word == 'Insert':
                top_buffer += 'i'
            elif word == 'Append':
                top_buffer += 'a'
            elif word == 'Substitute':
                top_buffer += 's'
            elif word == 'Replace':
                top_buffer += 'R'
            elif word == 'diff push':
                top_buffer += 'dp'
            elif word == 'diff pull':
                top_buffer += 'do'
            elif word == 'diff next':
                top_buffer += '\\]c'
            elif word == 'diff back':
                top_buffer += '\\[c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 93, '((\'Paste\' | \'Paste Back\' | \'Insert\' | \'Append\' | \'Substitute\' | \'Replace\' | \'diff push\' | \'diff pull\' | \'diff next\' | \'diff back\'))', e)
            self.firstWord = -1

    def get_standard_actions(self, list_buffer, functional, word):
        if word == 'Start macro':
            list_buffer += 'qz'
        elif word == 'Repeat macro':
            list_buffer += '@z{Enter}'
        elif word == 'Format':
            list_buffer += 'Q'
        elif word == 'Normal mode':
            pass  # no actions
        elif word == 'visual mode':
            list_buffer += '{ctrl+v}'
        return list_buffer

    # (('Start macro' | 'Repeat macro' | 'Format' | 'Normal mode' | 'visual mode'))
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Start macro':
                top_buffer += 'qz'
            elif word == 'Repeat macro':
                top_buffer += '@z{Enter}'
            elif word == 'Format':
                top_buffer += 'Q'
            elif word == 'Normal mode':
                pass  # no actions
            elif word == 'visual mode':
                top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_42(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 100, '((\'Start macro\' | \'Repeat macro\' | \'Format\' | \'Normal mode\' | \'visual mode\'))', e)
            self.firstWord = -1

    # 'edit' ('undo' | 'redo') <2to9>
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_2to9(when_value, True, word)
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_2to9(top_buffer, False, word)
                word = fullResults[1 + self.firstWord][0]
                if word == 'undo':
                    top_buffer += 'u'
                elif word == 'redo':
                    top_buffer += '{ctrl+r}'
            else:
                top_buffer += '1'
                word = fullResults[1 + self.firstWord][0]
                if word == 'undo':
                    top_buffer += 'u'
                elif word == 'redo':
                    top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 101, '\'edit\' (\'undo\' | \'redo\') <2to9>', e)
            self.firstWord = -1

    # 'edit' ('undo' | 'redo')
    def gotResults_206(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                word = fullResults[1 + self.firstWord][0]
                if word == 'undo':
                    top_buffer += 'u'
                elif word == 'redo':
                    top_buffer += '{ctrl+r}'
            else:
                top_buffer += '1'
                word = fullResults[1 + self.firstWord][0]
                if word == 'undo':
                    top_buffer += 'u'
                elif word == 'redo':
                    top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_206(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 101, '\'edit\' (\'undo\' | \'redo\')', e)
            self.firstWord = -1

    def get_line_mod(self, list_buffer, functional, word):
        if word == 'Insert':
            list_buffer += 'zzI'
        elif word == 'Append':
            list_buffer += 'zzA'
        elif word == 'Sub':
            list_buffer += ':s///{Left_2}'
        elif word == 'Scroll to bottom':
            list_buffer += 'zb'
        elif word == 'Scroll bottom':
            list_buffer += 'zb'
        elif word == 'Scroll to top':
            list_buffer += 'zt'
        elif word == 'Scroll top':
            list_buffer += 'zt'
        elif word == 'Scroll to middle':
            list_buffer += 'zz'
        elif word == 'Scroll middle':
            list_buffer += 'zz'
        elif word == 'beginning':
            list_buffer += '20li'
        elif word == 'middlie':
            list_buffer += '40li'
        elif word == 'end':
            list_buffer += '60li'
        elif word == 'insert back':
            list_buffer += 'zzO'
        elif word == 'insert':
            list_buffer += 'zzo'
        elif word == 'Change':
            list_buffer += ':.c{enter}'
            list_buffer += '\'v'
        elif word == 'Kill':
            list_buffer += ':.d{enter}'
            list_buffer += '\'v'
        elif word == 'Copy':
            list_buffer += ':.y{enter}'
            list_buffer += '\'v'
        elif word == 'Paste':
            list_buffer += 'p'
            list_buffer += '\'v'
        elif word == 'Paste Back':
            list_buffer += 'P'
            list_buffer += '\'v'
        elif word == 'Move to':
            list_buffer += ':.m'
        elif word == 'Copy to':
            list_buffer += ':.co'
        elif word == 'copy here':
            list_buffer += ':.y{enter}'
            list_buffer += '\'v'
            list_buffer += 'p'
        elif word == 'indent':
            list_buffer += ':>{enter}'
            list_buffer += '\'v'
        elif word == 'reverse indent':
            list_buffer += ':<{enter}'
            list_buffer += '\'v'
        elif word == 'Comment':
            list_buffer += ':TComment{enter}'
            list_buffer += '\'v'
        elif word == 'Blank back':
            list_buffer += 'O{esc}'
            list_buffer += '\'v'
        elif word == 'Blank insert':
            list_buffer += 'o{esc}'
            list_buffer += '\'v'
        return list_buffer

    # 'line' <line_mod> <0to9>
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 129, '\'line\' <line_mod> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9>
    def gotResults_210(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 129, '\'line\' <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9>
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 130, '\'line\' <line_mod> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9>
    def gotResults_211(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 130, '\'line\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9> <0to9>
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 131, '\'line\' <line_mod> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9>
    def gotResults_212(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 131, '\'line\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9> <0to9> <0to9>
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[5 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('vim.vch', 132, '\'line\' <line_mod> <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9> <0to9>
    def gotResults_213(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 132, '\'line\' <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    def get_navigation_actions(self, list_buffer, functional, word):
        if word == 'List changes':
            list_buffer += ':changes'
        elif word == 'back change':
            list_buffer += 'g;'
        elif word == 'Undo jump':
            list_buffer += '``'
        elif word == 'Return from':
            list_buffer += '\'\''
        elif word == 'Set mark':
            list_buffer += 'mz'
        elif word == 'Goto mark':
            list_buffer += '\'zi'
        elif word == 'Append back':
            list_buffer += '-$i'
        elif word == 'Append next':
            list_buffer += '+$i'
        elif word == 'Beginning back':
            list_buffer += '-i'
        elif word == 'Beginning next':
            list_buffer += '+i'
        elif word == 'Match bracket':
            list_buffer += '%'
        elif word == 'Scroll to bottom':
            list_buffer += 'zb'
        elif word == 'Scroll bottom':
            list_buffer += 'zb'
        elif word == 'Scroll to top':
            list_buffer += 'zt'
        elif word == 'Scroll top':
            list_buffer += 'zt'
        elif word == 'Scroll to middle':
            list_buffer += 'zz'
        elif word == 'Scroll middle':
            list_buffer += 'zz'
        return list_buffer

    # (('List changes' | 'back change' | 'Undo jump' | 'Return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Beginning back' | 'Beginning next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle'))
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'List changes':
                top_buffer += ':changes'
            elif word == 'back change':
                top_buffer += 'g;'
            elif word == 'Undo jump':
                top_buffer += '``'
            elif word == 'Return from':
                top_buffer += '\'\''
            elif word == 'Set mark':
                top_buffer += 'mz'
            elif word == 'Goto mark':
                top_buffer += '\'zi'
            elif word == 'Append back':
                top_buffer += '-$i'
            elif word == 'Append next':
                top_buffer += '+$i'
            elif word == 'Beginning back':
                top_buffer += '-i'
            elif word == 'Beginning next':
                top_buffer += '+i'
            elif word == 'Match bracket':
                top_buffer += '%'
            elif word == 'Scroll to bottom':
                top_buffer += 'zb'
            elif word == 'Scroll bottom':
                top_buffer += 'zb'
            elif word == 'Scroll to top':
                top_buffer += 'zt'
            elif word == 'Scroll top':
                top_buffer += 'zt'
            elif word == 'Scroll to middle':
                top_buffer += 'zz'
            elif word == 'Scroll middle':
                top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 144, '((\'List changes\' | \'back change\' | \'Undo jump\' | \'Return from\' | \'Set mark\' | \'Goto mark\' | \'Append back\' | \'Append next\' | \'Beginning back\' | \'Beginning next\' | \'Match bracket\' | \'Scroll to bottom\' | \'Scroll bottom\' | \'Scroll to top\' | \'Scroll top\' | \'Scroll to middle\' | \'Scroll middle\'))', e)
            self.firstWord = -1

    # 'Halfpage' ('Up' | 'Down')
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Up':
                when_value += 'u'
            elif word == 'Down':
                when_value += 'd'
            if when_value != "":
                top_buffer += '{Ctrl+'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Up':
                    top_buffer += 'u'
                elif word == 'Down':
                    top_buffer += 'd'
                top_buffer += '}'
            else:
                top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_49(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 145, '\'Halfpage\' (\'Up\' | \'Down\')', e)
            self.firstWord = -1

    # 'Halfpage'
    def gotResults_217(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{Ctrl+'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_217(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 145, '\'Halfpage\'', e)
            self.firstWord = -1

    # 'Page' <top_bottom>
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_top_bottom(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 146, '\'Page\' <top_bottom>', e)
            self.firstWord = -1

    # 'Back till' <key>
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'T'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 149, '\'Back till\' <key>', e)
            self.firstWord = -1

    # 'Till' <key>
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 150, '\'Till\' <key>', e)
            self.firstWord = -1

    # 'Till next'
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_53(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 151, '\'Till next\'', e)
            self.firstWord = -1

    # 'Search' <_anything>
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 152, '\'Search\' <_anything>', e)
            self.firstWord = -1

    # 'Search go' <_anything>
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 153, '\'Search go\' <_anything>', e)
            self.firstWord = -1

    # 'clear Search'
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/zzz'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 154, '\'clear Search\'', e)
            self.firstWord = -1

    # 'Make'
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':make'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 157, '\'Make\'', e)
            self.firstWord = -1

    # 'Vim Update Tag File'
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 158, '\'Vim Update Tag File\'', e)
            self.firstWord = -1

    # 'List errors'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':clist'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 159, '\'List errors\'', e)
            self.firstWord = -1

    # 'Next error'
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':cn'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 160, '\'Next error\'', e)
            self.firstWord = -1

    # 'back error'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':cp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 161, '\'back error\'', e)
            self.firstWord = -1

    # 'Save file'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':w'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 162, '\'Save file\'', e)
            self.firstWord = -1

    # 'Close file'
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':q'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 163, '\'Close file\'', e)
            self.firstWord = -1

    # 'Save and close file'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':x'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 164, '\'Save and close file\'', e)
            self.firstWord = -1

    # 'back command' 1..9
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer += '{up}{enter}'
            else:
                top_buffer += '{Esc}'
                top_buffer += ':'
                top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_65(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 166, '\'back command\' 1..9', e)
            self.firstWord = -1

    # 'back command'
    def gotResults_218(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer += '{up}{enter}'
            else:
                top_buffer += '{Esc}'
                top_buffer += ':'
                top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_218(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 166, '\'back command\'', e)
            self.firstWord = -1

    # 'Edit another'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 167, '\'Edit another\'', e)
            self.firstWord = -1

    # 'File browser'
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e.'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 168, '\'File browser\'', e)
            self.firstWord = -1

    # 'vim diff split'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':vert diffsplit '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 169, '\'vim diff split\'', e)
            self.firstWord = -1

    # 'Insert space'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 178, '\'Insert space\'', e)
            self.firstWord = -1

    # 'Insert space after'
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{Right}{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_70(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 180, '\'Insert space after\'', e)
            self.firstWord = -1

    # 'Append comment'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i */'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 182, '\'Append comment\'', e)
            self.firstWord = -1

    # 'Insert line break'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 185, '\'Insert line break\'', e)
            self.firstWord = -1

    # 'Line comment'
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'il'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 186, '\'Line comment\'', e)
            self.firstWord = -1

    # 'Double slash backslash'
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\/\\/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 187, '\'Double slash backslash\'', e)
            self.firstWord = -1

    # 'reference'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 188, '\'reference\'', e)
            self.firstWord = -1

    # 'Function definition'
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef ():'
            top_buffer += '{Left_3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 189, '\'Function definition\'', e)
            self.firstWord = -1

    # 'Function definition' <_anything>
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '():'
            top_buffer += '{Left_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 190, '\'Function definition\' <_anything>', e)
            self.firstWord = -1

    # 'Show Help'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':help '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 191, '\'Show Help\'', e)
            self.firstWord = -1

    # 'Set setting'
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':set '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 192, '\'Set setting\'', e)
            self.firstWord = -1

    # 'Set dark background'
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':set bg=dark'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 193, '\'Set dark background\'', e)
            self.firstWord = -1

    # 'Set light background'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':set bg=light'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 194, '\'Set light background\'', e)
            self.firstWord = -1

    # 'Split vertical'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':vsp'
            top_buffer += '{Enter}{Shift+h}{PgUp}'
            top_buffer += '{Ctrl+w}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 199, '\'Split vertical\'', e)
            self.firstWord = -1

    def get_window_action(self, list_buffer, functional, word):
        if word == 'left':
            list_buffer += 'h'
        elif word == 'right':
            list_buffer += 'l'
        elif word == 'up':
            list_buffer += 'k'
        elif word == 'down':
            list_buffer += 'j'
        elif word == 'next':
            list_buffer += 'w'
        elif word == 'close':
            list_buffer += 'c'
        return list_buffer

    # 'Vim Window' <window_action>
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+w}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_window_action(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 201, '\'Vim Window\' <window_action>', e)
            self.firstWord = -1

    # 'Vim Window crop'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':only'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 202, '\'Vim Window crop\'', e)
            self.firstWord = -1

    # 'Vim Window make fat'
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':vertical resize +15'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 203, '\'Vim Window make fat\'', e)
            self.firstWord = -1

    # 'Vim Window make thin'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':vertical resize -15'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 204, '\'Vim Window make thin\'', e)
            self.firstWord = -1

    # 'back buffer'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bp'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 207, '\'back buffer\'', e)
            self.firstWord = -1

    # 'Close buffer'
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bd'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 208, '\'Close buffer\'', e)
            self.firstWord = -1

    # 'Next buffer'
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bn'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 209, '\'Next buffer\'', e)
            self.firstWord = -1

    # 'Switch buffer'
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':b#'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 210, '\'Switch buffer\'', e)
            self.firstWord = -1

    # 'Show buffers'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':buffers'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 211, '\'Show buffers\'', e)
            self.firstWord = -1

    # 'numbered buffer' <1to30>
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':b'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 212, '\'numbered buffer\' <1to30>', e)
            self.firstWord = -1

    def get_tab_actions(self, list_buffer, functional, word):
        if word == 'back':
            list_buffer += 'p'
        elif word == 'Close':
            list_buffer += 'c'
        elif word == 'Next':
            list_buffer += 'n'
        elif word == 'List':
            list_buffer += 's'
        elif word == 'Last':
            list_buffer += 'l'
        elif word == 'First':
            list_buffer += 'fir'
        return list_buffer

    # <tab_actions> 'tab'
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':tab'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_tab_actions(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 216, '<tab_actions> \'tab\'', e)
            self.firstWord = -1

    # 'switch tab' <1to30>
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':tabn '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 217, '\'switch tab\' <1to30>', e)
            self.firstWord = -1

    # 'vim Tag back'
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':tN{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_95(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 222, '\'vim Tag back\'', e)
            self.firstWord = -1

    # 'vim Tag Jump'
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += '{Ctrl+]}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 223, '\'vim Tag Jump\'', e)
            self.firstWord = -1

    # 'vim Tag Next'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':tn{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 224, '\'vim Tag Next\'', e)
            self.firstWord = -1

    # 'Vim Tag Match'
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':ts{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_98(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 225, '\'Vim Tag Match\'', e)
            self.firstWord = -1

    # 'Vim Tag Return'
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += '{Ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_99(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 226, '\'Vim Tag Return\'', e)
            self.firstWord = -1

    # 'Vim Tag Stack'
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':tags{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_100(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 227, '\'Vim Tag Stack\'', e)
            self.firstWord = -1

    # 'Vim Folds'
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_101(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 231, '\'Vim Folds\'', e)
            self.firstWord = -1

    # 'Vim show Taglist'
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 232, '\'Vim show Taglist\'', e)
            self.firstWord = -1

    # 'Vim Align'
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':Align '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_103(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 233, '\'Vim Align\'', e)
            self.firstWord = -1

    # 'Vim Align' <key>
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':Align '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '{Left_7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 234, '\'Vim Align\' <key>', e)
            self.firstWord = -1

    # 'complete'
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+x}{ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 236, '\'complete\'', e)
            self.firstWord = -1

    # 'local complete'
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_106(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 237, '\'local complete\'', e)
            self.firstWord = -1

    # 'Remove preview'
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+w}{Up}'
            top_buffer += ':q{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 238, '\'Remove preview\'', e)
            self.firstWord = -1

    # 'Unite files'
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\f'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_108(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 241, '\'Unite files\'', e)
            self.firstWord = -1

    # 'Unite files recursive'
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\t'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 242, '\'Unite files recursive\'', e)
            self.firstWord = -1

    # 'Unite recent'
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\m'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 243, '\'Unite recent\'', e)
            self.firstWord = -1

    # 'Unite history'
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\y'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_111(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 245, '\'Unite history\'', e)
            self.firstWord = -1

    # 'Unite buffer'
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 246, '\'Unite buffer\'', e)
            self.firstWord = -1

    # 'Unite insert'
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{tab}'
            top_buffer += '{Down_3}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_113(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 247, '\'Unite insert\'', e)
            self.firstWord = -1

    # 'comment' ('range' | 'line')
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':TComment'
            word = fullResults[1 + self.firstWord][0]
            if word == 'range':
                limit = ''
                limit += '9'
                for i in range(to_long(limit)):
                    top_buffer += '{Left}'
            elif word == 'line':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_114(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 250, '\'comment\' (\'range\' | \'line\')', e)
            self.firstWord = -1

    def get_comment_type(self, list_buffer, functional, word):
        if word == 'frame':
            list_buffer += 'fr'
        elif word == 'function':
            list_buffer += 'fu'
        elif word == 'method':
            list_buffer += 'me'
        elif word == 'class':
            list_buffer += 'cl'
        elif word == 'implementation':
            list_buffer += 'fdi'
        elif word == 'header':
            list_buffer += 'fdh'
        elif word == 'source section':
            list_buffer += 'cs'
        elif word == 'header section':
            list_buffer += 'hs'
        elif word == 'keyword':
            list_buffer += 'kc'
        elif word == 'special':
            list_buffer += 'sc'
        elif word == 'date':
            list_buffer += 'd'
        elif word == 'time':
            list_buffer += 't'
        elif word == 'toggle type':
            list_buffer += 'x'
        return list_buffer

    # <comment_type> 'comment'
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\c'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_comment_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 259, '<comment_type> \'comment\'', e)
            self.firstWord = -1

    def get_statement_type(self, list_buffer, functional, word):
        if word == 'do':
            list_buffer += 'd'
        elif word == 'for':
            list_buffer += 'fo'
        elif word == 'if':
            list_buffer += 'if'
        elif word == 'if else':
            list_buffer += 'ife'
        elif word == 'else':
            list_buffer += 'e'
        elif word == 'while':
            list_buffer += 'wh'
        elif word == 'switch':
            list_buffer += 's'
        elif word == 'case':
            list_buffer += 'c'
        return list_buffer

    # <statement_type> 'statement'
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\s'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_statement_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 265, '<statement_type> \'statement\'', e)
            self.firstWord = -1

    def get_idiom_type(self, list_buffer, functional, word):
        if word == 'function':
            list_buffer += 'f'
        elif word == 'static':
            list_buffer += 'sf'
        elif word == 'main':
            list_buffer += 'm'
        elif word == 'for increment':
            list_buffer += '0'
        elif word == 'print':
            list_buffer += 'p'
        elif word == 'file print':
            list_buffer += 'fp'
        return list_buffer

    # <idiom_type> 'idiom'
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\i'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_idiom_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 271, '<idiom_type> \'idiom\'', e)
            self.firstWord = -1

    # 'start' ('brace' | 'comment') ('block')
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{i}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'brace':
                top_buffer += '{{enter}'
            elif word == 'comment':
                top_buffer += '/*'
            word = fullResults[2 + self.firstWord][0]
            if word == 'block':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_118(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 273, '\'start\' (\'brace\' | \'comment\') (\'block\')', e)
            self.firstWord = -1

    # 'start' ('brace' | 'comment')
    def gotResults_219(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{i}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'brace':
                top_buffer += '{{enter}'
            elif word == 'comment':
                top_buffer += '/*'
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_219(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 273, '\'start\' (\'brace\' | \'comment\')', e)
            self.firstWord = -1

    def get_preprocessor_type(self, list_buffer, functional, word):
        if word == 'include header':
            list_buffer += 'ih'
        elif word == 'include global':
            list_buffer += '<'
        elif word == 'include local':
            list_buffer += '"'
        elif word == 'define':
            list_buffer += 'd'
        return list_buffer

    # <preprocessor_type> 'preprocessor'
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '\\p'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_preprocessor_type(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 278, '<preprocessor_type> \'preprocessor\'', e)
            self.firstWord = -1

    # 'Bundle command' ('Install' | 'Clean' | 'List')
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':NeoBundle'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_120(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 281, '\'Bundle command\' (\'Install\' | \'Clean\' | \'List\')', e)
            self.firstWord = -1

    # 'Nowrap'
    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set nowrap{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_121(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 283, '\'Nowrap\'', e)
            self.firstWord = -1

    # 'setting based'
    def gotResults_122(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set paste{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_122(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 284, '\'setting based\'', e)
            self.firstWord = -1

    # 'Edit vim RC'
    def gotResults_123(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e ~\\.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_123(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 285, '\'Edit vim RC\'', e)
            self.firstWord = -1

    # 'Reload'
    def gotResults_124(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':source $MYVIMRC'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_124(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 286, '\'Reload\'', e)
            self.firstWord = -1

    # 'command history'
    def gotResults_125(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q:'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_125(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 289, '\'command history\'', e)
            self.firstWord = -1

    # 'pattern match history'
    def gotResults_126(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_126(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 290, '\'pattern match history\'', e)
            self.firstWord = -1

    # 'histogram debug'
    def gotResults_127(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'i#ifdef DEBUG{enter}fsp_log_debug(shared_data_p->config_p->prog_name_p, {enter}"%s: \\n", __FUNCTION__);{enter}#endif'
            top_buffer += '{Up}{End}'
            limit = ''
            limit += '19'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_127(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 298, '\'histogram debug\'', e)
            self.firstWord = -1

    # 'ifdef' ('debug' | 'trace')
    def gotResults_128(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'ddi#ifdef '
            word = fullResults[1 + self.firstWord][0]
            if word == 'debug':
                top_buffer += 'DEBUG'
            elif word == 'trace':
                top_buffer += 'TRACE'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_128(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 299, '\'ifdef\' (\'debug\' | \'trace\')', e)
            self.firstWord = -1

    # 'ifdef end'
    def gotResults_129(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'o#endif'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_129(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 300, '\'ifdef end\'', e)
            self.firstWord = -1

    # 'screen new'
    def gotResults_130(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_130(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 4, '\'screen new\'', e)
            self.firstWord = -1

    # 'screen remove'
    def gotResults_131(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'X'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_131(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 5, '\'screen remove\'', e)
            self.firstWord = -1

    # 'screen crop'
    def gotResults_132(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'Q'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_132(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 6, '\'screen crop\'', e)
            self.firstWord = -1

    # 'screen scroll back'
    def gotResults_133(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '['
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_133(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 7, '\'screen scroll back\'', e)
            self.firstWord = -1

    # 'screen paste'
    def gotResults_134(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += ']'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_134(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 8, '\'screen paste\'', e)
            self.firstWord = -1

    # 'screen mark'
    def gotResults_135(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_135(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 9, '\'screen mark\'', e)
            self.firstWord = -1

    # 'screen kill'
    def gotResults_136(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_136(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 10, '\'screen kill\'', e)
            self.firstWord = -1

    # 'screen help'
    def gotResults_137(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '?'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_137(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 11, '\'screen help\'', e)
            self.firstWord = -1

    # 'screen split'
    def gotResults_138(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'S'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_138(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 12, '\'screen split\'', e)
            self.firstWord = -1

    # 'screen title'
    def gotResults_139(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_139(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 13, '\'screen title\'', e)
            self.firstWord = -1

    # 'screen list'
    def gotResults_140(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_140(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 14, '\'screen list\'', e)
            self.firstWord = -1

    # 'screen switch'
    def gotResults_141(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_141(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 15, '\'screen switch\'', e)
            self.firstWord = -1

    # 'screen detach'
    def gotResults_142(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_142(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 16, '\'screen detach\'', e)
            self.firstWord = -1

    # 'screen next'
    def gotResults_143(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_143(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 17, '\'screen next\'', e)
            self.firstWord = -1

    # 'screen previous'
    def gotResults_144(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_144(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 18, '\'screen previous\'', e)
            self.firstWord = -1

    # 'screen' 0..9
    def gotResults_145(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_145(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 19, '\'screen\' 0..9', e)
            self.firstWord = -1

    # 'screen attach'
    def gotResults_146(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'screen  {Enter}  {enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_146(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 21, '\'screen attach\'', e)
            self.firstWord = -1

    # 'screen join'
    def gotResults_147(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'screen -x {enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_147(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 22, '\'screen join\'', e)
            self.firstWord = -1

    # 'screen search' ('backward' | 'forward')
    def gotResults_148(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+a}'
            top_buffer += '['
            word = fullResults[1 + self.firstWord][0]
            if word == 'backward':
                top_buffer += '?'
            elif word == 'forward':
                top_buffer += '/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_148(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 23, '\'screen search\' (\'backward\' | \'forward\')', e)
            self.firstWord = -1

    # 'screen search next' ('backward' | 'forward')
    def gotResults_149(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'backward':
                top_buffer += '?'
            elif word == 'forward':
                top_buffer += '/'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_149(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 24, '\'screen search next\' (\'backward\' | \'forward\')', e)
            self.firstWord = -1

    def get_machine(self, list_buffer, functional, word):
        if word == 'release five':
            list_buffer += 'mdl@...'
        elif word == 'release six':
            list_buffer += 'mdl@...'
        elif word == 'P.O. Box':
            list_buffer += 'mdl@...'
        elif word == 'PA install':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian one':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian two':
            list_buffer += 'lillibridgem@...'
        elif word == 'build cent toss':
            list_buffer += 'lillibridgem@...'
        elif word == 'build wheezy':
            list_buffer += 'lillibridgem@...'
        elif word == 'metabox one':
            list_buffer += 'lillibridgem@...'
        elif word == 'lark':
            list_buffer += 'mdl@...'
        elif word == 'Embarcadero':
            list_buffer += 'mdl@...'
        elif word == 'remote foil':
            list_buffer += 'mdl@<censored>'
        elif word == 'local foil':
            list_buffer += 'mdl@...'
        return list_buffer

    def get_common_actions(self, list_buffer, functional, word):
        if word == 'edit':
            list_buffer += 'vim'
        elif word == 'source':
            list_buffer += 'source'
        return list_buffer

    # 'vim config'
    def gotResults_150(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.vimrc'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_150(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 14, '\'vim config\'', e)
            self.firstWord = -1

    # 'edit vim config'
    def gotResults_151(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'ivim ~/.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_151(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 15, '\'edit vim config\'', e)
            self.firstWord = -1

    # <common_actions> 'bash config'
    def gotResults_152(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_common_actions(top_buffer, False, word)
            top_buffer += ' ~/.bashrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 16, '<common_actions> \'bash config\'', e)
            self.firstWord = -1

    # 'bash history'
    def gotResults_153(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_153(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 17, '\'bash history\'', e)
            self.firstWord = -1

    # 'break'
    def gotResults_154(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_154(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 18, '\'break\'', e)
            self.firstWord = -1

    # 'escape process'
    def gotResults_155(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_155(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 19, '\'escape process\'', e)
            self.firstWord = -1

    # ('foreground' | 'background') 'process'
    def gotResults_156(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'foreground':
                top_buffer += 'fg'
            elif word == 'background':
                top_buffer += 'bg'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_156(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 21, '(\'foreground\' | \'background\') \'process\'', e)
            self.firstWord = -1

    # 'double dash'
    def gotResults_157(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_157(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 22, '\'double dash\'', e)
            self.firstWord = -1

    # 'Bash Tag File Update'
    def gotResults_158(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_158(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 24, '\'Bash Tag File Update\'', e)
            self.firstWord = -1

    # 'make tar'
    def gotResults_159(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -cf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_159(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 25, '\'make tar\'', e)
            self.firstWord = -1

    # 'extract tar'
    def gotResults_160(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -xf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_160(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 26, '\'extract tar\'', e)
            self.firstWord = -1

    # 'confirm force remove file'
    def gotResults_161(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rm -r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_161(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 27, '\'confirm force remove file\'', e)
            self.firstWord = -1

    # 'back directory' 1..9
    def gotResults_162(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '../'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_162(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 28, '\'back directory\' 1..9', e)
            self.firstWord = -1

    # 'change ownership'
    def gotResults_163(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chown -R tan:tan '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_163(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 29, '\'change ownership\'', e)
            self.firstWord = -1

    # 'change' ('permissions' | 'mode')
    def gotResults_164(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chmod -R 755 '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_164(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 30, '\'change\' (\'permissions\' | \'mode\')', e)
            self.firstWord = -1

    # 'home root'
    def gotResults_165(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '~/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_165(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 31, '\'home root\'', e)
            self.firstWord = -1

    # 'enter list'
    def gotResults_166(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}ls{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_166(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 32, '\'enter list\'', e)
            self.firstWord = -1

    # 'change absolute directory'
    def gotResults_167(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd -P .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_167(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 33, '\'change absolute directory\'', e)
            self.firstWord = -1

    # 'present working directory'
    def gotResults_168(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pwd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_168(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 34, '\'present working directory\'', e)
            self.firstWord = -1

    # 'vim diff'
    def gotResults_169(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'vimdiff'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_169(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 35, '\'vim diff\'', e)
            self.firstWord = -1

    # 'cygwin password'
    def gotResults_170(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '^2A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_170(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 36, '\'cygwin password\'', e)
            self.firstWord = -1

    def get_show(self, list_buffer, functional, word):
        if word == 'show':
            list_buffer += ''
        elif word == 'show some of':
            list_buffer += ' | head'
        elif word == 'show a lot of':
            list_buffer += ' | head -n 50'
        elif word == 'local show':
            list_buffer += '{ctrl+a}l{ctrl+e}'
        return list_buffer

    def get_desc(self, list_buffer, functional, word):
        if word == 'long':
            list_buffer += '-l'
        elif word == 'full':
            list_buffer += '-A'
        elif word == 'recent':
            list_buffer += '-t'
        elif word == 'recursive':
            list_buffer += '-R'
        elif word == 'human':
            list_buffer += '-h'
        return list_buffer

    # <show> <desc> <desc> <desc> 'directory'
    def gotResults_171(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            word = fullResults[3 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[3 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('UNIX_shell.vch', 51, '<show> <desc> <desc> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> <desc> <desc> 'directory'
    def gotResults_222(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('UNIX_shell.vch', 51, '<show> <desc> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> <desc> 'directory'
    def gotResults_221(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 51, '<show> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> 'directory'
    def gotResults_220(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 51, '<show> \'directory\'', e)
            self.firstWord = -1

    # <show> <desc> 'directory'
    def gotResults_172(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_desc(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 52, '<show> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> 'directory'
    def gotResults_173(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 53, '<show> \'directory\'', e)
            self.firstWord = -1

    # 'show disk space'
    def gotResults_174(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'df -h .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_174(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 56, '\'show disk space\'', e)
            self.firstWord = -1

    def get_usage(self, list_buffer, functional, word):
        if word == 'usage':
            list_buffer += '-h'
        elif word == 'usage kilobytes':
            list_buffer += ''
        elif word == 'usage megabytes':
            list_buffer += '-m'
        return list_buffer

    # 'show disk' <usage>
    def gotResults_175(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'du '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_usage(top_buffer, False, word)
            top_buffer += ' -s -- "`ls --color=none -A`" .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 60, '\'show disk\' <usage>', e)
            self.firstWord = -1

    # 'secure login to' <machine>
    def gotResults_176(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 68, '\'secure login to\' <machine>', e)
            self.firstWord = -1

    # 'secure login' <machine>
    def gotResults_223(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 68, '\'secure login\' <machine>', e)
            self.firstWord = -1

    # 'S F T P' <machine>
    def gotResults_177(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sftp '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 71, '\'S F T P\' <machine>', e)
            self.firstWord = -1

    # 'multiple get'
    def gotResults_178(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mget '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_178(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 75, '\'multiple get\'', e)
            self.firstWord = -1

    # 'local change directory'
    def gotResults_179(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lcd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_179(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 76, '\'local change directory\'', e)
            self.firstWord = -1

    # 'local working directory'
    def gotResults_180(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lpwd{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_180(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 78, '\'local working directory\'', e)
            self.firstWord = -1

    def get_scp(self, list_buffer, functional, word):
        if word == 'secure copy':
            list_buffer += 'scp'
        elif word == 'secure recursive copy':
            list_buffer += 'scp -r'
        elif word == 'recursive secure copy':
            list_buffer += 'scp -r'
        elif word == 'secure clone':
            list_buffer += 'scp -p -r'
        return list_buffer

    # 'package install'
    def gotResults_181(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo apt-get install '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_181(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 8, '\'package install\'', e)
            self.firstWord = -1

    # 'package remove'
    def gotResults_182(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sudo apt-get remove '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_182(words[1:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 9, '\'package remove\'', e)
            self.firstWord = -1

    # 'Add' ('link' | 'torrent' | 'magnet')
    def gotResults_183(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'deluge-console'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'add '
            top_buffer += '"'
            top_buffer += '{Shift+Ins}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_183(words[2:], fullResults)
        except Exception, e:
            handle_error('putty.vcl', 14, '\'Add\' (\'link\' | \'torrent\' | \'magnet\')', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
