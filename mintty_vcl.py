# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.1, Mon Jan 27 23:26:25 2014

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <0to9> = ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <2to9> = ('two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <1to20> = ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <1to30> = ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = ('Left' | 'Right' ) ;
        <start_end> = ('Start' | 'End' ) ;
        <compass> = ('North' | 'South' | 'East' | 'West' ) ;
        <edit_mode> = ('Change' | 'Kill' | 'Copy' ) ;
        <location> = ('Here' | 'Next' | 'Back' | 'Copy' ) ;
        <1> = (('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ) <direction> ;
        <2> = ('Change' | 'Copy' ) ('Char' | '1' | 'One' ) ;
        <3> = ('Change' | 'Copy' ) 'Back 1' ;
        <226> = ('Change' | 'Copy' ) 'Back' ;
        <4> = ('Change' | 'Copy' ) <4b> ;
        <4b> = <1to30> 'Chars' ;
        <5> = ('Change' | 'Copy' ) 'Back' <1to30> ;
        <6> = 'Kill' ('Char' | '1' | 'One' ) ;
        <7> = 'Kill Back 1' ;
        <227> = 'Kill Back' ;
        <8> = 'Kill' <8b> ;
        <8b> = <1to30> 'Chars' ;
        <9> = 'Kill Back' <1to30> ;
        <10> = 'One Word' ;
        <228> = 'Word' ;
        <11> = 'Back One Word' ;
        <229> = 'Back Word' ;
        <12> = <1to30> 'Words' ;
        <13> = 'Back' <13b> ;
        <13b> = <1to30> 'Words' ;
        <14> = <edit_mode> 'Word' ;
        <15> = <edit_mode> <1to30> 'Words' ;
        <16> = <edit_mode> 'Back Word' ;
        <17> = <edit_mode> 'Back' <17b> ;
        <17b> = <1to30> 'Words' ;
        <18> = <edit_mode> 'Next Word' ;
        <19> = 'Line' <start_end> ;
        <20> = 'Insert empty line' <location> ;
        <230> = 'Insert line' <location> ;
        <21> = 'Duplicate Line' ;
        <22> = 'Swap Line' ;
        <23> = <edit_mode> 'Here' ;
        <24> = <edit_mode> 'Back Here' ;
        <25> = <edit_mode> 'Line' ;
        <26> = <edit_mode> <1to30> 'Lines' ;
        <27> = <edit_mode> 'Back Line' ;
        <28> = <edit_mode> 'Back' <28b> ;
        <28b> = <1to30> 'Lines' ;
        <29> = <edit_mode> 'Next Line' ;
        <30> = 'Kill Back Line' ;
        <31> = 'Trunc Line' ;
        <32> = 'Copy Line To' ;
        <33> = 'Move Line To' ;
        <insert> = ('insert' | 'append' ) ;
        <34> = 'Flow' ('Start' | 'End' ) <insert> ;
        <35> = <edit_mode> 'Flow Here' ;
        <36> = <edit_mode> 'Flow All' ;
        <37> = <edit_mode> 'Back Flow Here' ;
        <38> = 'Copy Range To' ;
        <39> = 'Move Range' ;
        <40> = 'Indent Range' ;
        <41> = 'Un Indent Range' ;
        <42> = <edit_mode> 'Range' ;
        <43> = ('sub' | 'substitute' ) 'range' ;
        <44> = 'comment' ('in' | 'out' ) 'python range' ;
        <45> = 'comment' ('in' | 'out' ) ('range' | 'line' ) ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <46> = 'Press' <key> ;
        <47> = <key> 'Here' ;
        <48> = 'Space Bar' ;
        <49> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = ('one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine' | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <50> = 'Press' <special> <nn> ;
        <231> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <51> = 'Press' <mod> <key> <nn> ;
        <232> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <52> = 'Press' <mod> <mod> <key> <nn> ;
        <233> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <53> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <234> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <54> = (('North' | 'South' | 'East' | 'West' ) ) ;
        <55> = 'Blank line previous' ;
        <56> = 'Blank line next' ;
        <57> = 'Change case' ;
        <58> = 'Change case' <1to30> ;
        <59> = ('sub' | 'substitute' ) 'line' ;
        <60> = ('sub' | 'substitute' ) 'all' ;
        <61> = ('sub' | 'substitute' ) 'here' ;
        <62> = ('sub' | 'substitute' ) 'back here' ;
        <63> = 'Paste' ;
        <64> = 'Paste Back' ;
        <65> = 'Insert' ;
        <66> = 'Insert start' ;
        <67> = 'Append' ;
        <68> = 'Append end' ;
        <69> = 'Substitute' ;
        <70> = 'Replace' ;
        <71> = 'Join Line' ;
        <72> = 'Start macro' ;
        <73> = 'Repeat macro' ;
        <74> = 'Format' ;
        <75> = 'Normal mode' ;
        <76> = 'edit undo' ;
        <77> = 'edit undo' <2to9> ;
        <78> = 'edit redo' ;
        <79> = 'edit redo' <2to9> ;
        <80> = 'List changes' ;
        <81> = 'Previous change' ;
        <82> = 'Undo jump' ;
        <83> = 'Return from' ;
        <84> = 'Set mark' ;
        <85> = 'Goto mark' ;
        <86> = 'Beginning previous' ;
        <87> = 'Beginning next' ;
        <88> = 'Match bracket' ;
        <89> = 'Scroll to bottom' ;
        <235> = 'Scroll bottom' ;
        <90> = 'Scroll to top' ;
        <236> = 'Scroll top' ;
        <91> = 'Scroll to middle' ;
        <237> = 'Scroll middle' ;
        <92> = 'go number' <0to9> ;
        <93> = 'go number' <0to9> <0to9> ;
        <94> = 'go number' <0to9> <0to9> <0to9> ;
        <95> = 'go number' <0to9> <0to9> <0to9> <0to9> ;
        <96> = 'go number one' ;
        <97> = 'go number' <97b> ;
        <97b> = <0to9> 'one' ;
        <98> = 'go number one' <0to9> ;
        <99> = 'go number one one' ;
        <100> = 'go number' <100b> ;
        <100b> = <0to9> <0to9> 'one' ;
        <101> = 'go number' <101b> ;
        <101b> = <0to9> 'one' <0to9> ;
        <102> = 'go number' <102b> ;
        <102b> = <0to9> 'one one' ;
        <103> = 'go number one' <0to9> <0to9> ;
        <104> = 'go number one' <104b> ;
        <104b> = <0to9> 'one' ;
        <105> = 'go number one one' <0to9> ;
        <106> = 'go number one one one' ;
        <107> = 'go number one' <0to9> <0to9> <0to9> ;
        <108> = 'Back till' <key> ;
        <109> = 'Till' <key> ;
        <110> = 'Till repeat' ;
        <111> = 'Search' <dgndictation> ;
        <112> = 'Search go' <dgndictation> ;
        <113> = 'clear Search' ;
        <114> = 'Make' ;
        <115> = 'Vim Update Tag File' ;
        <116> = 'List errors' ;
        <117> = 'Next error' ;
        <118> = 'Previous error' ;
        <119> = 'Save file' ;
        <120> = 'Close file' ;
        <121> = 'Save and close file' ;
        <122> = 'Previous command' ;
        <123> = 'Edit another' ;
        <124> = 'File browser' ;
        <125> = 'Bundle command' ;
        <126> = 'Def include' ;
        <127> = 'Def Define' ;
        <128> = 'Insert space' ;
        <129> = 'Insert space after' ;
        <130> = 'Begin comment' ;
        <131> = 'End comment' ;
        <132> = 'Begin long comment' ;
        <133> = 'End long comment' ;
        <134> = 'Insert line break' ;
        <135> = 'Line comment' ;
        <136> = 'Double slash backslash' ;
        <137> = 'reference' ;
        <138> = 'Function definition' ;
        <139> = 'Function definition' <dgndictation> ;
        <140> = 'Show Help' ;
        <141> = 'Set setting' ;
        <142> = 'Split vertical' ;
        <143> = 'Vim Window left' ;
        <144> = 'Vim Window right' ;
        <145> = 'Vim Window up' ;
        <146> = 'Vim Window down' ;
        <147> = 'Vim Window next' ;
        <148> = 'Vim Window close' ;
        <149> = 'Vim Window crop' ;
        <150> = 'Previous buffer' ;
        <151> = 'Close buffer' ;
        <152> = 'Next buffer' ;
        <153> = 'Switch buffer' ;
        <154> = 'Show buffers' ;
        <155> = 'numbered buffer' <1to30> ;
        <tab_actions> = ('Previous' | 'Close' | 'Next' | 'List' | 'Last' | 'First' ) ;
        <156> = <tab_actions> 'tab' ;
        <157> = 'switch tab' <1to30> ;
        <158> = 'vim Tag Previous' ;
        <159> = 'vim Tag Jump' ;
        <160> = 'vim Tag Next' ;
        <161> = 'Vim Tag Match' ;
        <162> = 'Vim Tag Return' ;
        <163> = 'Vim Tag Stack' ;
        <164> = 'Vim Folds' ;
        <165> = 'Vim show Taglist' ;
        <166> = 'Vim Align' ;
        <167> = 'Vim Align' <key> ;
        <168> = 'complete' ;
        <169> = 'local complete' ;
        <170> = 'Unite files' ;
        <171> = 'Unite files recursive' ;
        <172> = 'Unite recent' ;
        <173> = 'Unite history' ;
        <174> = 'Unite buffer' ;
        <175> = 'Nowrap' ;
        <176> = 'setting based' ;
        <177> = 'Edit vim RC' ;
        <178> = 'Reload' ;
        <179> = 'command history' ;
        <180> = 'pattern match history' ;
        <181> = 'screen new' ;
        <182> = 'screen remove' ;
        <183> = 'screen crop' ;
        <184> = 'screen scroll back' ;
        <185> = 'screen paste' ;
        <186> = 'screen mark' ;
        <187> = 'screen kill' ;
        <188> = 'screen help' ;
        <189> = 'screen split' ;
        <190> = 'screen title' ;
        <191> = 'screen list' ;
        <192> = 'screen switch' ;
        <193> = 'screen detach' ;
        <194> = 'screen next' ;
        <195> = 'screen previous' ;
        <196> = 'screen' ('zero' | 'one' | 'two' | 'three' | 'four' | 'five' | 'six' | 'seven' | 'eight' | 'nine') ;
        <197> = 'screen attach' ;
        <198> = 'screen join' ;
        <machine> = ('release five' | 'release six' | 'P.O. Box' | 'PA install' | 'build Debian' | 'build Debian one' | 'build Debian two' | 'build cent toss' | 'build wheezy' | 'metabox one' | 'lark' | 'Embarcadero' | 'remote foil' | 'local foil' ) ;
        <common_actions> = ('edit' | 'source' ) ;
        <199> = 'vim config' ;
        <200> = 'edit vim config' ;
        <201> = <common_actions> 'bash config' ;
        <202> = 'bash history' ;
        <203> = 'break' ;
        <204> = 'double dash' ;
        <205> = 'Bash Tag File Update' ;
        <206> = 'make tar' ;
        <207> = 'extract tar' ;
        <208> = 'confirm force remove file' ;
        <209> = 'Double point slash' ;
        <210> = 'change ownership' ;
        <211> = 'change mode' ;
        <212> = 'home root' ;
        <213> = 'enter list' ;
        <214> = 'change absolute directory' ;
        <show> = ('show' | 'show some of' | 'show a lot of' | 'local show' ) ;
        <desc> = ('long' | 'full' | 'recent' | 'recursive' | 'human' ) ;
        <215> = <show> <desc> 'directory' ;
        <216> = <show> 'directory' ;
        <217> = 'show disk space' ;
        <usage> = ('usage' | 'usage kilobytes' | 'usage megabytes' ) ;
        <218> = 'show disk' <usage> ;
        <219> = 'secure login to' <machine> ;
        <238> = 'secure login' <machine> ;
        <220> = 'S F T P' <machine> ;
        <221> = 'multiple get' ;
        <222> = 'local change directory' ;
        <223> = 'local working directory' ;
        <scp> = ('secure copy' | 'secure recursive copy' | 'recursive secure copy' | 'secure clone' ) ;
        <224> = 'package install' ;
        <225> = 'package remove' ;
        <any> = <1>|<2>|<3>|<226>|<4>|<5>|<6>|<7>|<227>|<8>|<9>|<10>|<228>|<11>|<229>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<230>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<32>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<231>|<51>|<232>|<52>|<233>|<53>|<234>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<73>|<74>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<235>|<90>|<236>|<91>|<237>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<99>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<117>|<118>|<119>|<120>|<121>|<122>|<123>|<124>|<125>|<126>|<127>|<128>|<129>|<130>|<131>|<132>|<133>|<134>|<135>|<136>|<137>|<138>|<139>|<140>|<141>|<142>|<143>|<144>|<145>|<146>|<147>|<148>|<149>|<150>|<151>|<152>|<153>|<154>|<155>|<156>|<157>|<158>|<159>|<160>|<161>|<162>|<163>|<164>|<165>|<166>|<167>|<168>|<169>|<170>|<171>|<172>|<173>|<174>|<175>|<176>|<177>|<178>|<179>|<180>|<181>|<182>|<183>|<184>|<185>|<186>|<187>|<188>|<189>|<190>|<191>|<192>|<193>|<194>|<195>|<196>|<197>|<198>|<199>|<200>|<201>|<202>|<203>|<204>|<205>|<206>|<207>|<208>|<209>|<210>|<211>|<212>|<213>|<214>|<215>|<216>|<217>|<218>|<219>|<238>|<220>|<221>|<222>|<223>|<224>|<225>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'mintty','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == 'zero':
            return '0'
        elif word == 'one':
            return '1'
        elif word == 'two':
            return '2'
        elif word == 'three':
            return '3'
        elif word == 'four':
            return '4'
        elif word == 'five':
            return '5'
        elif word == 'six':
            return '6'
        elif word == 'seven':
            return '7'
        elif word == 'eight':
            return '8'
        elif word == 'nine':
            return '9'
        else:
            return word

    def get_0to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_2to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_1to20(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_1to30(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '{b}'
        elif word == 'Right':
            list_buffer += '{w}'
        return list_buffer

    def get_start_end(self, list_buffer, functional, word):
        if word == 'Start':
            list_buffer += '{Home}'
        elif word == 'End':
            list_buffer += '{End}'
        return list_buffer

    def get_compass(self, list_buffer, functional, word):
        if word == 'North':
            list_buffer += '{Shift+h}'
        elif word == 'South':
            list_buffer += '{Shift+l}'
        elif word == 'East':
            list_buffer += '{'
            list_buffer += '$'
            list_buffer += '}'
        elif word == 'West':
            list_buffer += '{0}'
        return list_buffer

    def get_edit_mode(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += '{c}'
        elif word == 'Kill':
            list_buffer += '{d}'
        elif word == 'Copy':
            list_buffer += '{y}'
        return list_buffer

    def get_location(self, list_buffer, functional, word):
        if word == 'Here':
            list_buffer += 'i{enter}'
        elif word == 'Next':
            list_buffer += 'o'
        elif word == 'Back':
            list_buffer += 'O'
        elif word == 'Copy':
            list_buffer += 'yyp'
        return list_buffer

    # (1..30) <direction>
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 41, '(1..30) <direction>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') ('Char' | '1' | 'One')
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_2(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 46, '(\'Change\' | \'Copy\') (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back 1'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_3(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 47, '(\'Change\' | \'Copy\') \'Back 1\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back'
    def gotResults_226(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_226(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 47, '(\'Change\' | \'Copy\') \'Back\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30> 'Chars'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 48, '(\'Change\' | \'Copy\') <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 49, '(\'Change\' | \'Copy\') \'Back\' <1to30>', e)
            self.firstWord = -1

    # 'Kill' ('Char' | '1' | 'One')
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_6(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 50, '\'Kill\' (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # 'Kill Back 1'
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_7(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 51, '\'Kill Back 1\'', e)
            self.firstWord = -1

    # 'Kill Back'
    def gotResults_227(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_227(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 51, '\'Kill Back\'', e)
            self.firstWord = -1

    # 'Kill' <1to30> 'Chars'
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 52, '\'Kill\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill Back' <1to30>
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 53, '\'Kill Back\' <1to30>', e)
            self.firstWord = -1

    # 'One Word'
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_10(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 56, '\'One Word\'', e)
            self.firstWord = -1

    # 'Word'
    def gotResults_228(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_228(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 56, '\'Word\'', e)
            self.firstWord = -1

    # 'Back One Word'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 57, '\'Back One Word\'', e)
            self.firstWord = -1

    # 'Back Word'
    def gotResults_229(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_229(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 57, '\'Back Word\'', e)
            self.firstWord = -1

    # <1to30> 'Words'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 58, '<1to30> \'Words\'', e)
            self.firstWord = -1

    # 'Back' <1to30> 'Words'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 59, '\'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Word'
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 60, '<edit_mode> \'Word\'', e)
            self.firstWord = -1

    # <edit_mode> <1to30> 'Words'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 61, '<edit_mode> <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Word'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 62, '<edit_mode> \'Back Word\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back' <1to30> 'Words'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 63, '<edit_mode> \'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Next Word'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 64, '<edit_mode> \'Next Word\'', e)
            self.firstWord = -1

    # 'Line' <start_end>
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_start_end(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 67, '\'Line\' <start_end>', e)
            self.firstWord = -1

    # 'Insert empty line' <location>
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_location(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 68, '\'Insert empty line\' <location>', e)
            self.firstWord = -1

    # 'Insert line' <location>
    def gotResults_230(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_location(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 68, '\'Insert line\' <location>', e)
            self.firstWord = -1

    # 'Duplicate Line'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'yyp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 69, '\'Duplicate Line\'', e)
            self.firstWord = -1

    # 'Swap Line'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 70, '\'Swap Line\'', e)
            self.firstWord = -1

    # <edit_mode> 'Here'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 71, '<edit_mode> \'Here\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Here'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '0'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 72, '<edit_mode> \'Back Here\'', e)
            self.firstWord = -1

    # <edit_mode> 'Line'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 73, '<edit_mode> \'Line\'', e)
            self.firstWord = -1

    # <edit_mode> <1to30> 'Lines'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_1to30(eval_template_arg2, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'j'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 74, '<edit_mode> <1to30> \'Lines\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Line'
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 75, '<edit_mode> \'Back Line\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back' <1to30> 'Lines'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '{Up}'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg2 = self.get_1to30(eval_template_arg2, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 76, '<edit_mode> \'Back\' <1to30> \'Lines\'', e)
            self.firstWord = -1

    # <edit_mode> 'Next Line'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':+1'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 77, '<edit_mode> \'Next Line\'', e)
            self.firstWord = -1

    # 'Kill Back Line'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':-1d'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 78, '\'Kill Back Line\'', e)
            self.firstWord = -1

    # 'Trunc Line'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'D'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 79, '\'Trunc Line\'', e)
            self.firstWord = -1

    # 'Copy Line To'
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':.co'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_32(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 80, '\'Copy Line To\'', e)
            self.firstWord = -1

    # 'Move Line To'
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':.m'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_33(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 81, '\'Move Line To\'', e)
            self.firstWord = -1

    def get_insert(self, list_buffer, functional, word):
        if word == 'insert':
            list_buffer += 'I'
        elif word == 'append':
            list_buffer += 'A'
        return list_buffer

    # 'Flow' ('Start' | 'End') <insert>
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'End':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_insert(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 85, '\'Flow\' (\'Start\' | \'End\') <insert>', e)
            self.firstWord = -1

    # <edit_mode> 'Flow Here'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':.,$'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 86, '<edit_mode> \'Flow Here\'', e)
            self.firstWord = -1

    # <edit_mode> 'Flow All'
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':0,$'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 87, '<edit_mode> \'Flow All\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Flow Here'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':.,0'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 88, '<edit_mode> \'Back Flow Here\'', e)
            self.firstWord = -1

    # 'Copy Range To'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':co'
            top_buffer += '{Left_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 91, '\'Copy Range To\'', e)
            self.firstWord = -1

    # 'Move Range'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':m'
            top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_39(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 92, '\'Move Range\'', e)
            self.firstWord = -1

    # 'Indent Range'
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':>'
            top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_40(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 93, '\'Indent Range\'', e)
            self.firstWord = -1

    # 'Un Indent Range'
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':<'
            top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 94, '\'Un Indent Range\'', e)
            self.firstWord = -1

    # <edit_mode> 'Range'
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 95, '<edit_mode> \'Range\'', e)
            self.firstWord = -1

    # ('sub' | 'substitute') 'range'
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':s///gc'
            limit = ''
            limit += '6'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_43(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 96, '(\'sub\' | \'substitute\') \'range\'', e)
            self.firstWord = -1

    # 'comment' ('in' | 'out') 'python range'
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':s/'
            word = fullResults[1 + self.firstWord][0]
            if word == 'in':
                top_buffer += '#/'
            elif word == 'out':
                top_buffer += '^/#'
            top_buffer += '/'
            limit = ''
            limit += '9'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_44(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 97, '\'comment\' (\'in\' | \'out\') \'python range\'', e)
            self.firstWord = -1

    # 'comment' ('in' | 'out') ('range' | 'line')
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':s/'
            word = fullResults[1 + self.firstWord][0]
            if word == 'in':
                top_buffer += '\\/\\/ /'
            elif word == 'out':
                top_buffer += '^/\\/\\/'
            top_buffer += '/'
            word = fullResults[2 + self.firstWord][0]
            if word == 'range':
                limit = ''
                limit += '9'
                for i in range(to_long(limit)):
                    top_buffer += '{Left}'
            elif word == 'line':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_45(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 99, '\'comment\' (\'in\' | \'out\') (\'range\' | \'line\')', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # <key> 'Here'
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 21, '<key> \'Here\'', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 23, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_49(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 36, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_231(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 36, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_232(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_233(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_234(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # (('North' | 'South' | 'East' | 'West'))
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'North':
                top_buffer += '{Shift+h}'
            elif word == 'South':
                top_buffer += '{Shift+l}'
            elif word == 'East':
                top_buffer += '{'
                top_buffer += '$'
                top_buffer += '}'
            elif word == 'West':
                top_buffer += '{0}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_54(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 106, '((\'North\' | \'South\' | \'East\' | \'West\'))', e)
            self.firstWord = -1

    # 'Blank line previous'
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'O'
            top_buffer += '{down}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_55(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 107, '\'Blank line previous\'', e)
            self.firstWord = -1

    # 'Blank line next'
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'o'
            top_buffer += '{up}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 108, '\'Blank line next\'', e)
            self.firstWord = -1

    # 'Change case'
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 109, '\'Change case\'', e)
            self.firstWord = -1

    # 'Change case' <1to30>
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit = self.get_1to30(limit, True, word)
            for i in range(to_long(limit)):
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 110, '\'Change case\' <1to30>', e)
            self.firstWord = -1

    # ('sub' | 'substitute') 'line'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':s///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_59(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 112, '(\'sub\' | \'substitute\') \'line\'', e)
            self.firstWord = -1

    # ('sub' | 'substitute') 'all'
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':%s///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_60(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 113, '(\'sub\' | \'substitute\') \'all\'', e)
            self.firstWord = -1

    # ('sub' | 'substitute') 'here'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':.,$s///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_61(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 114, '(\'sub\' | \'substitute\') \'here\'', e)
            self.firstWord = -1

    # ('sub' | 'substitute') 'back here'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':0,.s///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_62(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 115, '(\'sub\' | \'substitute\') \'back here\'', e)
            self.firstWord = -1

    # 'Paste'
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}p'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 116, '\'Paste\'', e)
            self.firstWord = -1

    # 'Paste Back'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}P'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 117, '\'Paste Back\'', e)
            self.firstWord = -1

    # 'Insert'
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ESC}'
            top_buffer += 'i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_65(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 118, '\'Insert\'', e)
            self.firstWord = -1

    # 'Insert start'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'I'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 119, '\'Insert start\'', e)
            self.firstWord = -1

    # 'Append'
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'a'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 120, '\'Append\'', e)
            self.firstWord = -1

    # 'Append end'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 121, '\'Append end\'', e)
            self.firstWord = -1

    # 'Substitute'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 's'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 122, '\'Substitute\'', e)
            self.firstWord = -1

    # 'Replace'
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'R'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_70(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 123, '\'Replace\'', e)
            self.firstWord = -1

    # 'Join Line'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 124, '\'Join Line\'', e)
            self.firstWord = -1

    # 'Start macro'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'qz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 127, '\'Start macro\'', e)
            self.firstWord = -1

    # 'Repeat macro'
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\@z'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 128, '\'Repeat macro\'', e)
            self.firstWord = -1

    # 'Format'
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'Q'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 129, '\'Format\'', e)
            self.firstWord = -1

    # 'Normal mode'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ESC}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 130, '\'Normal mode\'', e)
            self.firstWord = -1

    # 'edit undo'
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 131, '\'edit undo\'', e)
            self.firstWord = -1

    # 'edit undo' <2to9>
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_2to9(when_value, True, word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_2to9(top_buffer, False, word)
                top_buffer += 'u'
            else:
                top_buffer += '1'
                top_buffer += 'u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 132, '\'edit undo\' <2to9>', e)
            self.firstWord = -1

    # 'edit redo'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 134, '\'edit redo\'', e)
            self.firstWord = -1

    # 'edit redo' <2to9>
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_2to9(when_value, True, word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_2to9(top_buffer, False, word)
                top_buffer += '{Ctrl+r}'
            else:
                top_buffer += '1{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 135, '\'edit redo\' <2to9>', e)
            self.firstWord = -1

    # 'List changes'
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':changes'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 142, '\'List changes\'', e)
            self.firstWord = -1

    # 'Previous change'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'g;'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 143, '\'Previous change\'', e)
            self.firstWord = -1

    # 'Undo jump'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '``'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 145, '\'Undo jump\'', e)
            self.firstWord = -1

    # 'Return from'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\'\''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 146, '\'Return from\'', e)
            self.firstWord = -1

    # 'Set mark'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 147, '\'Set mark\'', e)
            self.firstWord = -1

    # 'Goto mark'
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\'zi'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 148, '\'Goto mark\'', e)
            self.firstWord = -1

    # 'Beginning previous'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 149, '\'Beginning previous\'', e)
            self.firstWord = -1

    # 'Beginning next'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '+'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 150, '\'Beginning next\'', e)
            self.firstWord = -1

    # 'Match bracket'
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '%'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 151, '\'Match bracket\'', e)
            self.firstWord = -1

    # 'Scroll to bottom'
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zb'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 152, '\'Scroll to bottom\'', e)
            self.firstWord = -1

    # 'Scroll bottom'
    def gotResults_235(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zb'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_235(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 152, '\'Scroll bottom\'', e)
            self.firstWord = -1

    # 'Scroll to top'
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zt'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 153, '\'Scroll to top\'', e)
            self.firstWord = -1

    # 'Scroll top'
    def gotResults_236(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zt'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_236(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 153, '\'Scroll top\'', e)
            self.firstWord = -1

    # 'Scroll to middle'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 154, '\'Scroll to middle\'', e)
            self.firstWord = -1

    # 'Scroll middle'
    def gotResults_237(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_237(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 154, '\'Scroll middle\'', e)
            self.firstWord = -1

    # 'go number' <0to9>
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 180, '\'go number\' <0to9>', e)
            self.firstWord = -1

    # 'go number' <0to9> <0to9>
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 181, '\'go number\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'go number' <0to9> <0to9> <0to9>
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 182, '\'go number\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'go number' <0to9> <0to9> <0to9> <0to9>
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 183, '\'go number\' <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'go number one'
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer += '1'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 184, '\'go number one\'', e)
            self.firstWord = -1

    # 'go number' <0to9> 'one'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            eval_template_arg5 += '1'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 185, '\'go number\' <0to9> \'one\'', e)
            self.firstWord = -1

    # 'go number one' <0to9>
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            eval_template_arg4 += '1'
            eval_template_arg5 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 186, '\'go number one\' <0to9>', e)
            self.firstWord = -1

    # 'go number one one'
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            eval_template_arg4 += '1'
            eval_template_arg5 = ''
            eval_template_arg5 += '1'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_99(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 187, '\'go number one one\'', e)
            self.firstWord = -1

    # 'go number' <0to9> <0to9> 'one'
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '1'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 188, '\'go number\' <0to9> <0to9> \'one\'', e)
            self.firstWord = -1

    # 'go number' <0to9> 'one' <0to9>
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            eval_template_arg4 += '1'
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 189, '\'go number\' <0to9> \'one\' <0to9>', e)
            self.firstWord = -1

    # 'go number' <0to9> 'one one'
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            eval_template_arg4 += '1'
            eval_template_arg5 = ''
            eval_template_arg5 += '1'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 190, '\'go number\' <0to9> \'one one\'', e)
            self.firstWord = -1

    # 'go number one' <0to9> <0to9>
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '1'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 191, '\'go number one\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'go number one' <0to9> 'one'
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '1'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            eval_template_arg5 += '1'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 192, '\'go number one\' <0to9> \'one\'', e)
            self.firstWord = -1

    # 'go number one one' <0to9>
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '1'
            eval_template_arg4 = ''
            eval_template_arg4 += '1'
            eval_template_arg5 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 193, '\'go number one one\' <0to9>', e)
            self.firstWord = -1

    # 'go number one one one'
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '1'
            eval_template_arg4 = ''
            eval_template_arg4 += '1'
            eval_template_arg5 = ''
            eval_template_arg5 += '1'
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_106(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 194, '\'go number one one one\'', e)
            self.firstWord = -1

    # 'go number one' <0to9> <0to9> <0to9>
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '1'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 195, '\'go number one\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'Back till' <key>
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'T'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 208, '\'Back till\' <key>', e)
            self.firstWord = -1

    # 'Till' <key>
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 209, '\'Till\' <key>', e)
            self.firstWord = -1

    # 'Till repeat'
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 210, '\'Till repeat\'', e)
            self.firstWord = -1

    # 'Search' <_anything>
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 211, '\'Search\' <_anything>', e)
            self.firstWord = -1

    # 'Search go' <_anything>
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 212, '\'Search go\' <_anything>', e)
            self.firstWord = -1

    # 'clear Search'
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/zzz'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_113(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 213, '\'clear Search\'', e)
            self.firstWord = -1

    # 'Make'
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':make'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_114(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 216, '\'Make\'', e)
            self.firstWord = -1

    # 'Vim Update Tag File'
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_115(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 217, '\'Vim Update Tag File\'', e)
            self.firstWord = -1

    # 'List errors'
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':clist'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 218, '\'List errors\'', e)
            self.firstWord = -1

    # 'Next error'
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':cn'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_117(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 219, '\'Next error\'', e)
            self.firstWord = -1

    # 'Previous error'
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':cp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 220, '\'Previous error\'', e)
            self.firstWord = -1

    # 'Save file'
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':w'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_119(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 221, '\'Save file\'', e)
            self.firstWord = -1

    # 'Close file'
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':q'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_120(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 222, '\'Close file\'', e)
            self.firstWord = -1

    # 'Save and close file'
    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':x'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_121(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 223, '\'Save and close file\'', e)
            self.firstWord = -1

    # 'Previous command'
    def gotResults_122(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_122(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 225, '\'Previous command\'', e)
            self.firstWord = -1

    # 'Edit another'
    def gotResults_123(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_123(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 226, '\'Edit another\'', e)
            self.firstWord = -1

    # 'File browser'
    def gotResults_124(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e.'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_124(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 227, '\'File browser\'', e)
            self.firstWord = -1

    # 'Bundle command'
    def gotResults_125(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'NeoBundle'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_125(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 228, '\'Bundle command\'', e)
            self.firstWord = -1

    # 'Def include'
    def gotResults_126(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#include '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_126(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 231, '\'Def include\'', e)
            self.firstWord = -1

    # 'Def Define'
    def gotResults_127(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#define '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_127(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 232, '\'Def Define\'', e)
            self.firstWord = -1

    # 'Insert space'
    def gotResults_128(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_128(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 235, '\'Insert space\'', e)
            self.firstWord = -1

    # 'Insert space after'
    def gotResults_129(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{Right}{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_129(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 236, '\'Insert space after\'', e)
            self.firstWord = -1

    # 'Begin comment'
    def gotResults_130(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i/* '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_130(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 237, '\'Begin comment\'', e)
            self.firstWord = -1

    # 'End comment'
    def gotResults_131(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i */'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_131(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 238, '\'End comment\'', e)
            self.firstWord = -1

    # 'Begin long comment'
    def gotResults_132(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'ib'
            top_buffer += '{space}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_132(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 239, '\'Begin long comment\'', e)
            self.firstWord = -1

    # 'End long comment'
    def gotResults_133(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'ie'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_133(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 240, '\'End long comment\'', e)
            self.firstWord = -1

    # 'Insert line break'
    def gotResults_134(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_134(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 241, '\'Insert line break\'', e)
            self.firstWord = -1

    # 'Line comment'
    def gotResults_135(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'il'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_135(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 242, '\'Line comment\'', e)
            self.firstWord = -1

    # 'Double slash backslash'
    def gotResults_136(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\/\\/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_136(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 243, '\'Double slash backslash\'', e)
            self.firstWord = -1

    # 'reference'
    def gotResults_137(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '->'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_137(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 244, '\'reference\'', e)
            self.firstWord = -1

    # 'Function definition'
    def gotResults_138(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef ():'
            top_buffer += '{Left_3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_138(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 245, '\'Function definition\'', e)
            self.firstWord = -1

    # 'Function definition' <_anything>
    def gotResults_139(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '():'
            top_buffer += '{Left_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 246, '\'Function definition\' <_anything>', e)
            self.firstWord = -1

    # 'Show Help'
    def gotResults_140(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':help '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_140(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 247, '\'Show Help\'', e)
            self.firstWord = -1

    # 'Set setting'
    def gotResults_141(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':set '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_141(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 248, '\'Set setting\'', e)
            self.firstWord = -1

    # 'Split vertical'
    def gotResults_142(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':vsp'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_142(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 251, '\'Split vertical\'', e)
            self.firstWord = -1

    # 'Vim Window left'
    def gotResults_143(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_143(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 252, '\'Vim Window left\'', e)
            self.firstWord = -1

    # 'Vim Window right'
    def gotResults_144(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_144(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 253, '\'Vim Window right\'', e)
            self.firstWord = -1

    # 'Vim Window up'
    def gotResults_145(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_145(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 254, '\'Vim Window up\'', e)
            self.firstWord = -1

    # 'Vim Window down'
    def gotResults_146(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'j'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_146(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 255, '\'Vim Window down\'', e)
            self.firstWord = -1

    # 'Vim Window next'
    def gotResults_147(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_147(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 256, '\'Vim Window next\'', e)
            self.firstWord = -1

    # 'Vim Window close'
    def gotResults_148(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ESC}{Ctrl+w}'
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_148(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 257, '\'Vim Window close\'', e)
            self.firstWord = -1

    # 'Vim Window crop'
    def gotResults_149(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':only'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_149(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 258, '\'Vim Window crop\'', e)
            self.firstWord = -1

    # 'Previous buffer'
    def gotResults_150(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bp'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_150(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 261, '\'Previous buffer\'', e)
            self.firstWord = -1

    # 'Close buffer'
    def gotResults_151(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bd'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_151(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 262, '\'Close buffer\'', e)
            self.firstWord = -1

    # 'Next buffer'
    def gotResults_152(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':bn'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_152(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 263, '\'Next buffer\'', e)
            self.firstWord = -1

    # 'Switch buffer'
    def gotResults_153(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':b#'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_153(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 264, '\'Switch buffer\'', e)
            self.firstWord = -1

    # 'Show buffers'
    def gotResults_154(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':buffers'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_154(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 265, '\'Show buffers\'', e)
            self.firstWord = -1

    # 'numbered buffer' <1to30>
    def gotResults_155(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':b'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 266, '\'numbered buffer\' <1to30>', e)
            self.firstWord = -1

    def get_tab_actions(self, list_buffer, functional, word):
        if word == 'Previous':
            list_buffer += 'p'
        elif word == 'Close':
            list_buffer += 'c'
        elif word == 'Next':
            list_buffer += 'n'
        elif word == 'List':
            list_buffer += 's'
        elif word == 'Last':
            list_buffer += 'l'
        elif word == 'First':
            list_buffer += 'fir'
        return list_buffer

    # <tab_actions> 'tab'
    def gotResults_156(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':tab'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_tab_actions(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 270, '<tab_actions> \'tab\'', e)
            self.firstWord = -1

    # 'switch tab' <1to30>
    def gotResults_157(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':tabn '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 271, '\'switch tab\' <1to30>', e)
            self.firstWord = -1

    # 'vim Tag Previous'
    def gotResults_158(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ':tN{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_158(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 276, '\'vim Tag Previous\'', e)
            self.firstWord = -1

    # 'vim Tag Jump'
    def gotResults_159(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+]}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_159(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 277, '\'vim Tag Jump\'', e)
            self.firstWord = -1

    # 'vim Tag Next'
    def gotResults_160(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ':tn{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_160(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 278, '\'vim Tag Next\'', e)
            self.firstWord = -1

    # 'Vim Tag Match'
    def gotResults_161(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ':ts{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_161(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 279, '\'Vim Tag Match\'', e)
            self.firstWord = -1

    # 'Vim Tag Return'
    def gotResults_162(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_162(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 280, '\'Vim Tag Return\'', e)
            self.firstWord = -1

    # 'Vim Tag Stack'
    def gotResults_163(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ':tags{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_163(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 281, '\'Vim Tag Stack\'', e)
            self.firstWord = -1

    # 'Vim Folds'
    def gotResults_164(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_164(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 285, '\'Vim Folds\'', e)
            self.firstWord = -1

    # 'Vim show Taglist'
    def gotResults_165(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ''
            top_buffer += '{ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_165(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 286, '\'Vim show Taglist\'', e)
            self.firstWord = -1

    # 'Vim Align'
    def gotResults_166(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':Align '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_166(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 287, '\'Vim Align\'', e)
            self.firstWord = -1

    # 'Vim Align' <key>
    def gotResults_167(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':Align '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '{Left_7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 288, '\'Vim Align\' <key>', e)
            self.firstWord = -1

    # 'complete'
    def gotResults_168(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+x}{ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_168(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 290, '\'complete\'', e)
            self.firstWord = -1

    # 'local complete'
    def gotResults_169(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_169(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 291, '\'local complete\'', e)
            self.firstWord = -1

    # 'Unite files'
    def gotResults_170(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\f'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_170(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 294, '\'Unite files\'', e)
            self.firstWord = -1

    # 'Unite files recursive'
    def gotResults_171(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\t'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_171(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 295, '\'Unite files recursive\'', e)
            self.firstWord = -1

    # 'Unite recent'
    def gotResults_172(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\m'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_172(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 296, '\'Unite recent\'', e)
            self.firstWord = -1

    # 'Unite history'
    def gotResults_173(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\y'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_173(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 298, '\'Unite history\'', e)
            self.firstWord = -1

    # 'Unite buffer'
    def gotResults_174(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_174(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 299, '\'Unite buffer\'', e)
            self.firstWord = -1

    # 'Nowrap'
    def gotResults_175(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set nowrap{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_175(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 302, '\'Nowrap\'', e)
            self.firstWord = -1

    # 'setting based'
    def gotResults_176(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set paste{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_176(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 303, '\'setting based\'', e)
            self.firstWord = -1

    # 'Edit vim RC'
    def gotResults_177(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':e ~\\.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_177(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 304, '\'Edit vim RC\'', e)
            self.firstWord = -1

    # 'Reload'
    def gotResults_178(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':source $MYVIMRC'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_178(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 305, '\'Reload\'', e)
            self.firstWord = -1

    # 'command history'
    def gotResults_179(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q:'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_179(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 308, '\'command history\'', e)
            self.firstWord = -1

    # 'pattern match history'
    def gotResults_180(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_180(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 309, '\'pattern match history\'', e)
            self.firstWord = -1

    # 'screen new'
    def gotResults_181(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_181(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 4, '\'screen new\'', e)
            self.firstWord = -1

    # 'screen remove'
    def gotResults_182(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'X'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_182(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 5, '\'screen remove\'', e)
            self.firstWord = -1

    # 'screen crop'
    def gotResults_183(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'Q'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_183(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 6, '\'screen crop\'', e)
            self.firstWord = -1

    # 'screen scroll back'
    def gotResults_184(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '['
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_184(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 7, '\'screen scroll back\'', e)
            self.firstWord = -1

    # 'screen paste'
    def gotResults_185(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += ']'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_185(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 8, '\'screen paste\'', e)
            self.firstWord = -1

    # 'screen mark'
    def gotResults_186(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_186(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 9, '\'screen mark\'', e)
            self.firstWord = -1

    # 'screen kill'
    def gotResults_187(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'k'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_187(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 10, '\'screen kill\'', e)
            self.firstWord = -1

    # 'screen help'
    def gotResults_188(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '?'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_188(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 11, '\'screen help\'', e)
            self.firstWord = -1

    # 'screen split'
    def gotResults_189(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'S'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_189(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 12, '\'screen split\'', e)
            self.firstWord = -1

    # 'screen title'
    def gotResults_190(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_190(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 13, '\'screen title\'', e)
            self.firstWord = -1

    # 'screen list'
    def gotResults_191(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += '"'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_191(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 14, '\'screen list\'', e)
            self.firstWord = -1

    # 'screen switch'
    def gotResults_192(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_192(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 15, '\'screen switch\'', e)
            self.firstWord = -1

    # 'screen detach'
    def gotResults_193(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer += 'd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_193(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 16, '\'screen detach\'', e)
            self.firstWord = -1

    # 'screen next'
    def gotResults_194(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_194(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 17, '\'screen next\'', e)
            self.firstWord = -1

    # 'screen previous'
    def gotResults_195(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_195(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 18, '\'screen previous\'', e)
            self.firstWord = -1

    # 'screen' 0..9
    def gotResults_196(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl'
            top_buffer += '+'
            top_buffer += 'a}'
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_196(words[2:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 19, '\'screen\' 0..9', e)
            self.firstWord = -1

    # 'screen attach'
    def gotResults_197(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'screen  {Enter}  {enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_197(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 21, '\'screen attach\'', e)
            self.firstWord = -1

    # 'screen join'
    def gotResults_198(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'screen -x {enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_198(words[1:], fullResults)
        except Exception, e:
            handle_error('screen.vch', 22, '\'screen join\'', e)
            self.firstWord = -1

    def get_machine(self, list_buffer, functional, word):
        if word == 'release five':
            list_buffer += 'mdl@...'
        elif word == 'release six':
            list_buffer += 'mdl@...'
        elif word == 'P.O. Box':
            list_buffer += 'mdl@...'
        elif word == 'PA install':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian one':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian two':
            list_buffer += 'lillibridgem@...'
        elif word == 'build cent toss':
            list_buffer += 'lillibridgem@...'
        elif word == 'build wheezy':
            list_buffer += 'lillibridgem@...'
        elif word == 'metabox one':
            list_buffer += 'lillibridgem@...'
        elif word == 'lark':
            list_buffer += 'mdl@...'
        elif word == 'Embarcadero':
            list_buffer += 'mdl@...'
        elif word == 'remote foil':
            list_buffer += 'mdl@<censored>'
        elif word == 'local foil':
            list_buffer += 'mdl@...'
        return list_buffer

    def get_common_actions(self, list_buffer, functional, word):
        if word == 'edit':
            list_buffer += 'vim'
        elif word == 'source':
            list_buffer += 'source'
        return list_buffer

    # 'vim config'
    def gotResults_199(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '.vimrc'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_199(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 13, '\'vim config\'', e)
            self.firstWord = -1

    # 'edit vim config'
    def gotResults_200(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'ivim ~/.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_200(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 14, '\'edit vim config\'', e)
            self.firstWord = -1

    # <common_actions> 'bash config'
    def gotResults_201(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_common_actions(top_buffer, False, word)
            top_buffer += ' ~/.bashrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 15, '<common_actions> \'bash config\'', e)
            self.firstWord = -1

    # 'bash history'
    def gotResults_202(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_202(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 16, '\'bash history\'', e)
            self.firstWord = -1

    # 'break'
    def gotResults_203(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_203(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 17, '\'break\'', e)
            self.firstWord = -1

    # 'double dash'
    def gotResults_204(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_204(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 18, '\'double dash\'', e)
            self.firstWord = -1

    # 'Bash Tag File Update'
    def gotResults_205(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_205(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 19, '\'Bash Tag File Update\'', e)
            self.firstWord = -1

    # 'make tar'
    def gotResults_206(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -cf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_206(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 20, '\'make tar\'', e)
            self.firstWord = -1

    # 'extract tar'
    def gotResults_207(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -xf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_207(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 21, '\'extract tar\'', e)
            self.firstWord = -1

    # 'confirm force remove file'
    def gotResults_208(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rm -r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_208(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 22, '\'confirm force remove file\'', e)
            self.firstWord = -1

    # 'Double point slash'
    def gotResults_209(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '../'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_209(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 23, '\'Double point slash\'', e)
            self.firstWord = -1

    # 'change ownership'
    def gotResults_210(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chown -R tan:tan '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_210(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 24, '\'change ownership\'', e)
            self.firstWord = -1

    # 'change mode'
    def gotResults_211(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chmod -R 755 '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_211(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 25, '\'change mode\'', e)
            self.firstWord = -1

    # 'home root'
    def gotResults_212(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '~/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_212(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 26, '\'home root\'', e)
            self.firstWord = -1

    # 'enter list'
    def gotResults_213(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}ls{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_213(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 27, '\'enter list\'', e)
            self.firstWord = -1

    # 'change absolute directory'
    def gotResults_214(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd -P .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_214(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 28, '\'change absolute directory\'', e)
            self.firstWord = -1

    def get_show(self, list_buffer, functional, word):
        if word == 'show':
            list_buffer += ''
        elif word == 'show some of':
            list_buffer += ' | head'
        elif word == 'show a lot of':
            list_buffer += ' | head -n 50'
        elif word == 'local show':
            list_buffer += '{ctrl+a}l{ctrl+e}'
        return list_buffer

    def get_desc(self, list_buffer, functional, word):
        if word == 'long':
            list_buffer += '-l'
        elif word == 'full':
            list_buffer += '-A'
        elif word == 'recent':
            list_buffer += '-t'
        elif word == 'recursive':
            list_buffer += '-R'
        elif word == 'human':
            list_buffer += '-h'
        return list_buffer

    # <show> <desc> 'directory'
    def gotResults_215(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_desc(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 44, '<show> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> 'directory'
    def gotResults_216(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 45, '<show> \'directory\'', e)
            self.firstWord = -1

    # 'show disk space'
    def gotResults_217(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'df -h .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_217(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 48, '\'show disk space\'', e)
            self.firstWord = -1

    def get_usage(self, list_buffer, functional, word):
        if word == 'usage':
            list_buffer += '-h'
        elif word == 'usage kilobytes':
            list_buffer += ''
        elif word == 'usage megabytes':
            list_buffer += '-m'
        return list_buffer

    # 'show disk' <usage>
    def gotResults_218(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'du '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_usage(top_buffer, False, word)
            top_buffer += ' -s -- "`ls --color=none -A`" .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 52, '\'show disk\' <usage>', e)
            self.firstWord = -1

    # 'secure login to' <machine>
    def gotResults_219(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 60, '\'secure login to\' <machine>', e)
            self.firstWord = -1

    # 'secure login' <machine>
    def gotResults_238(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 60, '\'secure login\' <machine>', e)
            self.firstWord = -1

    # 'S F T P' <machine>
    def gotResults_220(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sftp '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 63, '\'S F T P\' <machine>', e)
            self.firstWord = -1

    # 'multiple get'
    def gotResults_221(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mget '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_221(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 67, '\'multiple get\'', e)
            self.firstWord = -1

    # 'local change directory'
    def gotResults_222(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lcd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_222(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 68, '\'local change directory\'', e)
            self.firstWord = -1

    # 'local working directory'
    def gotResults_223(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lpwd{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_223(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 70, '\'local working directory\'', e)
            self.firstWord = -1

    def get_scp(self, list_buffer, functional, word):
        if word == 'secure copy':
            list_buffer += 'scp'
        elif word == 'secure recursive copy':
            list_buffer += 'scp -r'
        elif word == 'recursive secure copy':
            list_buffer += 'scp -r'
        elif word == 'secure clone':
            list_buffer += 'scp -p -r'
        return list_buffer

    # 'package install'
    def gotResults_224(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'apt-cyg install '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_224(words[1:], fullResults)
        except Exception, e:
            handle_error('mintty.vcl', 8, '\'package install\'', e)
            self.firstWord = -1

    # 'package remove'
    def gotResults_225(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'apt-cyg remove '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_225(words[1:], fullResults)
        except Exception, e:
            handle_error('mintty.vcl', 9, '\'package remove\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
