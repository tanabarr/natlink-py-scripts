# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.1, Sun Feb 23 15:04:00 2014

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <1> = 'Refresh' ;
        <2> = 'Close Session' ;
        <3> = 'Local' ('Salute' | 'Task Manager' ) ;
        <4> = 'Local' ('Log Off' | 'Restart' ) ;
        <1to20> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <5> = 'Local Switch to' <1to20> ;
        <6> = 'Local Close' <1to20> ;
        <7> = 'Local Switch to' <7b> ;
        <7b> = <1to20> 'Left' ;
        <8> = 'Local Close' <8b> ;
        <8b> = <1to20> 'Left' ;
        <9> = 'Local Start Menu' ;
        <10> = 'Local Launch' <1to20> ;
        <11> = 'Start' ('regedit' | 'explorer' ) ;
        <12> = 'Environment Variables' ;
        <13> = 'Title' ('Notepad' | 'Shell' | 'Explorer' | 'Visual C++' ) ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <14> = 'Press' <key> ;
        <15> = <key> 'Here' ;
        <16> = 'Space Bar' ;
        <17> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <18> = 'Press' <special> <nn> ;
        <97> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <19> = 'Press' <mod> <key> <nn> ;
        <98> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <20> = 'Press' <mod> <mod> <key> <nn> ;
        <99> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <21> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <100> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <22> = 'Save and Close' ;
        <23> = 'Dont Save and Close' ;
        <24> = 'Save File' ;
        <25> = 'Save As' ;
        <26> = 'Replace' ;
        <folder> = ('Temp' ) ;
        <27> = 'Folder' <folder> ;
        <28> = 'Copy That' ;
        <29> = 'Paste That' ;
        <30> = 'Go Up' ;
        <31> = 'Go Up' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <32> = 'Refresh View' ;
        <101> = 'Refresh' ;
        <view_mode> = ('Extra Large' | 'Large' | 'Medium' | 'List' | 'Details' ) ;
        <33> = 'View Mode' <view_mode> ;
        <34> = 'Search' ;
        <35> = ('Copy' | 'Paste' | 'Go' ) 'Address' ;
        <36> = 'Go' ('Back' | 'Forward' ) ;
        <37> = 'Go' ('Back' | 'Forward' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <38> = ('Copy' | 'Paste' | 'Go' ) ('Address' | 'URL' ) ;
        <39> = 'Folder' <folder> ;
        <40> = 'Search' <folder> ;
        <41> = 'New Folder' ;
        <42> = 'Folders' ;
        <43> = 'Open Folder' ;
        <44> = 'Expand That' ;
        <45> = 'Collapse That' ;
        <46> = 'Share That' ;
        <47> = 'Copy Filename' ;
        <48> = 'Copy Folder Name' ;
        <49> = 'Copy Leaf Name' ;
        <50> = 'new text Document' ;
        <51> = 'Duplicate That' ;
        <52> = 'Rename That' ;
        <53> = 'Paste Here' ;
        <54> = ('Show' | 'Edit' ) 'Properties' ;
        <55> = 'Toggle Read Only' ;
        <102> = 'Read Only' ;
        <56> = 'open with' ;
        <57> = 'file edit' ;
        <58> = 'file options' ;
        <file> = ('Temp' ) ;
        <59> = ('Open' | 'Close' | 'Recent' | 'Save' ) 'Workspace' ;
        <60> = 'Workspace' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <61> = 'Open File' ;
        <62> = 'Open File' <folder> ;
        <63> = 'Close' ('File' | 'That' ) ;
        <64> = 'Save File' ;
        <65> = 'Buffer' <file> ;
        <66> = 'Find in Files' ;
        <67> = 'Find in Files' <folder> ;
        <103> = 'Find in' <folder> ;
        <68> = 'Toggle Read Only' ;
        <104> = 'Read Only' ;
        <69> = 'Full Screen' ;
        <70> = 'New' ('Search' | 'Find' ) ;
        <71> = 'Find New' ;
        <72> = 'Find That' ;
        <73> = 'Find' ('Down' | 'Up' ) ;
        <74> = 'Next Bookmark' ;
        <digit> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <75> = 'Line Number' ;
        <76> = 'Line Number' <digit> ;
        <105> = 'Line' <digit> ;
        <77> = 'Line Number' <digit> <digit> ;
        <106> = 'Line' <digit> <digit> ;
        <78> = 'Line Number' <digit> <digit> <digit> ;
        <107> = 'Line' <digit> <digit> <digit> ;
        <79> = 'Line Number' <digit> <digit> <digit> <digit> ;
        <108> = 'Line' <digit> <digit> <digit> <digit> ;
        <80> = 'Output' ('Go' | 'Start' | 'End' ) ;
        <81> = 'Output Clear' ;
        <82> = 'Rebuild' ;
        <83> = 'Rebuild All' ;
        <84> = 'Project Settings' ;
        <85> = ('Set' | 'Clear' | 'Toggle' ) ('Breakpoint' | 'Bookmark' ) ;
        <86> = 'Edit Breakpoints' ;
        <109> = 'Breakpoints' ;
        <87> = 'Remove All Breakpoints' ;
        <110> = 'Remove Breakpoints' ;
        <88> = 'Exceptions' ;
        <89> = 'Reset Exceptions' ;
        <90> = 'Continue' ;
        <91> = 'Execute' ;
        <92> = 'Restart' ;
        <93> = 'Stop Debugging' ;
        <94> = 'Break Now' ;
        <95> = 'Single Step' ;
        <96> = 'home server' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>;
        <sequence> exported = <any>;
        <any_set2> = <any>|<14>|<15>|<16>|<17>|<18>|<97>|<19>|<98>|<20>|<99>|<21>|<100>|<22>|<23>|<24>|<25>|<26>;
        <sequence_set2> exported = <any_set2>;
        <any_set3> = <any>|<27>|<28>|<29>|<30>|<31>;
        <sequence_set3> exported = <any_set3>;
        <any_set4> = <any>|<32>|<101>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<55>|<102>|<56>|<57>|<58>;
        <sequence_set4> exported = <any_set4>;
        <any_set5> = <any>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<103>|<68>|<104>|<69>|<70>|<71>|<72>|<73>|<74>|<75>|<76>|<105>|<77>|<106>|<78>|<107>|<79>|<108>|<80>|<81>|<82>|<83>|<84>|<85>|<86>|<109>|<87>|<110>|<88>|<89>|<90>|<91>|<92>|<93>|<94>|<95>;
        <sequence_set5> exported = <any_set5>;
        <any_set6> = <any>|<96>;
        <sequence_set6> exported = <any_set6>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']
        self.ruleSet2 = ['sequence_set2']
        self.ruleSet3 = ['sequence_set3']
        self.ruleSet4 = ['sequence_set4']
        self.ruleSet5 = ['sequence_set5']
        self.ruleSet6 = ['sequence_set6']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'vncviewer','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass
        if string.find(title,'notepad') >= 0:
            for rule in self.ruleSet2:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass
        if string.find(title,'shell') >= 0:
            for rule in self.ruleSet3:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass
        if string.find(title,'explorer') >= 0:
            for rule in self.ruleSet4:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass
        if string.find(title,'visual c++') >= 0:
            for rule in self.ruleSet5:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass
        if string.find(title,'connection details') >= 0:
            for rule in self.ruleSet6:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    # 'Refresh'
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'nw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += 'r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('vncviewer.vcl', 5, '\'Refresh\'', e)
            self.firstWord = -1

    # 'Close Session'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'ne'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception, e:
            handle_error('vncviewer.vcl', 6, '\'Close Session\'', e)
            self.firstWord = -1

    # 'Local' ('Salute' | 'Task Manager')
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'nw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{Down_11}{Enter}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Salute':
                top_buffer += ''
            elif word == 'Task Manager':
                top_buffer += 't'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_3(words[2:], fullResults)
        except Exception, e:
            handle_error('vncviewer.vcl', 9, '\'Local\' (\'Salute\' | \'Task Manager\')', e)
            self.firstWord = -1

    # 'Local' ('Log Off' | 'Restart')
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{Up}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '3000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Home}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Log Off':
                top_buffer += ''
            elif word == 'Restart':
                top_buffer += '{Down_2}'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_4(words[2:], fullResults)
        except Exception, e:
            handle_error('vncviewer.vcl', 12, '\'Local\' (\'Log Off\' | \'Restart\')', e)
            self.firstWord = -1

    def get_1to20(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Local Switch to' <1to20>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Esc}'
            top_buffer += '{Tab_2}{End}{Left '
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_1to20(eval_template_arg2, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer += '}'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('remoteControl.vch', 11, '\'Local Switch to\' <1to20>', e)
            self.firstWord = -1

    # 'Local Close' <1to20>
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Esc}'
            top_buffer += '{Tab_2}{End}{Left '
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_1to20(eval_template_arg2, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            top_buffer += '}'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Alt+F4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('remoteControl.vch', 12, '\'Local Close\' <1to20>', e)
            self.firstWord = -1

    # 'Local Switch to' <1to20> 'Left'
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Esc}'
            top_buffer += '{Tab_2}{Right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to20(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('remoteControl.vch', 13, '\'Local Switch to\' <1to20> \'Left\'', e)
            self.firstWord = -1

    # 'Local Close' <1to20> 'Left'
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Esc}'
            top_buffer += '{Tab_2}{Right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to20(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Alt+F4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('remoteControl.vch', 14, '\'Local Close\' <1to20> \'Left\'', e)
            self.firstWord = -1

    # 'Local Start Menu'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('remoteControl.vch', 16, '\'Local Start Menu\'', e)
            self.firstWord = -1

    # 'Local Launch' <1to20>
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Esc}'
            top_buffer += '{Tab}{Left}{Esc}{Right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to20(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('remoteControl.vch', 18, '\'Local Launch\' <1to20>', e)
            self.firstWord = -1

    # 'Start' ('regedit' | 'explorer')
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{Up_2}{Enter}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_11(words[2:], fullResults)
        except Exception, e:
            handle_error('remoteControl.vch', 21, '\'Start\' (\'regedit\' | \'explorer\')', e)
            self.firstWord = -1

    # 'Environment Variables'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '1'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-1'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{Up_2}{Enter}'
            top_buffer += 'C:\\WINNT\\System32\\SYSDM.CPL'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Right_4}{Alt+e}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_12(words[1:], fullResults)
        except Exception, e:
            handle_error('remoteControl.vch', 23, '\'Environment Variables\'', e)
            self.firstWord = -1

    # 'Title' ('Notepad' | 'Shell' | 'Explorer' | 'Visual C++')
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'SetTitle.dll'
            dragon_arg2 = ''
            dragon_arg2 += 'SetTitle'
            dragon_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            dragon_arg3 += word
            call_Dragon('DllCall', 'sss', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_13(words[2:], fullResults)
        except Exception, e:
            handle_error('remoteControl.vch', 33, '\'Title\' (\'Notepad\' | \'Shell\' | \'Explorer\' | \'Visual C++\')', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # <key> 'Here'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 21, '<key> \'Here\'', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 23, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_17(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 36, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 36, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Save and Close'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}s{Alt+f}x'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('notepad.vcl', 4, '\'Save and Close\'', e)
            self.firstWord = -1

    # 'Dont Save and Close'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}xn'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_23(words[1:], fullResults)
        except Exception, e:
            handle_error('notepad.vcl', 5, '\'Dont Save and Close\'', e)
            self.firstWord = -1

    # 'Save File'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('notepad.vcl', 7, '\'Save File\'', e)
            self.firstWord = -1

    # 'Save As'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_25(words[1:], fullResults)
        except Exception, e:
            handle_error('notepad.vcl', 8, '\'Save As\'', e)
            self.firstWord = -1

    # 'Replace'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+h}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_26(words[1:], fullResults)
        except Exception, e:
            handle_error('notepad.vcl', 10, '\'Replace\'', e)
            self.firstWord = -1

    def get_folder(self, list_buffer, functional, word):
        if word == 'Temp':
            list_buffer += 'C:\\Temp'
        return list_buffer

    # 'Folder' <folder>
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd "'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '"{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('ntvdm.vcl', 5, '\'Folder\' <folder>', e)
            self.firstWord = -1

    # 'Copy That'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_28(words[1:], fullResults)
        except Exception, e:
            handle_error('ntvdm.vcl', 7, '\'Copy That\'', e)
            self.firstWord = -1

    # 'Paste That'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Space}ep'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_29(words[1:], fullResults)
        except Exception, e:
            handle_error('ntvdm.vcl', 8, '\'Paste That\'', e)
            self.firstWord = -1

    # 'Go Up'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd ..{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_30(words[1:], fullResults)
        except Exception, e:
            handle_error('ntvdm.vcl', 10, '\'Go Up\'', e)
            self.firstWord = -1

    # 'Go Up' 1..20
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd '
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '..\\'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_31(words[2:], fullResults)
        except Exception, e:
            handle_error('ntvdm.vcl', 11, '\'Go Up\' 1..20', e)
            self.firstWord = -1

    # 'Refresh View'
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+v}r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_32(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 6, '\'Refresh View\'', e)
            self.firstWord = -1

    # 'Refresh'
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+v}r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_101(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 6, '\'Refresh\'', e)
            self.firstWord = -1

    def get_view_mode(self, list_buffer, functional, word):
        if word == 'Extra Large':
            list_buffer += 'x'
        elif word == 'Large':
            list_buffer += 'r'
        elif word == 'Medium':
            list_buffer += 'm'
        elif word == 'List':
            list_buffer += 'l'
        elif word == 'Details':
            list_buffer += 'd'
        return list_buffer

    # 'View Mode' <view_mode>
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+v}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_view_mode(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('explorer.vcl', 9, '\'View Mode\' <view_mode>', e)
            self.firstWord = -1

    # 'Search'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+e}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_34(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 10, '\'Search\'', e)
            self.firstWord = -1

    # ('Copy' | 'Paste' | 'Go') 'Address'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[0 + self.firstWord][0]
            if word == 'Copy':
                top_buffer += '{Ctrl+c}'
            elif word == 'Paste':
                top_buffer += '{Ctrl+v}'
            elif word == 'Go':
                top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_35(words[2:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 11, '(\'Copy\' | \'Paste\' | \'Go\') \'Address\'', e)
            self.firstWord = -1

    # 'Go' ('Back' | 'Forward')
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                dragon_arg1 += 'Left'
            elif word == 'Forward':
                dragon_arg1 += 'Right'
            dragon_arg1 += '}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_36(words[2:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 14, '\'Go\' (\'Back\' | \'Forward\')', e)
            self.firstWord = -1

    # 'Go' ('Back' | 'Forward') 1..10
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                dragon_arg1 += 'Left'
            elif word == 'Forward':
                dragon_arg1 += 'Right'
            dragon_arg1 += '_'
            word = fullResults[2 + self.firstWord][0]
            dragon_arg1 += self.convert_number_word(word)
            dragon_arg1 += '}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_37(words[3:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 15, '\'Go\' (\'Back\' | \'Forward\') 1..10', e)
            self.firstWord = -1

    # ('Copy' | 'Paste' | 'Go') ('Address' | 'URL')
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Copy':
                top_buffer += '{Ctrl+c}'
            elif word == 'Paste':
                top_buffer += '{Ctrl+v}'
            elif word == 'Go':
                top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_38(words[2:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 16, '(\'Copy\' | \'Paste\' | \'Go\') (\'Address\' | \'URL\')', e)
            self.firstWord = -1

    # 'Folder' <folder>
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '{Enter}{Tab_2}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+NumKey+}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('explorer.vcl', 22, '\'Folder\' <folder>', e)
            self.firstWord = -1

    # 'Search' <folder>
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+e}{Alt+l}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '{Alt+m}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('explorer.vcl', 23, '\'Search\' <folder>', e)
            self.firstWord = -1

    # 'New Folder'
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}wf'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 25, '\'New Folder\'', e)
            self.firstWord = -1

    # 'Folders'
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+v}eo'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_42(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 26, '\'Folders\'', e)
            self.firstWord = -1

    # 'Open Folder'
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_43(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 27, '\'Open Folder\'', e)
            self.firstWord = -1

    # 'Expand That'
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+NumKey+}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_44(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 28, '\'Expand That\'', e)
            self.firstWord = -1

    # 'Collapse That'
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+NumKey-}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_45(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 29, '\'Collapse That\'', e)
            self.firstWord = -1

    # 'Share That'
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Tab_5}{Right_2}{Alt+s}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_46(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 30, '\'Share That\'', e)
            self.firstWord = -1

    # 'Copy Filename'
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}m{Ctrl+c}{Alt+d}{Right}\\{Ctrl+v}'
            top_buffer += '{Home}{Shift+End}{Ctrl+c}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_47(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 35, '\'Copy Filename\'', e)
            self.firstWord = -1

    # 'Copy Folder Name'
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}{Ctrl+c}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 36, '\'Copy Folder Name\'', e)
            self.firstWord = -1

    # 'Copy Leaf Name'
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}m{Ctrl+c}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_49(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 37, '\'Copy Leaf Name\'', e)
            self.firstWord = -1

    # 'new text Document'
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}wt'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_50(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 39, '\'new text Document\'', e)
            self.firstWord = -1

    # 'Duplicate That'
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}{Left}{Ctrl+v}c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_51(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 40, '\'Duplicate That\'', e)
            self.firstWord = -1

    # 'Rename That'
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_52(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 41, '\'Rename That\'', e)
            self.firstWord = -1

    # 'Paste Here'
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_53(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 42, '\'Paste Here\'', e)
            self.firstWord = -1

    # ('Show' | 'Edit') 'Properties'
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_54(words[2:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 44, '(\'Show\' | \'Edit\') \'Properties\'', e)
            self.firstWord = -1

    # 'Toggle Read Only'
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Alt+r}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_55(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 45, '\'Toggle Read Only\'', e)
            self.firstWord = -1

    # 'Read Only'
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Alt+r}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 45, '\'Read Only\'', e)
            self.firstWord = -1

    # 'open with'
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 49, '\'open with\'', e)
            self.firstWord = -1

    # 'file edit'
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 50, '\'file edit\'', e)
            self.firstWord = -1

    # 'file options'
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('explorer.vcl', 51, '\'file options\'', e)
            self.firstWord = -1

    def get_file(self, list_buffer, functional, word):
        if word == 'Temp':
            list_buffer += 'C:\\Temp\\temp.txt'
        return list_buffer

    # ('Open' | 'Close' | 'Recent' | 'Save') 'Workspace'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Open':
                top_buffer += 'w'
            elif word == 'Close':
                top_buffer += 'k'
            elif word == 'Recent':
                top_buffer += 'r'
            elif word == 'Save':
                top_buffer += 'v'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_59(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 10, '(\'Open\' | \'Close\' | \'Recent\' | \'Save\') \'Workspace\'', e)
            self.firstWord = -1

    # 'Workspace' 1..10
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}r'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_60(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 11, '\'Workspace\' 1..10', e)
            self.firstWord = -1

    # 'Open File'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 13, '\'Open File\'', e)
            self.firstWord = -1

    # 'Open File' <folder>
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+o}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('msdev.vcl', 14, '\'Open File\' <folder>', e)
            self.firstWord = -1

    # 'Close' ('File' | 'That')
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_63(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 15, '\'Close\' (\'File\' | \'That\')', e)
            self.firstWord = -1

    # 'Save File'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 16, '\'Save File\'', e)
            self.firstWord = -1

    # 'Buffer' <file>
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+o}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_file(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('msdev.vcl', 18, '\'Buffer\' <file>', e)
            self.firstWord = -1

    # 'Find in Files'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+e}i'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 20, '\'Find in Files\'', e)
            self.firstWord = -1

    # 'Find in Files' <folder>
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+e}i{Tab_2}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '{Shift+Tab_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('msdev.vcl', 21, '\'Find in Files\' <folder>', e)
            self.firstWord = -1

    # 'Find in' <folder>
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+e}i{Tab_2}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_folder(top_buffer, False, word)
            top_buffer += '{Shift+Tab_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('msdev.vcl', 21, '\'Find in\' <folder>', e)
            self.firstWord = -1

    # 'Toggle Read Only'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}a{Right}*{Enter}{Shift+Tab}{End}{Shift+F10}r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Alt+r}{Enter}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 24, '\'Toggle Read Only\'', e)
            self.firstWord = -1

    # 'Read Only'
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}a{Right}*{Enter}{Shift+Tab}{End}{Shift+F10}r'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Alt+r}{Enter}{Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_104(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 24, '\'Read Only\'', e)
            self.firstWord = -1

    # 'Full Screen'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+v}u'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 28, '\'Full Screen\'', e)
            self.firstWord = -1

    # 'New' ('Search' | 'Find')
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_70(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 29, '\'New\' (\'Search\' | \'Find\')', e)
            self.firstWord = -1

    # 'Find New'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 30, '\'Find New\'', e)
            self.firstWord = -1

    # 'Find That'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 31, '\'Find That\'', e)
            self.firstWord = -1

    # 'Find' ('Down' | 'Up')
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Down':
                top_buffer += '{F3}'
            elif word == 'Up':
                top_buffer += '{Shift+F3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_73(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 32, '\'Find\' (\'Down\' | \'Up\')', e)
            self.firstWord = -1

    # 'Next Bookmark'
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 33, '\'Next Bookmark\'', e)
            self.firstWord = -1

    def get_digit(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Line Number'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 36, '\'Line Number\'', e)
            self.firstWord = -1

    # 'Line Number' <digit>
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('msdev.vcl', 37, '\'Line Number\' <digit>', e)
            self.firstWord = -1

    # 'Line' <digit>
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('msdev.vcl', 37, '\'Line\' <digit>', e)
            self.firstWord = -1

    # 'Line Number' <digit> <digit>
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('msdev.vcl', 38, '\'Line Number\' <digit> <digit>', e)
            self.firstWord = -1

    # 'Line' <digit> <digit>
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('msdev.vcl', 38, '\'Line\' <digit> <digit>', e)
            self.firstWord = -1

    # 'Line Number' <digit> <digit> <digit>
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('msdev.vcl', 39, '\'Line Number\' <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Line' <digit> <digit> <digit>
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('msdev.vcl', 39, '\'Line\' <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Line Number' <digit> <digit> <digit> <digit>
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('msdev.vcl', 40, '\'Line Number\' <digit> <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Line' <digit> <digit> <digit> <digit>
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+g}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_digit(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('msdev.vcl', 40, '\'Line\' <digit> <digit> <digit> <digit>', e)
            self.firstWord = -1

    # 'Output' ('Go' | 'Start' | 'End')
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+2}{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Go':
                top_buffer += ''
            elif word == 'Start':
                top_buffer += 'Home'
            elif word == 'End':
                top_buffer += 'End'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_80(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 42, '\'Output\' (\'Go\' | \'Start\' | \'End\')', e)
            self.firstWord = -1

    # 'Output Clear'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '4'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '{"n":1, "e":2, "s":3, "w":4, "ne":5, "se":6, "sw":7, "nw":8}[%a]'
            eval_template2_arg2 = ''
            eval_template2_arg2 += 'sw'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '3'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '-4'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            top_buffer += 'r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 43, '\'Output Clear\'', e)
            self.firstWord = -1

    # 'Rebuild'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 47, '\'Rebuild\'', e)
            self.firstWord = -1

    # 'Rebuild All'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+b}r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 48, '\'Rebuild All\'', e)
            self.firstWord = -1

    # 'Project Settings'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 49, '\'Project Settings\'', e)
            self.firstWord = -1

    # ('Set' | 'Clear' | 'Toggle') ('Breakpoint' | 'Bookmark')
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Breakpoint':
                top_buffer += '{F9}'
            elif word == 'Bookmark':
                top_buffer += '{Ctrl+F2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_85(words[2:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 53, '(\'Set\' | \'Clear\' | \'Toggle\') (\'Breakpoint\' | \'Bookmark\')', e)
            self.firstWord = -1

    # 'Edit Breakpoints'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 54, '\'Edit Breakpoints\'', e)
            self.firstWord = -1

    # 'Breakpoints'
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 54, '\'Breakpoints\'', e)
            self.firstWord = -1

    # 'Remove All Breakpoints'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F9}{Alt+l}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 55, '\'Remove All Breakpoints\'', e)
            self.firstWord = -1

    # 'Remove Breakpoints'
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F9}{Alt+l}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 55, '\'Remove Breakpoints\'', e)
            self.firstWord = -1

    # 'Exceptions'
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 56, '\'Exceptions\'', e)
            self.firstWord = -1

    # 'Reset Exceptions'
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}e{Alt+t}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'OK'
            call_Dragon('ControlPick', 's', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 57, '\'Reset Exceptions\'', e)
            self.firstWord = -1

    # 'Continue'
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_90(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 59, '\'Continue\'', e)
            self.firstWord = -1

    # 'Execute'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 60, '\'Execute\'', e)
            self.firstWord = -1

    # 'Restart'
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+F5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_92(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 61, '\'Restart\'', e)
            self.firstWord = -1

    # 'Stop Debugging'
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+F5}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_93(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 62, '\'Stop Debugging\'', e)
            self.firstWord = -1

    # 'Break Now'
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+d}b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_94(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 63, '\'Break Now\'', e)
            self.firstWord = -1

    # 'Single Step'
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F10}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_95(words[1:], fullResults)
        except Exception, e:
            handle_error('msdev.vcl', 64, '\'Single Step\'', e)
            self.firstWord = -1

    # 'home server'
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'btx'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'test'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '3000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'SetTitle.dll'
            dragon_arg2 = ''
            dragon_arg2 += 'SetTitle'
            dragon_arg3 = ''
            dragon_arg3 += 'home server'
            call_Dragon('DllCall', 'sss', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('vncviewer.vcl', 21, '\'home server\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
