# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.1, Mon Apr 28 13:27:56 2014

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <1> = 'find' ('this' | 'next' | 'back' ) ;
        <6> = 'find' ;
        <2> = 'select' ('next' | 'all' | 'unselect' ) ;
        <3> = ('path find' | 'path replace' | 'structure find' | 'structure replace' ) ;
        <4> = 'idea window close' ;
        <5> = 'add item' ;
        <any> = <1>|<6>|<2>|<3>|<4>|<5>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'pycharm','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    # 'find' ('this' | 'next' | 'back')
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'this':
                when_value += 'ctrl+'
            elif word == 'next':
                pass  # no actions
            elif word == 'back':
                when_value += 'shift+'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'this':
                    top_buffer += 'ctrl+'
                elif word == 'next':
                    pass  # no actions
                elif word == 'back':
                    top_buffer += 'shift+'
                top_buffer += 'f3}'
            else:
                top_buffer += '{alt+f3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_1(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 5, '\'find\' (\'this\' | \'next\' | \'back\')', e)
            self.firstWord = -1

    # 'find'
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += 'f3}'
            else:
                top_buffer += '{alt+f3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 5, '\'find\'', e)
            self.firstWord = -1

    # 'select' ('next' | 'all' | 'unselect')
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'next':
                top_buffer += 'alt+'
            elif word == 'all':
                top_buffer += 'ctrl+alt+'
            elif word == 'unselect':
                top_buffer += 'shift+alt+'
            top_buffer += 'j}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_2(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 7, '\'select\' (\'next\' | \'all\' | \'unselect\')', e)
            self.firstWord = -1

    # ('path find' | 'path replace' | 'structure find' | 'structure replace')
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'path find':
                pass  # no actions
            elif word == 'path replace':
                pass  # no actions
            elif word == 'structure find':
                pass  # no actions
            elif word == 'structure replace':
                pass  # no actions
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 8, '(\'path find\' | \'path replace\' | \'structure find\' | \'structure replace\')', e)
            self.firstWord = -1

    # 'idea window close'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 10, '\'idea window close\'', e)
            self.firstWord = -1

    # 'add item'
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+insert}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 11, '\'add item\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
