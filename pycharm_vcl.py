# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.1, Fri Jul 04 12:30:40 2014

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <dgndictation> imported;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <1> = 'Press' <key> ;
        <2> = <key> 'Here' ;
        <3> = 'Space Bar' ;
        <4> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <5> = 'Press' <special> <nn> ;
        <257> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <6> = 'Press' <mod> <key> <nn> ;
        <258> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <7> = 'Press' <mod> <mod> <key> <nn> ;
        <259> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <8> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <260> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <0to9> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <2to9> = (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <1to30> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = ('Left' | 'Right' ) ;
        <top_bottom> = ('Top' | 'Bottom' | 'Middle' ) ;
        <9> = ((1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ) <direction> ;
        <10> = ('Change' | 'Copy' ) ('Char' | '1' | 'One' ) ;
        <11> = ('Change' | 'Copy' ) 'Back 1' ;
        <261> = ('Change' | 'Copy' ) 'Back' ;
        <12> = ('Change' | 'Copy' ) <12b> ;
        <12b> = <1to30> 'Chars' ;
        <262> = ('Change' | 'Copy' ) <1to30> ;
        <13> = ('Change' | 'Copy' ) 'Back' <13b> ;
        <13b> = <1to30> 'Chars' ;
        <263> = ('Change' | 'Copy' ) 'Back' <1to30> ;
        <14> = 'Kill' ('Char' | '1' | 'One' ) ;
        <15> = 'Kill Back 1' ;
        <264> = 'Kill Back' ;
        <16> = 'Kill' <16b> ;
        <16b> = <1to30> 'Chars' ;
        <265> = 'Kill' <1to30> ;
        <17> = 'Kill Back' <17b> ;
        <17b> = <1to30> 'Chars' ;
        <266> = 'Kill Back' <1to30> ;
        <18> = 'Change case' ('back' ) <1to30> ;
        <268> = 'Change case' ('back' ) ;
        <267> = 'Change case' <1to30> ;
        <269> = 'Change case' ;
        <19> = 'One Word' ;
        <270> = 'Word' ;
        <20> = 'Back One Word' ;
        <271> = 'Back Word' ;
        <21> = <1to30> 'Words' ;
        <22> = 'Back' <22b> ;
        <22b> = <1to30> 'Words' ;
        <23> = <edit_mode> 'Word' ;
        <24> = <edit_mode> <1to30> 'Words' ;
        <25> = <edit_mode> 'Back Word' ;
        <26> = <edit_mode> 'Back' <26b> ;
        <26b> = <1to30> 'Words' ;
        <27> = <edit_mode> 'Next Word' ;
        <line_actions> = ('Move to' | 'Copy to' | 'Change' | 'Kill' | 'Copy' | 'Sub' | 'Duplicate' | 'Start' | 'Append' | 'beginning' | 'middle' | 'near the end' | 'New Here' | 'New insert' | 'New Back' | 'Append semicolon' ) ;
        <edit_mode> = ('Change' | 'Kill' | 'Copy' ) ;
        <28> = <line_actions> 'Line' ;
        <29> = 'Swap' ('Back' | 'Next' ) 'Line' ;
        <273> = 'Swap' ('Back' | 'Next' ) ;
        <272> = 'Swap Line' ;
        <274> = 'Swap' ;
        <30> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Line Here' ;
        <276> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Line' ;
        <275> = <edit_mode> ('Beginning' | 'Start' | 'End' ) 'Here' ;
        <277> = <edit_mode> ('Beginning' | 'Start' | 'End' ) ;
        <31> = 'Blank' ('back' | 'insert' ) 'Line' ;
        <278> = 'Blank' ('back' | 'insert' ) ;
        <32> = 'Join' ('Back' | 'Next' ) 'Line' ;
        <280> = 'Join' ('Back' | 'Next' ) ;
        <279> = 'Join Line' ;
        <281> = 'Join' ;
        <relative_range_actions> = ('Change' | 'Kill' | 'Copy' | 'Move to' | 'Copy to' | 'duplicate' | 'indent' | 'reverse indent' ) ;
        <33> = <relative_range_actions> ('Next' | 'Back' ) 'Line' ;
        <34> = <relative_range_actions> (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <35> = <relative_range_actions> 'Back' (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <relative_range_commands> = ('Sub' | 'Start' | 'Append' | 'copy here' | 'comment' | 'remove comment' ) ;
        <36> = <relative_range_commands> ('Next' | 'Back' ) 'Line' ;
        <37> = <relative_range_commands> (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <38> = <relative_range_commands> 'Back' (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) 'Lines' ;
        <range_actions> = ('Move to' | 'Copy to' | 'Change' | 'Kill' | 'Copy' | 'Sub' | 'copy here' | 'comment' | 'remove comment' ) ;
        <39> = <range_actions> 'Range' ;
        <insert> = ('insert' | 'append' ) ;
        <40> = 'Flow' ('Start' | 'Append' ) <insert> ;
        <282> = 'Flow' ('Start' | 'Append' ) ;
        <41> = <edit_mode> ('Flow Here' | 'Flow All' | 'Back Flow Here' ) ;
        <42> = ('Indent' | 'reverse indent' ) ('Line' | 'Range' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <283> = ('Indent' | 'reverse indent' ) ('Line' | 'Range' ) ;
        <sub_action> = ('all' | 'here' | 'back here' ) ;
        <43> = ('sub' | 'substitute' ) <sub_action> ;
        <44> = 'edit' ('undo' | 'redo' ) <2to9> ;
        <284> = 'edit' ('undo' | 'redo' ) ;
        <45> = ('change' ) ('inner' | 'outer' ) ('brackets' | 'braces' | 'square brackets' ) ;
        <46> = 'Start macro' ;
        <47> = 'Repeat macro' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) 'times' ;
        <285> = 'Repeat macro' ;
        <text_actions> = ('Paste' | 'Paste Back' | 'Insert' | 'Append here' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' | 'Format' | 'Normal mode' | 'visual mode' ) ;
        <48> = (('Paste' | 'Paste Back' | 'Insert' | 'Append here' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' | 'Format' | 'Normal mode' | 'visual mode' ) ) ;
        <line_mod> = ('Start' | 'Append' | 'Sub' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' | 'beginning' | 'middlie' | 'end' | 'New back' | 'insert' | 'Change' | 'Kill' | 'Copy' | 'Paste' | 'Paste Back' | 'Move to' | 'Copy to' | 'copy here' | 'indent' | 'reverse indent' | 'Comment' | 'Remove Comment' | 'Blank back' | 'Blank insert' ) ;
        <49> = 'line' <line_mod> <0to9> ;
        <289> = 'line' <0to9> ;
        <50> = 'line' <line_mod> <0to9> <0to9> ;
        <290> = 'line' <0to9> <0to9> ;
        <51> = 'line' <line_mod> <0to9> <0to9> <0to9> ;
        <291> = 'line' <0to9> <0to9> <0to9> ;
        <52> = 'line' <line_mod> <0to9> <0to9> <0to9> <0to9> ;
        <292> = 'line' <0to9> <0to9> <0to9> <0to9> ;
        <navigation_actions> = ('List changes' | 'back change' | 'Undo jump' | 'return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Start back' | 'Start next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' ) ;
        <53> = (('List changes' | 'back change' | 'Undo jump' | 'return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Start back' | 'Start next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle' ) ) ;
        <54> = 'Halfpage' ('Up' | 'Down' ) ;
        <296> = 'Halfpage' ;
        <55> = 'Page' <top_bottom> ;
        <56> = 'Back till' <key> ;
        <57> = 'Till' <key> ;
        <58> = 'Till next' ;
        <59> = 'Search' <dgndictation> ;
        <60> = 'Search go' <dgndictation> ;
        <61> = 'clear Search' ;
        <62> = 'Make' ;
        <63> = 'Vim Update Tag File' ;
        <64> = 'List errors' ;
        <65> = 'Next error' ;
        <66> = 'back error' ;
        <67> = 'Save file' ;
        <68> = 'Close file' ;
        <69> = 'Save and close file' ;
        <70> = 'back command' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <297> = 'back command' ;
        <71> = 'Edit another' ;
        <72> = 'File browser' ;
        <73> = 'vim diff split' ;
        <74> = 'Insert space' ;
        <75> = 'Insert space after' ;
        <76> = 'Append comment' ;
        <77> = 'Insert line break' ;
        <78> = 'insert comment' ;
        <79> = 'Double slash backslash' ;
        <80> = 'reference' ;
        <81> = 'Function definition' ;
        <82> = 'Function definition' <dgndictation> ;
        <83> = 'Show Help' ;
        <84> = 'Set setting' ('paste' ) ;
        <298> = 'Set setting' ;
        <85> = 'Set dark background' ;
        <86> = 'Set light background' ;
        <87> = 'reload vim config' ;
        <88> = 'run this' ('now' ) ;
        <299> = 'run this' ;
        <89> = 'Split vertical' ;
        <window_action> = ('left' | 'right' | 'up' | 'down' | 'next' | 'close' ) ;
        <90> = 'Vim Window' <window_action> ;
        <91> = 'Vim Window crop' ;
        <92> = 'Vim Window make fat' ;
        <93> = 'Vim Window make thin' ;
        <94> = 'back buffer' ;
        <95> = 'Close buffer' ;
        <96> = 'Next buffer' ;
        <97> = 'Switch buffer' ;
        <98> = 'List buffers' ;
        <99> = 'numbered buffer' <1to30> ;
        <tab_actions> = ('back' | 'Close' | 'Next' | 'List' | 'Last' | 'First' ) ;
        <100> = 'vim' <100b> ;
        <100b> = <tab_actions> 'tab' ;
        <101> = 'vim switch tab' <1to30> ;
        <102> = 'vim Tag back' ;
        <103> = 'vim Tag Jump' ;
        <104> = 'vim Tag Next' ;
        <105> = 'Vim Tag Match' ;
        <106> = 'Vim Tag Return' ;
        <107> = 'Vim Tag Stack' ;
        <108> = 'Vim Folds' ('open' | 'close' ) ;
        <109> = 'Nowrap' ;
        <110> = 'setting based' ;
        <111> = 'Edit vim RC' ;
        <112> = 'Reload' ;
        <113> = 'all buffers' ;
        <114> = 'command history' ;
        <115> = 'pattern match history' ;
        <116> = 'histogram debug' ;
        <117> = 'ifdef' ('debug' | 'trace' ) ;
        <118> = 'ifdef end' ;
        <machine> = ('release five' | 'release six' | 'P.O. Box' | 'PA install' | 'build Debian' | 'build Debian one' | 'build Debian two' | 'build cent toss' | 'build wheezy' | 'metabox one' | 'lark' | 'Embarcadero' | 'remote foil' | 'local foil' ) ;
        <common_actions> = ('edit' | 'source' ) ;
        <119> = <common_actions> ('vim' | 'bash' ) 'config' ;
        <120> = 'bash history' ;
        <121> = 'break' ;
        <122> = 'break end of file' ;
        <123> = 'escape process' ;
        <124> = ('foreground' | 'background' ) 'process' ;
        <125> = 'double dash' ;
        <126> = 'Bash Tag File Update' ;
        <127> = 'make tar' ;
        <128> = 'extract tar' ;
        <129> = 'confirm force remove file' ;
        <130> = 'back directory' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <131> = 'change ownership' ;
        <132> = 'change' ('permissions' | 'mode' ) ;
        <133> = 'home root' ;
        <134> = 'enter list' ;
        <135> = 'change absolute directory' ;
        <136> = 'present working directory' ;
        <137> = ('vim' | 'normal' | 'normal brief' ) 'diff' ;
        <138> = 'cygwin password' ;
        <139> = ('sub' | 'SVM' ) ('checkout' | 'diff' | 'commit' | 'update' | 'remove' | 'checkout bug' | 'log' | 'start bug' | 'status' ) ;
        <140> = 'start environment' (1 | 2 | 3 | 4 | 5) ;
        <141> = 'stop environment' ;
        <142> = 'Django' ('shell' | 'database shell' | 'sink' | 'sink input' | 'run' ) ;
        <143> = 'pip' ('freeze' | 'completion' | 'install' | 'list' | 'help' ) ;
        <144> = 'pip option' ('bash' | 'upgrade' | 'outdated' | 'local' | 'no index' | 'find links' ) ;
        <145> = 'network stats' ;
        <show> = ('show' | 'show some of' | 'show a lot of' | 'local show' ) ;
        <desc> = ('long' | 'full' | 'recent' | 'recursive' | 'human' ) ;
        <146> = <show> <desc> <desc> <desc> 'directory' ;
        <302> = <show> <desc> <desc> 'directory' ;
        <301> = <show> <desc> 'directory' ;
        <300> = <show> 'directory' ;
        <147> = <show> <desc> 'directory' ;
        <148> = <show> 'directory' ;
        <149> = 'show disk space' ;
        <usage> = ('usage' | 'usage kilobytes' | 'usage megabytes' ) ;
        <150> = 'show disk' <usage> ;
        <151> = 'secure login to' <machine> ;
        <303> = 'secure login' <machine> ;
        <152> = 'S F T P' <machine> ;
        <153> = 'multiple get' ;
        <154> = 'local change directory' ;
        <155> = 'local working directory' ;
        <scp> = ('secure copy' | 'secure recursive copy' | 'recursive secure copy' | 'secure clone' ) ;
        <156> = 'menu' ('show' | 'select' ) ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <304> = 'menu' ('show' | 'select' ) ;
        <157> = 'update' ('from' | 'to' ) ('version control' | 'default' ) ;
        <305> = 'update' ('version control' | 'default' ) ;
        <158> = 'commit to version control' ;
        <306> = 'commit version control' ;
        <159> = ('next' | 'previous' ) (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <160> = ('switch' | 'close' ) 'split' ;
        <161> = 'vim window' ('right' | 'left' | 'switch' ) ;
        <162> = ('charm' | 'window' ) 'split vertical' ;
        <307> = 'split vertical' ;
        <163> = 'go to' ('class' | 'file' | 'file structure' | 'project settings' | 'symbol' | 'declaration' | 'implementation' | 'type declaration' | 'usages' | 'action' ) ;
        <164> = 'return from jump' ;
        <165> = 'symbol preview' ;
        <166> = 'version control popup' ;
        <167> = 'Recent files popup' ;
        <168> = 'File structure popup' ;
        <169> = 'File structure view' ;
        <170> = ('project' | 'structure' ) 'view' ;
        <171> = 'Show navigation bar' ;
        <172> = 'quick definition lookup' ;
        <173> = 'charm Switch tab' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <308> = 'charm Switch tab' ;
        <174> = 'Charm back change' ;
        <175> = 'Select current file or symbol' ;
        <176> = 'Toggle bookmark' ;
        <177> = 'Toggle bookmark with mnemonic' ;
        <178> = 'Go to numbered bookmark' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <179> = 'Show bookmarks' ;
        <180> = 'Find usages' ;
        <181> = 'Find usages in file' ;
        <182> = 'Highlight usages in file' ;
        <183> = 'Rename' ;
        <184> = 'charm' ('settings' | 'run console' | 'manage tasks' | 'last tool' | 'list tools' | 'run program' ) ;
        <185> = 'charm show tool' ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9) ;
        <186> = 'Hide window' ;
        <187> = ('show' | 'hide' ) ('all' | 'side' ) ('tools' | 'windows' ) ;
        <188> = ('tool' | 'window' ) 'close' ;
        <189> = 'Show possible actions' ;
        <190> = 'complete' ;
        <191> = 'Show error description' ;
        <192> = ('expand' | 'collapse' ) ('all' ) ;
        <309> = ('expand' | 'collapse' ) ;
        <193> = 'comment line' ;
        <194> = ('indent' | 'auto indent' | 'comment' ) 'the next' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) 'lines' ;
        <310> = ('indent' | 'auto indent' | 'comment' ) 'next' (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) 'lines' ;
        <195> = 'surround with' ;
        <196> = ('replace normal' | 'find in path' | 'replace in path' | 'structure find' | 'structure replace' ) ;
        <197> = 'Select successively increasing code blocks' ;
        <198> = 'Decrease current selection to previous state' ;
        <199> = 'Select till code block' ('end' | 'start' ) ;
        <200> = 'Save all' ;
        <201> = 'Inspect file' ;
        <202> = 'Optimize imports' ;
        <203> = 'Select configuration and run' ;
        <204> = 'Select configuration and debug' ;
        <205> = 'Debug' ;
        <206> = 'Run context configuration from editor' ;
        <207> = 'Step over' ;
        <208> = 'Step into' ;
        <209> = 'Step out' ;
        <210> = 'Run to cursor' ;
        <211> = 'Evaluate expression' ;
        <212> = 'Quick evaluate expression' ;
        <213> = 'Resume program' ;
        <214> = 'Toggle breakpoint' ;
        <215> = 'View breakpoints' ;
        <216> = 'Go to' ('previous' | 'next' ) 'method' ;
        <217> = 'Move to code block' ('end' | 'start' ) ;
        <218> = 'Type hierarchy' ;
        <219> = 'Method hierarchy' ;
        <220> = 'Call hierarchy' ;
        <221> = ('Next' | 'previous' ) 'highlighted error' ;
        <222> = 'Safe Delete' ;
        <223> = 'Change Signature' ;
        <224> = 'Inline' ;
        <225> = 'Extract' ('Method' | 'Variable' | 'Field' | 'Constant' | 'Parameter' ) ;
        <226> = 'Add to Favorites' ;
        <227> = 'Quick switch current scheme' ;
        <228> = 'add item' ;
        <229> = 'search everywhere' ;
        <230> = 'clean compile files' ;
        <231> = 'Complete statement' ;
        <232> = 'Parameter info' ;
        <233> = 'Quick documentation lookup' ;
        <234> = 'External Doc' ;
        <235> = 'Generate code' ;
        <236> = 'Override methods' ;
        <237> = 'Reformat code' ;
        <238> = 'Auto indent line' ;
        <239> = 'Copy to clipboard' ;
        <240> = 'Paste from clipboard' ;
        <241> = 'Paste from recent buffers' ;
        <242> = 'Duplicate current line or selected block' ;
        <243> = 'Smart line split' ;
        <244> = 'Toggle case for word at caret or selected block' ;
        <245> = 'find' ('this' | 'next' | 'back' ) ;
        <311> = 'find' ;
        <246> = 'select' ('next' | 'all' | 'unselect' ) ;
        <247> = 'Commit project to VCS' ;
        <248> = 'Update project from VCS' ;
        <249> = 'View recent changes' ;
        <250> = 'quick popup' ;
        <251> = 'Surround with Live Template' ;
        <252> = 'Insert Live Template' ;
        <line_modcharm> = ('expand' | 'collapse' | 'comment' | 'auto indent' ) ;
        <253> = 'charm line' <line_modcharm> <0to9> ;
        <312> = 'charm line' <0to9> ;
        <254> = 'charm line' <line_modcharm> <0to9> <0to9> ;
        <313> = 'charm line' <0to9> <0to9> ;
        <255> = 'charm line' <line_modcharm> <0to9> <0to9> <0to9> ;
        <314> = 'charm line' <0to9> <0to9> <0to9> ;
        <256> = 'charm line' <line_modcharm> <0to9> <0to9> <0to9> <0to9> ;
        <315> = 'charm line' <0to9> <0to9> <0to9> <0to9> ;
        <any> = <1>|<2>|<3>|<4>|<5>|<257>|<6>|<258>|<7>|<259>|<8>|<260>|<9>|<10>|<11>|<261>|<12>|<262>|<13>|<263>|<14>|<15>|<264>|<16>|<265>|<17>|<266>|<18>|<268>|<267>|<269>|<19>|<270>|<20>|<271>|<21>|<22>|<23>|<24>|<25>|<26>|<27>|<28>|<29>|<273>|<272>|<274>|<30>|<276>|<275>|<277>|<31>|<278>|<32>|<280>|<279>|<281>|<33>|<34>|<35>|<36>|<37>|<38>|<39>|<40>|<282>|<41>|<42>|<283>|<43>|<44>|<284>|<45>|<46>|<47>|<285>|<48>|<49>|<289>|<50>|<290>|<51>|<291>|<52>|<292>|<53>|<54>|<296>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<297>|<71>|<72>|<73>|<74>|<75>|<76>|<77>|<78>|<79>|<80>|<81>|<82>|<83>|<84>|<298>|<85>|<86>|<87>|<88>|<299>|<89>|<90>|<91>|<92>|<93>|<94>|<95>|<96>|<97>|<98>|<99>|<100>|<101>|<102>|<103>|<104>|<105>|<106>|<107>|<108>|<109>|<110>|<111>|<112>|<113>|<114>|<115>|<116>|<117>|<118>|<119>|<120>|<121>|<122>|<123>|<124>|<125>|<126>|<127>|<128>|<129>|<130>|<131>|<132>|<133>|<134>|<135>|<136>|<137>|<138>|<139>|<140>|<141>|<142>|<143>|<144>|<145>|<146>|<302>|<301>|<300>|<147>|<148>|<149>|<150>|<151>|<303>|<152>|<153>|<154>|<155>|<156>|<304>|<157>|<305>|<158>|<306>|<159>|<160>|<161>|<162>|<307>|<163>|<164>|<165>|<166>|<167>|<168>|<169>|<170>|<171>|<172>|<173>|<308>|<174>|<175>|<176>|<177>|<178>|<179>|<180>|<181>|<182>|<183>|<184>|<185>|<186>|<187>|<188>|<189>|<190>|<191>|<192>|<309>|<193>|<194>|<310>|<195>|<196>|<197>|<198>|<199>|<200>|<201>|<202>|<203>|<204>|<205>|<206>|<207>|<208>|<209>|<210>|<211>|<212>|<213>|<214>|<215>|<216>|<217>|<218>|<219>|<220>|<221>|<222>|<223>|<224>|<225>|<226>|<227>|<228>|<229>|<230>|<231>|<232>|<233>|<234>|<235>|<236>|<237>|<238>|<239>|<240>|<241>|<242>|<243>|<244>|<245>|<311>|<246>|<247>|<248>|<249>|<250>|<251>|<252>|<253>|<312>|<254>|<313>|<255>|<314>|<256>|<315>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        # Return if wrong application
        window = matchWindow(moduleInfo,'pycharm','')
        if not window: return None
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                try:
                    self.activate(rule,window)
                except BadWindow:
                    pass

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # <key> 'Here'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 21, '<key> \'Here\'', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_3(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 23, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 36, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_257(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 36, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_258(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_259(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_260(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    def get_0to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_2to9(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_1to30(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '{b}'
        elif word == 'Right':
            list_buffer += '{w}'
        return list_buffer

    def get_top_bottom(self, list_buffer, functional, word):
        if word == 'Top':
            list_buffer += '{Shift+h}'
        elif word == 'Bottom':
            list_buffer += '{Shift+l}'
        elif word == 'Middle':
            list_buffer += '{Shift+m}'
        return list_buffer

    # (1..30) <direction>
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_direction(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 26, '(1..30) <direction>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') ('Char' | '1' | 'One')
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_10(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 27, '(\'Change\' | \'Copy\') (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back 1'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_11(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 28, '(\'Change\' | \'Copy\') \'Back 1\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back'
    def gotResults_261(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_261(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 28, '(\'Change\' | \'Copy\') \'Back\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30> 'Chars'
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 29, '(\'Change\' | \'Copy\') <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') <1to30>
    def gotResults_262(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 29, '(\'Change\' | \'Copy\') <1to30>', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30> 'Chars'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 30, '(\'Change\' | \'Copy\') \'Back\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # ('Change' | 'Copy') 'Back' <1to30>
    def gotResults_263(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            if word == 'Change':
                top_buffer += '{c}'
            elif word == 'Copy':
                top_buffer += '{y}'
            top_buffer += 'h'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 30, '(\'Change\' | \'Copy\') \'Back\' <1to30>', e)
            self.firstWord = -1

    # 'Kill' ('Char' | '1' | 'One')
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_14(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 31, '\'Kill\' (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # 'Kill Back 1'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_15(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 32, '\'Kill Back 1\'', e)
            self.firstWord = -1

    # 'Kill Back'
    def gotResults_264(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_264(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 32, '\'Kill Back\'', e)
            self.firstWord = -1

    # 'Kill' <1to30> 'Chars'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 33, '\'Kill\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill' <1to30>
    def gotResults_265(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 33, '\'Kill\' <1to30>', e)
            self.firstWord = -1

    # 'Kill Back' <1to30> 'Chars'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 34, '\'Kill Back\' <1to30> \'Chars\'', e)
            self.firstWord = -1

    # 'Kill Back' <1to30>
    def gotResults_266(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 34, '\'Kill Back\' <1to30>', e)
            self.firstWord = -1

    # 'Change case' ('back') <1to30>
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                when_value += '1'
            if when_value != "":
                when_value2 = ''
                word = fullResults[2 + self.firstWord][0]
                when_value2 = self.get_1to30(when_value2, True, word)
                if when_value2 != "":
                    top_buffer += '{Left_'
                    word = fullResults[2 + self.firstWord][0]
                    top_buffer = self.get_1to30(top_buffer, False, word)
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_1to30(when_value, True, word)
            if when_value != "":
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_1to30(top_buffer, False, word)
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\' (\'back\') <1to30>', e)
            self.firstWord = -1

    # 'Change case' ('back')
    def gotResults_268(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                when_value += '1'
            if when_value != "":
                when_value2 = ''
                when_value2 += ''
                if when_value2 != "":
                    top_buffer += '{Left_'
                    top_buffer += ''
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_268(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\' (\'back\')', e)
            self.firstWord = -1

    # 'Change case' <1to30>
    def gotResults_267(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                when_value2 = ''
                word = fullResults[1 + self.firstWord][0]
                when_value2 = self.get_1to30(when_value2, True, word)
                if when_value2 != "":
                    top_buffer += '{Left_'
                    word = fullResults[1 + self.firstWord][0]
                    top_buffer = self.get_1to30(top_buffer, False, word)
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_1to30(when_value, True, word)
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_1to30(top_buffer, False, word)
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\' <1to30>', e)
            self.firstWord = -1

    # 'Change case'
    def gotResults_269(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                when_value2 = ''
                when_value2 += ''
                if when_value2 != "":
                    top_buffer += '{Left_'
                    top_buffer += ''
                    top_buffer += '}'
                else:
                    top_buffer += '{Left}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ''
                top_buffer += '~'
            else:
                top_buffer += '~'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_269(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 35, '\'Change case\'', e)
            self.firstWord = -1

    # 'One Word'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 38, '\'One Word\'', e)
            self.firstWord = -1

    # 'Word'
    def gotResults_270(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_270(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 38, '\'Word\'', e)
            self.firstWord = -1

    # 'Back One Word'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 39, '\'Back One Word\'', e)
            self.firstWord = -1

    # 'Back Word'
    def gotResults_271(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_271(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 39, '\'Back Word\'', e)
            self.firstWord = -1

    # <1to30> 'Words'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 40, '<1to30> \'Words\'', e)
            self.firstWord = -1

    # 'Back' <1to30> 'Words'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 41, '\'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Word'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 42, '<edit_mode> \'Word\'', e)
            self.firstWord = -1

    # <edit_mode> <1to30> 'Words'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 43, '<edit_mode> <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back Word'
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 44, '<edit_mode> \'Back Word\'', e)
            self.firstWord = -1

    # <edit_mode> 'Back' <1to30> 'Words'
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += 'b'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 45, '<edit_mode> \'Back\' <1to30> \'Words\'', e)
            self.firstWord = -1

    # <edit_mode> 'Next Word'
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'w'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += 'w'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 46, '<edit_mode> \'Next Word\'', e)
            self.firstWord = -1

    def get_line_actions(self, list_buffer, functional, word):
        if word == 'Move to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.m'
        elif word == 'Copy to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.co'
        elif word == 'Change':
            list_buffer += 'cc'
        elif word == 'Kill':
            list_buffer += 'dd'
        elif word == 'Copy':
            list_buffer += 'yy'
        elif word == 'Sub':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.s///{Left_2}'
        elif word == 'Duplicate':
            list_buffer += 'yyp'
        elif word == 'Start':
            list_buffer += '\\^i'
        elif word == 'Append':
            list_buffer += 'i{end}'
        elif word == 'beginning':
            list_buffer += '20li'
        elif word == 'middle':
            list_buffer += '40li'
        elif word == 'near the end':
            list_buffer += '60li'
        elif word == 'New Here':
            list_buffer += 'i{enter}'
        elif word == 'New insert':
            list_buffer += 'o'
        elif word == 'New Back':
            list_buffer += 'O'
        elif word == 'Append semicolon':
            list_buffer += '$i;'
        return list_buffer

    def get_edit_mode(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += '{c}'
        elif word == 'Kill':
            list_buffer += '{d}'
        elif word == 'Copy':
            list_buffer += '{y}'
        return list_buffer

    # <line_actions> 'Line'
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_line_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 58, '<line_actions> \'Line\'', e)
            self.firstWord = -1

    # 'Swap' ('Back' | 'Next') 'Line'
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            else:
                top_buffer += ''
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_29(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 59, '\'Swap\' (\'Back\' | \'Next\') \'Line\'', e)
            self.firstWord = -1

    # 'Swap' ('Back' | 'Next')
    def gotResults_273(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            else:
                top_buffer += ''
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_273(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 59, '\'Swap\' (\'Back\' | \'Next\')', e)
            self.firstWord = -1

    # 'Swap Line'
    def gotResults_272(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += ''
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_272(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 59, '\'Swap Line\'', e)
            self.firstWord = -1

    # 'Swap'
    def gotResults_274(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += ''
            top_buffer += 'ddp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_274(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 59, '\'Swap\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Line Here'
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 60, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Line Here\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Line'
    def gotResults_276(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 60, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Line\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End') 'Here'
    def gotResults_275(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 60, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\') \'Here\'', e)
            self.firstWord = -1

    # <edit_mode> ('Beginning' | 'Start' | 'End')
    def gotResults_277(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Beginning':
                when_value += '0'
            elif word == 'Start':
                when_value += '^'
            elif word == 'End':
                when_value += '$'
            if when_value != "":
                word = fullResults[1 + self.firstWord][0]
                if word == 'Beginning':
                    top_buffer += '0'
                elif word == 'Start':
                    top_buffer += '^'
                elif word == 'End':
                    top_buffer += '$'
            else:
                top_buffer += '$'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 60, '<edit_mode> (\'Beginning\' | \'Start\' | \'End\')', e)
            self.firstWord = -1

    # 'Blank' ('back' | 'insert') 'Line'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                top_buffer += 'O{down}'
            elif word == 'insert':
                top_buffer += 'o{up}'
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_31(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 61, '\'Blank\' (\'back\' | \'insert\') \'Line\'', e)
            self.firstWord = -1

    # 'Blank' ('back' | 'insert')
    def gotResults_278(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'back':
                top_buffer += 'O{down}'
            elif word == 'insert':
                top_buffer += 'o{up}'
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_278(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 61, '\'Blank\' (\'back\' | \'insert\')', e)
            self.firstWord = -1

    # 'Join' ('Back' | 'Next') 'Line'
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_32(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 62, '\'Join\' (\'Back\' | \'Next\') \'Line\'', e)
            self.firstWord = -1

    # 'Join' ('Back' | 'Next')
    def gotResults_280(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Back':
                when_value += 'Up'
            elif word == 'Next':
                when_value += 'Space'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Back':
                    top_buffer += 'Up'
                elif word == 'Next':
                    top_buffer += 'Space'
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_280(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 62, '\'Join\' (\'Back\' | \'Next\')', e)
            self.firstWord = -1

    # 'Join Line'
    def gotResults_279(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_279(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 62, '\'Join Line\'', e)
            self.firstWord = -1

    # 'Join'
    def gotResults_281(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += '}'
            top_buffer += 'J'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_281(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 62, '\'Join\'', e)
            self.firstWord = -1

    def get_relative_range_actions(self, list_buffer, functional, word):
        if word == 'Change':
            list_buffer += 'cc'
        elif word == 'Kill':
            list_buffer += 'dd'
        elif word == 'Copy':
            list_buffer += 'yy'
        elif word == 'Move to':
            list_buffer += 'm'
        elif word == 'Copy to':
            list_buffer += 'co'
        elif word == 'duplicate':
            list_buffer += 'yyp'
        elif word == 'indent':
            list_buffer += '>>g;'
        elif word == 'reverse indent':
            list_buffer += '<<g;'
        return list_buffer

    # <relative_range_actions> ('Next' | 'Back') 'Line'
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            if word == 'Next':
                top_buffer += '+'
            elif word == 'Back':
                top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 74, '<relative_range_actions> (\'Next\' | \'Back\') \'Line\'', e)
            self.firstWord = -1

    # <relative_range_actions> 2..30 'Lines'
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 75, '<relative_range_actions> 2..30 \'Lines\'', e)
            self.firstWord = -1

    # <relative_range_actions> 'Back' 2..30 'Lines'
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Up_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 76, '<relative_range_actions> \'Back\' 2..30 \'Lines\'', e)
            self.firstWord = -1

    def get_relative_range_commands(self, list_buffer, functional, word):
        if word == 'Sub':
            list_buffer += 's///gc{Left_4}'
        elif word == 'Start':
            list_buffer += '{enter}i'
        elif word == 'Append':
            list_buffer += '{enter}i{end}'
        elif word == 'copy here':
            list_buffer += 'co.'
        elif word == 'comment':
            list_buffer += 's/^/#/{enter}'
        elif word == 'remove comment':
            list_buffer += 's/#//{enter}'
        return list_buffer

    # <relative_range_commands> ('Next' | 'Back') 'Line'
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            if word == 'Next':
                top_buffer += '+'
            elif word == 'Back':
                top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ':'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 82, '<relative_range_commands> (\'Next\' | \'Back\') \'Line\'', e)
            self.firstWord = -1

    # <relative_range_commands> 2..30 'Lines'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ':.,+'
            eval_template_arg1 = ''
            eval_template_arg1 += '%a-1'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 += self.convert_number_word(word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 83, '<relative_range_commands> 2..30 \'Lines\'', e)
            self.firstWord = -1

    # <relative_range_commands> 'Back' 2..30 'Lines'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ':-'
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += ',-1'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_relative_range_commands(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 84, '<relative_range_commands> \'Back\' 2..30 \'Lines\'', e)
            self.firstWord = -1

    def get_range_actions(self, list_buffer, functional, word):
        if word == 'Move to':
            list_buffer += 'm'
        elif word == 'Copy to':
            list_buffer += 'co'
        elif word == 'Change':
            list_buffer += 'c'
        elif word == 'Kill':
            list_buffer += 'd'
        elif word == 'Copy':
            list_buffer += 'y'
        elif word == 'Sub':
            list_buffer += 's///'
        elif word == 'copy here':
            list_buffer += 'co.'
        elif word == 'comment':
            list_buffer += 's/^/#/'
        elif word == 'remove comment':
            list_buffer += 's/#//'
        return list_buffer

    # <range_actions> 'Range'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_range_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 91, '<range_actions> \'Range\'', e)
            self.firstWord = -1

    def get_insert(self, list_buffer, functional, word):
        if word == 'insert':
            list_buffer += 'I'
        elif word == 'append':
            list_buffer += 'A'
        return list_buffer

    # 'Flow' ('Start' | 'Append') <insert>
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'Append':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_insert(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 95, '\'Flow\' (\'Start\' | \'Append\') <insert>', e)
            self.firstWord = -1

    # 'Flow' ('Start' | 'Append')
    def gotResults_282(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Start':
                top_buffer += 'gg'
            elif word == 'Append':
                top_buffer += 'G'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '20'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_282(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 95, '\'Flow\' (\'Start\' | \'Append\')', e)
            self.firstWord = -1

    # <edit_mode> ('Flow Here' | 'Flow All' | 'Back Flow Here')
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            if word == 'Flow Here':
                top_buffer += '.,$'
            elif word == 'Flow All':
                top_buffer += '0,$'
            elif word == 'Back Flow Here':
                top_buffer += '0,.'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_edit_mode(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 96, '<edit_mode> (\'Flow Here\' | \'Flow All\' | \'Back Flow Here\')', e)
            self.firstWord = -1

    # ('Indent' | 'reverse indent') ('Line' | 'Range') 1..9
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'Indent':
                        top_buffer += '>'
                    elif word == 'reverse indent':
                        top_buffer += '<'
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'Line':
                        top_buffer += '{enter}'
                    elif word == 'Range':
                        top_buffer += '{Left}'
            else:
                top_buffer += '{esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
                word = fullResults[0 + self.firstWord][0]
                if word == 'Indent':
                    top_buffer += '>'
                elif word == 'reverse indent':
                    top_buffer += '<'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Line':
                    top_buffer += '{enter}'
                elif word == 'Range':
                    top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_42(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 99, '(\'Indent\' | \'reverse indent\') (\'Line\' | \'Range\') 1..9', e)
            self.firstWord = -1

    # ('Indent' | 'reverse indent') ('Line' | 'Range')
    def gotResults_283(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    word = fullResults[0 + self.firstWord][0]
                    if word == 'Indent':
                        top_buffer += '>'
                    elif word == 'reverse indent':
                        top_buffer += '<'
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'Line':
                        top_buffer += '{enter}'
                    elif word == 'Range':
                        top_buffer += '{Left}'
            else:
                top_buffer += '{esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
                word = fullResults[0 + self.firstWord][0]
                if word == 'Indent':
                    top_buffer += '>'
                elif word == 'reverse indent':
                    top_buffer += '<'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Line':
                    top_buffer += '{enter}'
                elif word == 'Range':
                    top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_283(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 99, '(\'Indent\' | \'reverse indent\') (\'Line\' | \'Range\')', e)
            self.firstWord = -1

    def get_sub_action(self, list_buffer, functional, word):
        if word == 'all':
            list_buffer += '%s'
        elif word == 'here':
            list_buffer += '.,$s'
        elif word == 'back here':
            list_buffer += '0,.s'
        return list_buffer

    # ('sub' | 'substitute') <sub_action>
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_sub_action(top_buffer, False, word)
            top_buffer += '///gc'
            limit = ''
            limit += '4'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 102, '(\'sub\' | \'substitute\') <sub_action>', e)
            self.firstWord = -1

    # 'edit' ('undo' | 'redo') <2to9>
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_2to9(when_value, True, word)
            if when_value != "":
                limit2 = ''
                word = fullResults[2 + self.firstWord][0]
                limit2 = self.get_2to9(limit2, True, word)
                for i in range(to_long(limit2)):
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'undo':
                        top_buffer += 'u'
                    elif word == 'redo':
                        top_buffer += '{ctrl+r}'
            else:
                word = fullResults[1 + self.firstWord][0]
                if word == 'undo':
                    top_buffer += 'u'
                elif word == 'redo':
                    top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 105, '\'edit\' (\'undo\' | \'redo\') <2to9>', e)
            self.firstWord = -1

    # 'edit' ('undo' | 'redo')
    def gotResults_284(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    word = fullResults[1 + self.firstWord][0]
                    if word == 'undo':
                        top_buffer += 'u'
                    elif word == 'redo':
                        top_buffer += '{ctrl+r}'
            else:
                word = fullResults[1 + self.firstWord][0]
                if word == 'undo':
                    top_buffer += 'u'
                elif word == 'redo':
                    top_buffer += '{ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_284(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 105, '\'edit\' (\'undo\' | \'redo\')', e)
            self.firstWord = -1

    # ('change') ('inner' | 'outer') ('brackets' | 'braces' | 'square brackets')
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 't'
            word = fullResults[2 + self.firstWord][0]
            if word == 'brackets':
                top_buffer += '('
            elif word == 'braces':
                top_buffer += '{'
            elif word == 'square brackets':
                top_buffer += '['
            top_buffer += '{Right 2}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'vi'
            word = fullResults[2 + self.firstWord][0]
            if word == 'brackets':
                top_buffer += '('
            elif word == 'braces':
                top_buffer += '{'
            elif word == 'square brackets':
                top_buffer += '['
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_45(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 110, '(\'change\') (\'inner\' | \'outer\') (\'brackets\' | \'braces\' | \'square brackets\')', e)
            self.firstWord = -1

    # 'Start macro'
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}qz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_46(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 113, '\'Start macro\'', e)
            self.firstWord = -1

    # 'Repeat macro' 1..9 'times'
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '{shift+'
            top_buffer += '\''
            top_buffer += '}z'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_47(words[3:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 115, '\'Repeat macro\' 1..9 \'times\'', e)
            self.firstWord = -1

    # 'Repeat macro'
    def gotResults_285(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ''
            top_buffer += '{shift+'
            top_buffer += '\''
            top_buffer += '}z'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_285(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 115, '\'Repeat macro\'', e)
            self.firstWord = -1

    def get_text_actions(self, list_buffer, functional, word):
        if word == 'Paste':
            list_buffer += 'p'
        elif word == 'Paste Back':
            list_buffer += 'P'
        elif word == 'Insert':
            list_buffer += 'i'
        elif word == 'Append here':
            list_buffer += 'a'
        elif word == 'Append':
            list_buffer += 'A'
        elif word == 'Substitute':
            list_buffer += 's'
        elif word == 'Replace':
            list_buffer += 'R'
        elif word == 'diff push':
            list_buffer += 'dp'
        elif word == 'diff pull':
            list_buffer += 'do'
        elif word == 'diff next':
            list_buffer += '\\]c'
        elif word == 'diff back':
            list_buffer += '\\[c'
        elif word == 'Format':
            list_buffer += 'Q'
        elif word == 'Normal mode':
            pass  # no actions
        elif word == 'visual mode':
            list_buffer += '{ctrl+v}'
        return list_buffer

    # (('Paste' | 'Paste Back' | 'Insert' | 'Append here' | 'Append' | 'Substitute' | 'Replace' | 'diff push' | 'diff pull' | 'diff next' | 'diff back' | 'Format' | 'Normal mode' | 'visual mode'))
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Paste':
                top_buffer += 'p'
            elif word == 'Paste Back':
                top_buffer += 'P'
            elif word == 'Insert':
                top_buffer += 'i'
            elif word == 'Append here':
                top_buffer += 'a'
            elif word == 'Append':
                top_buffer += 'A'
            elif word == 'Substitute':
                top_buffer += 's'
            elif word == 'Replace':
                top_buffer += 'R'
            elif word == 'diff push':
                top_buffer += 'dp'
            elif word == 'diff pull':
                top_buffer += 'do'
            elif word == 'diff next':
                top_buffer += '\\]c'
            elif word == 'diff back':
                top_buffer += '\\[c'
            elif word == 'Format':
                top_buffer += 'Q'
            elif word == 'Normal mode':
                pass  # no actions
            elif word == 'visual mode':
                top_buffer += '{ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 122, '((\'Paste\' | \'Paste Back\' | \'Insert\' | \'Append here\' | \'Append\' | \'Substitute\' | \'Replace\' | \'diff push\' | \'diff pull\' | \'diff next\' | \'diff back\' | \'Format\' | \'Normal mode\' | \'visual mode\'))', e)
            self.firstWord = -1

    def get_line_mod(self, list_buffer, functional, word):
        if word == 'Start':
            list_buffer += 'zzI'
        elif word == 'Append':
            list_buffer += 'zzA'
        elif word == 'Sub':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += 's///{Left_2}'
        elif word == 'Scroll to bottom':
            list_buffer += 'zb'
        elif word == 'Scroll bottom':
            list_buffer += 'zb'
        elif word == 'Scroll to top':
            list_buffer += 'zt'
        elif word == 'Scroll top':
            list_buffer += 'zt'
        elif word == 'Scroll to middle':
            list_buffer += 'zz'
        elif word == 'Scroll middle':
            list_buffer += 'zz'
        elif word == 'beginning':
            list_buffer += '20li'
        elif word == 'middlie':
            list_buffer += '40li'
        elif word == 'end':
            list_buffer += '60li'
        elif word == 'New back':
            list_buffer += 'zzO'
        elif word == 'insert':
            list_buffer += 'zzo'
        elif word == 'Change':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.c{enter}'
            list_buffer += '\'v'
        elif word == 'Kill':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.d{enter}'
            list_buffer += '\'v'
        elif word == 'Copy':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.y{enter}'
            list_buffer += '\'v'
        elif word == 'Paste':
            list_buffer += 'p'
            list_buffer += '\'v'
        elif word == 'Paste Back':
            list_buffer += 'P'
            list_buffer += '\'v'
        elif word == 'Move to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.m'
        elif word == 'Copy to':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.co'
        elif word == 'copy here':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '.y{enter}'
            list_buffer += '\'v'
            list_buffer += 'p'
        elif word == 'indent':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '>{enter}'
            list_buffer += '\'v'
        elif word == 'reverse indent':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += '<{enter}'
            list_buffer += '\'v'
        elif word == 'Comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += 's/^/#/{enter}'
            list_buffer += '\'v'
        elif word == 'Remove Comment':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += 's/#//{enter}'
            list_buffer += '\'v'
        elif word == 'Blank back':
            list_buffer += 'O{esc}'
            list_buffer += '\'v'
        elif word == 'Blank insert':
            list_buffer += 'o{esc}'
            list_buffer += '\'v'
        return list_buffer

    # 'line' <line_mod> <0to9>
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 153, '\'line\' <line_mod> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9>
    def gotResults_289(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 153, '\'line\' <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9>
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 154, '\'line\' <line_mod> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9>
    def gotResults_290(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 154, '\'line\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9> <0to9>
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 155, '\'line\' <line_mod> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9>
    def gotResults_291(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('vim.vch', 155, '\'line\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <line_mod> <0to9> <0to9> <0to9> <0to9>
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[5 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_mod(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('vim.vch', 156, '\'line\' <line_mod> <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'line' <0to9> <0to9> <0to9> <0to9>
    def gotResults_292(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('vim.vch', 156, '\'line\' <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    def get_navigation_actions(self, list_buffer, functional, word):
        if word == 'List changes':
            list_buffer += ':'
            list_buffer = do_flush(functional, list_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            list_buffer += 'changes'
        elif word == 'back change':
            list_buffer += 'g;'
        elif word == 'Undo jump':
            list_buffer += '``'
        elif word == 'return from':
            list_buffer += '\'\''
        elif word == 'Set mark':
            list_buffer += 'mz'
        elif word == 'Goto mark':
            list_buffer += '\'zi'
        elif word == 'Append back':
            list_buffer += '-'
            list_buffer += '$'
            list_buffer += 'i{Del}'
        elif word == 'Append next':
            list_buffer += '+'
            list_buffer += '$'
            list_buffer += 'i{Del}'
        elif word == 'Start back':
            list_buffer += '-i'
        elif word == 'Start next':
            list_buffer += '+i'
        elif word == 'Match bracket':
            list_buffer += '%'
        elif word == 'Scroll to bottom':
            list_buffer += 'zb'
        elif word == 'Scroll bottom':
            list_buffer += 'zb'
        elif word == 'Scroll to top':
            list_buffer += 'zt'
        elif word == 'Scroll top':
            list_buffer += 'zt'
        elif word == 'Scroll to middle':
            list_buffer += 'zz'
        elif word == 'Scroll middle':
            list_buffer += 'zz'
        return list_buffer

    # (('List changes' | 'back change' | 'Undo jump' | 'return from' | 'Set mark' | 'Goto mark' | 'Append back' | 'Append next' | 'Start back' | 'Start next' | 'Match bracket' | 'Scroll to bottom' | 'Scroll bottom' | 'Scroll to top' | 'Scroll top' | 'Scroll to middle' | 'Scroll middle'))
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'List changes':
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon_arg1 = ''
                dragon_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon_arg1])
                top_buffer += 'changes'
            elif word == 'back change':
                top_buffer += 'g;'
            elif word == 'Undo jump':
                top_buffer += '``'
            elif word == 'return from':
                top_buffer += '\'\''
            elif word == 'Set mark':
                top_buffer += 'mz'
            elif word == 'Goto mark':
                top_buffer += '\'zi'
            elif word == 'Append back':
                top_buffer += '-'
                top_buffer += '$'
                top_buffer += 'i{Del}'
            elif word == 'Append next':
                top_buffer += '+'
                top_buffer += '$'
                top_buffer += 'i{Del}'
            elif word == 'Start back':
                top_buffer += '-i'
            elif word == 'Start next':
                top_buffer += '+i'
            elif word == 'Match bracket':
                top_buffer += '%'
            elif word == 'Scroll to bottom':
                top_buffer += 'zb'
            elif word == 'Scroll bottom':
                top_buffer += 'zb'
            elif word == 'Scroll to top':
                top_buffer += 'zt'
            elif word == 'Scroll top':
                top_buffer += 'zt'
            elif word == 'Scroll to middle':
                top_buffer += 'zz'
            elif word == 'Scroll middle':
                top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_53(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 168, '((\'List changes\' | \'back change\' | \'Undo jump\' | \'return from\' | \'Set mark\' | \'Goto mark\' | \'Append back\' | \'Append next\' | \'Start back\' | \'Start next\' | \'Match bracket\' | \'Scroll to bottom\' | \'Scroll bottom\' | \'Scroll to top\' | \'Scroll top\' | \'Scroll to middle\' | \'Scroll middle\'))', e)
            self.firstWord = -1

    # 'Halfpage' ('Up' | 'Down')
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'Up':
                when_value += 'u'
            elif word == 'Down':
                when_value += 'd'
            if when_value != "":
                top_buffer += '{Ctrl+'
                word = fullResults[1 + self.firstWord][0]
                if word == 'Up':
                    top_buffer += 'u'
                elif word == 'Down':
                    top_buffer += 'd'
                top_buffer += '}'
            else:
                top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_54(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 169, '\'Halfpage\' (\'Up\' | \'Down\')', e)
            self.firstWord = -1

    # 'Halfpage'
    def gotResults_296(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{Ctrl+'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_296(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 169, '\'Halfpage\'', e)
            self.firstWord = -1

    # 'Page' <top_bottom>
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_top_bottom(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 170, '\'Page\' <top_bottom>', e)
            self.firstWord = -1

    # 'Back till' <key>
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'T'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 173, '\'Back till\' <key>', e)
            self.firstWord = -1

    # 'Till' <key>
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 't'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 174, '\'Till\' <key>', e)
            self.firstWord = -1

    # 'Till next'
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ';'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 175, '\'Till next\'', e)
            self.firstWord = -1

    # 'Search' <_anything>
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 176, '\'Search\' <_anything>', e)
            self.firstWord = -1

    # 'Search go' <_anything>
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/\\c'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 177, '\'Search go\' <_anything>', e)
            self.firstWord = -1

    # 'clear Search'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '/zzz'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_61(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 178, '\'clear Search\'', e)
            self.firstWord = -1

    # 'Make'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'make'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 181, '\'Make\'', e)
            self.firstWord = -1

    # 'Vim Update Tag File'
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 182, '\'Vim Update Tag File\'', e)
            self.firstWord = -1

    # 'List errors'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'clist'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 183, '\'List errors\'', e)
            self.firstWord = -1

    # 'Next error'
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'cn'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_65(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 184, '\'Next error\'', e)
            self.firstWord = -1

    # 'back error'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'cp'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 185, '\'back error\'', e)
            self.firstWord = -1

    # 'Save file'
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'w'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 186, '\'Save file\'', e)
            self.firstWord = -1

    # 'Close file'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'q'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 187, '\'Close file\'', e)
            self.firstWord = -1

    # 'Save and close file'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'x'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 188, '\'Save and close file\'', e)
            self.firstWord = -1

    # 'back command' 1..9
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                limit2 = ''
                word = fullResults[1 + self.firstWord][0]
                limit2 += self.convert_number_word(word)
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    top_buffer += ''
                    top_buffer += '{up}{enter}'
            else:
                top_buffer += '{Esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
                top_buffer += ''
                top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_70(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 190, '\'back command\' 1..9', e)
            self.firstWord = -1

    # 'back command'
    def gotResults_297(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                limit2 = ''
                limit2 += ''
                for i in range(to_long(limit2)):
                    top_buffer += '{Esc}'
                    top_buffer += ':'
                    top_buffer = do_flush(False, top_buffer);
                    dragon3_arg1 = ''
                    dragon3_arg1 += '200'
                    call_Dragon('Wait', 'i', [dragon3_arg1])
                    top_buffer += ''
                    top_buffer += '{up}{enter}'
            else:
                top_buffer += '{Esc}'
                top_buffer += ':'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
                top_buffer += ''
                top_buffer += '{up}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_297(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 190, '\'back command\'', e)
            self.firstWord = -1

    # 'Edit another'
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'e '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_71(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 191, '\'Edit another\'', e)
            self.firstWord = -1

    # 'File browser'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'e.'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 192, '\'File browser\'', e)
            self.firstWord = -1

    # 'vim diff split'
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'vert diffsplit '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_73(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 193, '\'vim diff split\'', e)
            self.firstWord = -1

    # 'Insert space'
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_74(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 202, '\'Insert space\'', e)
            self.firstWord = -1

    # 'Insert space after'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{Right}{space}{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_75(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 204, '\'Insert space after\'', e)
            self.firstWord = -1

    # 'Append comment'
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i */'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 206, '\'Append comment\'', e)
            self.firstWord = -1

    # 'Insert line break'
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_77(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 209, '\'Insert line break\'', e)
            self.firstWord = -1

    # 'insert comment'
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'i#'
            top_buffer += '{esc}'
            top_buffer += 'il'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_78(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 210, '\'insert comment\'', e)
            self.firstWord = -1

    # 'Double slash backslash'
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += '\\/\\/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_79(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 211, '\'Double slash backslash\'', e)
            self.firstWord = -1

    # 'reference'
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '-'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '500'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '>'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_80(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 212, '\'reference\'', e)
            self.firstWord = -1

    # 'Function definition'
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef ():'
            top_buffer += '{Left_3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_81(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 213, '\'Function definition\'', e)
            self.firstWord = -1

    # 'Function definition' <_anything>
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        fullResults = combineDictationWords(fullResults)
        opt = 1 + self.firstWord
        if opt >= len(fullResults) or fullResults[opt][1] != 'converted dgndictation':
            fullResults.insert(opt, ['', 'converted dgndictation'])
        try:
            top_buffer = ''
            top_buffer += '{Esc}{Right}'
            top_buffer += 'idef '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += '():'
            top_buffer += '{Left_2}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 214, '\'Function definition\' <_anything>', e)
            self.firstWord = -1

    # 'Show Help'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'help '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 215, '\'Show Help\'', e)
            self.firstWord = -1

    # 'Set setting' ('paste')
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'set '
            word = fullResults[1 + self.firstWord][0]
            if word == 'paste':
                top_buffer += 'paste{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_84(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 216, '\'Set setting\' (\'paste\')', e)
            self.firstWord = -1

    # 'Set setting'
    def gotResults_298(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'set '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_298(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 216, '\'Set setting\'', e)
            self.firstWord = -1

    # 'Set dark background'
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'set bg=dark'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_85(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 217, '\'Set dark background\'', e)
            self.firstWord = -1

    # 'Set light background'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'set bg=light'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_86(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 218, '\'Set light background\'', e)
            self.firstWord = -1

    # 'reload vim config'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'source ~/.vimrc'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 219, '\'reload vim config\'', e)
            self.firstWord = -1

    # 'run this' ('now')
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '!./% '
            word = fullResults[1 + self.firstWord][0]
            if word == 'now':
                top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_88(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 220, '\'run this\' (\'now\')', e)
            self.firstWord = -1

    # 'run this'
    def gotResults_299(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '!./% '
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_299(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 220, '\'run this\'', e)
            self.firstWord = -1

    # 'Split vertical'
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'vsp'
            top_buffer += '{Enter}{Shift+h}{PgUp}'
            top_buffer += '{Ctrl+w}'
            top_buffer += 'l'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_89(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 225, '\'Split vertical\'', e)
            self.firstWord = -1

    def get_window_action(self, list_buffer, functional, word):
        if word == 'left':
            list_buffer += 'h'
        elif word == 'right':
            list_buffer += 'l'
        elif word == 'up':
            list_buffer += 'k'
        elif word == 'down':
            list_buffer += 'j'
        elif word == 'next':
            list_buffer += 'w'
        elif word == 'close':
            list_buffer += 'c'
        return list_buffer

    # 'Vim Window' <window_action>
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+w}'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_window_action(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 227, '\'Vim Window\' <window_action>', e)
            self.firstWord = -1

    # 'Vim Window crop'
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'only'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_91(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 228, '\'Vim Window crop\'', e)
            self.firstWord = -1

    # 'Vim Window make fat'
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'vertical resize +15'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_92(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 229, '\'Vim Window make fat\'', e)
            self.firstWord = -1

    # 'Vim Window make thin'
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'vertical resize -15'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_93(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 230, '\'Vim Window make thin\'', e)
            self.firstWord = -1

    # 'back buffer'
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'bp'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_94(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 233, '\'back buffer\'', e)
            self.firstWord = -1

    # 'Close buffer'
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'bd'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_95(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 234, '\'Close buffer\'', e)
            self.firstWord = -1

    # 'Next buffer'
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'bn'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_96(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 235, '\'Next buffer\'', e)
            self.firstWord = -1

    # 'Switch buffer'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'b#'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 236, '\'Switch buffer\'', e)
            self.firstWord = -1

    # 'List buffers'
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'buffers'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_98(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 237, '\'List buffers\'', e)
            self.firstWord = -1

    # 'numbered buffer' <1to30>
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'b'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 238, '\'numbered buffer\' <1to30>', e)
            self.firstWord = -1

    def get_tab_actions(self, list_buffer, functional, word):
        if word == 'back':
            list_buffer += 'p'
        elif word == 'Close':
            list_buffer += 'c'
        elif word == 'Next':
            list_buffer += 'n'
        elif word == 'List':
            list_buffer += 's'
        elif word == 'Last':
            list_buffer += 'l'
        elif word == 'First':
            list_buffer += 'fir'
        return list_buffer

    # 'vim' <tab_actions> 'tab'
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'tab'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_tab_actions(top_buffer, False, word)
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('vim.vch', 242, '\'vim\' <tab_actions> \'tab\'', e)
            self.firstWord = -1

    # 'vim switch tab' <1to30>
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'tabn '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to30(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('vim.vch', 243, '\'vim switch tab\' <1to30>', e)
            self.firstWord = -1

    # 'vim Tag back'
    def gotResults_102(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'tN{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_102(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 248, '\'vim Tag back\'', e)
            self.firstWord = -1

    # 'vim Tag Jump'
    def gotResults_103(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += '{Ctrl+]}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_103(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 249, '\'vim Tag Jump\'', e)
            self.firstWord = -1

    # 'vim Tag Next'
    def gotResults_104(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'tn{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_104(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 250, '\'vim Tag Next\'', e)
            self.firstWord = -1

    # 'Vim Tag Match'
    def gotResults_105(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'ts{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_105(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 251, '\'Vim Tag Match\'', e)
            self.firstWord = -1

    # 'Vim Tag Return'
    def gotResults_106(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += '{Ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_106(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 252, '\'Vim Tag Return\'', e)
            self.firstWord = -1

    # 'Vim Tag Stack'
    def gotResults_107(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'tags{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_107(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 253, '\'Vim Tag Stack\'', e)
            self.firstWord = -1

    # 'Vim Folds' ('open' | 'close')
    def gotResults_108(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'open':
                top_buffer += 'ctrl'
            elif word == 'close':
                top_buffer += 'shift'
            top_buffer += '+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_108(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 256, '\'Vim Folds\' (\'open\' | \'close\')', e)
            self.firstWord = -1

    # 'Nowrap'
    def gotResults_109(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set nowrap{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_109(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 261, '\'Nowrap\'', e)
            self.firstWord = -1

    # 'setting based'
    def gotResults_110(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}:set paste{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_110(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 262, '\'setting based\'', e)
            self.firstWord = -1

    # 'Edit vim RC'
    def gotResults_111(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'e ~\\.vimrc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_111(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 263, '\'Edit vim RC\'', e)
            self.firstWord = -1

    # 'Reload'
    def gotResults_112(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'source $MYVIMRC'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_112(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 264, '\'Reload\'', e)
            self.firstWord = -1

    # 'all buffers'
    def gotResults_113(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += ':bufdo '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_113(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 265, '\'all buffers\'', e)
            self.firstWord = -1

    # 'command history'
    def gotResults_114(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q:'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_114(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 268, '\'command history\'', e)
            self.firstWord = -1

    # 'pattern match history'
    def gotResults_115(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'q/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_115(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 269, '\'pattern match history\'', e)
            self.firstWord = -1

    # 'histogram debug'
    def gotResults_116(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'i#ifdef DEBUG{enter}fsp_log_debug(shared_data_p->config_p->prog_name_p, {enter}"%s: \\n", __FUNCTION__);{enter}#endif'
            top_buffer += '{Up}{End}'
            limit = ''
            limit += '19'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_116(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 272, '\'histogram debug\'', e)
            self.firstWord = -1

    # 'ifdef' ('debug' | 'trace')
    def gotResults_117(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'ddi#ifdef '
            word = fullResults[1 + self.firstWord][0]
            if word == 'debug':
                top_buffer += 'DEBUG'
            elif word == 'trace':
                top_buffer += 'TRACE'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_117(words[2:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 273, '\'ifdef\' (\'debug\' | \'trace\')', e)
            self.firstWord = -1

    # 'ifdef end'
    def gotResults_118(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            top_buffer += 'o#endif'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_118(words[1:], fullResults)
        except Exception, e:
            handle_error('vim.vch', 274, '\'ifdef end\'', e)
            self.firstWord = -1

    def get_machine(self, list_buffer, functional, word):
        if word == 'release five':
            list_buffer += 'mdl@...'
        elif word == 'release six':
            list_buffer += 'mdl@...'
        elif word == 'P.O. Box':
            list_buffer += 'mdl@...'
        elif word == 'PA install':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian one':
            list_buffer += 'lillibridgem@...'
        elif word == 'build Debian two':
            list_buffer += 'lillibridgem@...'
        elif word == 'build cent toss':
            list_buffer += 'lillibridgem@...'
        elif word == 'build wheezy':
            list_buffer += 'lillibridgem@...'
        elif word == 'metabox one':
            list_buffer += 'lillibridgem@...'
        elif word == 'lark':
            list_buffer += 'mdl@...'
        elif word == 'Embarcadero':
            list_buffer += 'mdl@...'
        elif word == 'remote foil':
            list_buffer += 'mdl@<censored>'
        elif word == 'local foil':
            list_buffer += 'mdl@...'
        return list_buffer

    def get_common_actions(self, list_buffer, functional, word):
        if word == 'edit':
            list_buffer += 'vim'
        elif word == 'source':
            list_buffer += 'source'
        return list_buffer

    # <common_actions> ('vim' | 'bash') 'config'
    def gotResults_119(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_common_actions(top_buffer, False, word)
            top_buffer += ' ~/.'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer += 'rc'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 14, '<common_actions> (\'vim\' | \'bash\') \'config\'', e)
            self.firstWord = -1

    # 'bash history'
    def gotResults_120(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+r}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_120(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 15, '\'bash history\'', e)
            self.firstWord = -1

    # 'break'
    def gotResults_121(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_121(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 16, '\'break\'', e)
            self.firstWord = -1

    # 'break end of file'
    def gotResults_122(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_122(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 17, '\'break end of file\'', e)
            self.firstWord = -1

    # 'escape process'
    def gotResults_123(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}{ctrl+z}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_123(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 18, '\'escape process\'', e)
            self.firstWord = -1

    # ('foreground' | 'background') 'process'
    def gotResults_124(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'foreground':
                top_buffer += 'fg'
            elif word == 'background':
                top_buffer += 'bg'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_124(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 20, '(\'foreground\' | \'background\') \'process\'', e)
            self.firstWord = -1

    # 'double dash'
    def gotResults_125(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '--'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_125(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 21, '\'double dash\'', e)
            self.firstWord = -1

    # 'Bash Tag File Update'
    def gotResults_126(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_126(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 23, '\'Bash Tag File Update\'', e)
            self.firstWord = -1

    # 'make tar'
    def gotResults_127(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -cf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_127(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 24, '\'make tar\'', e)
            self.firstWord = -1

    # 'extract tar'
    def gotResults_128(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'tar -xf '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_128(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 25, '\'extract tar\'', e)
            self.firstWord = -1

    # 'confirm force remove file'
    def gotResults_129(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'rm -r'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_129(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 26, '\'confirm force remove file\'', e)
            self.firstWord = -1

    # 'back directory' 1..9
    def gotResults_130(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '../'
            top_buffer += '{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_130(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 27, '\'back directory\' 1..9', e)
            self.firstWord = -1

    # 'change ownership'
    def gotResults_131(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chown -R tan:tan '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_131(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 28, '\'change ownership\'', e)
            self.firstWord = -1

    # 'change' ('permissions' | 'mode')
    def gotResults_132(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'chmod -R 755 '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_132(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 29, '\'change\' (\'permissions\' | \'mode\')', e)
            self.firstWord = -1

    # 'home root'
    def gotResults_133(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '~/'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_133(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 30, '\'home root\'', e)
            self.firstWord = -1

    # 'enter list'
    def gotResults_134(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{enter}ls{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_134(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 31, '\'enter list\'', e)
            self.firstWord = -1

    # 'change absolute directory'
    def gotResults_135(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'cd -P .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_135(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 32, '\'change absolute directory\'', e)
            self.firstWord = -1

    # 'present working directory'
    def gotResults_136(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pwd'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_136(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 33, '\'present working directory\'', e)
            self.firstWord = -1

    # ('vim' | 'normal' | 'normal brief') 'diff'
    def gotResults_137(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'vim':
                top_buffer += 'vimdiff'
            elif word == 'normal':
                top_buffer += 'diff'
            elif word == 'normal brief':
                top_buffer += 'diff -q'
            top_buffer += ' \\{,\\}{Left_2}{Del}{Left_3}{Del}{Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_137(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 35, '(\'vim\' | \'normal\' | \'normal brief\') \'diff\'', e)
            self.firstWord = -1

    # 'cygwin password'
    def gotResults_138(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '^2A'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_138(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 36, '\'cygwin password\'', e)
            self.firstWord = -1

    # ('sub' | 'SVM') ('checkout' | 'diff' | 'commit' | 'update' | 'remove' | 'checkout bug' | 'log' | 'start bug' | 'status')
    def gotResults_139(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'sub':
                top_buffer += 'sub'
            elif word == 'SVM':
                top_buffer += 'svn'
            top_buffer += ' '
            word = fullResults[1 + self.firstWord][0]
            if word == 'checkout':
                top_buffer += 'checkout'
            elif word == 'diff':
                top_buffer += 'diff'
            elif word == 'commit':
                top_buffer += 'commit'
            elif word == 'update':
                top_buffer += 'update'
            elif word == 'remove':
                top_buffer += 'remove'
            elif word == 'checkout bug':
                top_buffer += 'co'
                top_buffer += '-b'
            elif word == 'log':
                top_buffer += 'log_grep'
            elif word == 'start bug':
                top_buffer += 'start_bug'
            elif word == 'status':
                top_buffer += 'status'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_139(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 37, '(\'sub\' | \'SVM\') (\'checkout\' | \'diff\' | \'commit\' | \'update\' | \'remove\' | \'checkout bug\' | \'log\' | \'start bug\' | \'status\')', e)
            self.firstWord = -1

    # 'start environment' 1..5
    def gotResults_140(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'source $ENV'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '/bin/activate{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_140(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 38, '\'start environment\' 1..5', e)
            self.firstWord = -1

    # 'stop environment'
    def gotResults_141(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'deactivate{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_141(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 39, '\'stop environment\'', e)
            self.firstWord = -1

    # 'Django' ('shell' | 'database shell' | 'sink' | 'sink input' | 'run')
    def gotResults_142(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'python manage.py '
            word = fullResults[1 + self.firstWord][0]
            if word == 'shell':
                top_buffer += 'shell'
            elif word == 'database shell':
                top_buffer += 'dbshell'
            elif word == 'sink':
                top_buffer += 'syncdb'
            elif word == 'sink input':
                top_buffer += 'syncdb < input'
            elif word == 'run':
                top_buffer += 'runserver 127.0.0.1:8100'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_142(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 40, '\'Django\' (\'shell\' | \'database shell\' | \'sink\' | \'sink input\' | \'run\')', e)
            self.firstWord = -1

    # 'pip' ('freeze' | 'completion' | 'install' | 'list' | 'help')
    def gotResults_143(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'pip '
            word = fullResults[1 + self.firstWord][0]
            top_buffer += word
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_143(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 41, '\'pip\' (\'freeze\' | \'completion\' | \'install\' | \'list\' | \'help\')', e)
            self.firstWord = -1

    # 'pip option' ('bash' | 'upgrade' | 'outdated' | 'local' | 'no index' | 'find links')
    def gotResults_144(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' --'
            word = fullResults[1 + self.firstWord][0]
            if word == 'bash':
                top_buffer += 'bash'
            elif word == 'upgrade':
                top_buffer += 'upgrade'
            elif word == 'outdated':
                top_buffer += 'outdated'
            elif word == 'local':
                top_buffer += 'local'
            elif word == 'no index':
                top_buffer += 'no-index'
            elif word == 'find links':
                top_buffer += 'find-links'
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_144(words[2:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 42, '\'pip option\' (\'bash\' | \'upgrade\' | \'outdated\' | \'local\' | \'no index\' | \'find links\')', e)
            self.firstWord = -1

    # 'network stats'
    def gotResults_145(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'netstat -nl{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_145(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 43, '\'network stats\'', e)
            self.firstWord = -1

    def get_show(self, list_buffer, functional, word):
        if word == 'show':
            list_buffer += ''
        elif word == 'show some of':
            list_buffer += ' | head'
        elif word == 'show a lot of':
            list_buffer += ' | head -n 50'
        elif word == 'local show':
            list_buffer += '{ctrl+a}l{ctrl+e}'
        return list_buffer

    def get_desc(self, list_buffer, functional, word):
        if word == 'long':
            list_buffer += '-l'
        elif word == 'full':
            list_buffer += '-A'
        elif word == 'recent':
            list_buffer += '-t'
        elif word == 'recursive':
            list_buffer += '-R'
        elif word == 'human':
            list_buffer += '-h'
        return list_buffer

    # <show> <desc> <desc> <desc> 'directory'
    def gotResults_146(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            word = fullResults[3 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[3 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('UNIX_shell.vch', 58, '<show> <desc> <desc> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> <desc> <desc> 'directory'
    def gotResults_302(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            word = fullResults[2 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[2 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('UNIX_shell.vch', 58, '<show> <desc> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> <desc> 'directory'
    def gotResults_301(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value = self.get_desc(when_value, True, word)
            if when_value != "":
                top_buffer += ' '
                word = fullResults[1 + self.firstWord][0]
                top_buffer = self.get_desc(top_buffer, False, word)
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 58, '<show> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> 'directory'
    def gotResults_300(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += ' '
                top_buffer += ''
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 58, '<show> \'directory\'', e)
            self.firstWord = -1

    # <show> <desc> 'directory'
    def gotResults_147(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_desc(top_buffer, False, word)
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('UNIX_shell.vch', 59, '<show> <desc> \'directory\'', e)
            self.firstWord = -1

    # <show> 'directory'
    def gotResults_148(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ls'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_show(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 60, '<show> \'directory\'', e)
            self.firstWord = -1

    # 'show disk space'
    def gotResults_149(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'df -h .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_149(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 63, '\'show disk space\'', e)
            self.firstWord = -1

    def get_usage(self, list_buffer, functional, word):
        if word == 'usage':
            list_buffer += '-h'
        elif word == 'usage kilobytes':
            list_buffer += ''
        elif word == 'usage megabytes':
            list_buffer += '-m'
        return list_buffer

    # 'show disk' <usage>
    def gotResults_150(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'du '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_usage(top_buffer, False, word)
            top_buffer += ' -s -- "`ls --color=none -A`" .{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 67, '\'show disk\' <usage>', e)
            self.firstWord = -1

    # 'secure login to' <machine>
    def gotResults_151(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 75, '\'secure login to\' <machine>', e)
            self.firstWord = -1

    # 'secure login' <machine>
    def gotResults_303(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'ssh -X '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 75, '\'secure login\' <machine>', e)
            self.firstWord = -1

    # 'S F T P' <machine>
    def gotResults_152(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'sftp '
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_machine(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('UNIX_shell.vch', 78, '\'S F T P\' <machine>', e)
            self.firstWord = -1

    # 'multiple get'
    def gotResults_153(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'mget '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_153(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 82, '\'multiple get\'', e)
            self.firstWord = -1

    # 'local change directory'
    def gotResults_154(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lcd '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_154(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 83, '\'local change directory\'', e)
            self.firstWord = -1

    # 'local working directory'
    def gotResults_155(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += 'lpwd{enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_155(words[1:], fullResults)
        except Exception, e:
            handle_error('UNIX_shell.vch', 85, '\'local working directory\'', e)
            self.firstWord = -1

    def get_scp(self, list_buffer, functional, word):
        if word == 'secure copy':
            list_buffer += 'scp'
        elif word == 'secure recursive copy':
            list_buffer += 'scp -r'
        elif word == 'recursive secure copy':
            list_buffer += 'scp -r'
        elif word == 'secure clone':
            list_buffer += 'scp -p -r'
        return list_buffer

    # 'menu' ('show' | 'select') 0..9
    def gotResults_156(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[2 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{ctrl_'
            word = fullResults[1 + self.firstWord][0]
            if word == 'show':
                extension_arg1 += 'hold'
            elif word == 'select':
                extension_arg1 += 'release'
            extension_arg1 += '}{tab_'
            word = fullResults[1 + self.firstWord][0]
            if word == 'show':
                extension_arg1 += 'hold'
            elif word == 'select':
                extension_arg1 += 'release'
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_156(words[3:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 6, '\'menu\' (\'show\' | \'select\') 0..9', e)
            self.firstWord = -1

    # 'menu' ('show' | 'select')
    def gotResults_304(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            extension_arg1 = ''
            extension_arg1 += '{ctrl_'
            word = fullResults[1 + self.firstWord][0]
            if word == 'show':
                extension_arg1 += 'hold'
            elif word == 'select':
                extension_arg1 += 'release'
            extension_arg1 += '}{tab_'
            word = fullResults[1 + self.firstWord][0]
            if word == 'show':
                extension_arg1 += 'hold'
            elif word == 'select':
                extension_arg1 += 'release'
            extension_arg1 += '}'
            import vocola_ext_keys
            vocola_ext_keys.send_input(extension_arg1)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_304(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 6, '\'menu\' (\'show\' | \'select\')', e)
            self.firstWord = -1

    # 'update' ('from' | 'to') ('version control' | 'default')
    def gotResults_157(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+alt+shift+'
            word = fullResults[2 + self.firstWord][0]
            if word == 'version control':
                top_buffer += '#'
            elif word == 'default':
                top_buffer += 'p'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_157(words[3:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 12, '\'update\' (\'from\' | \'to\') (\'version control\' | \'default\')', e)
            self.firstWord = -1

    # 'update' ('version control' | 'default')
    def gotResults_305(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+alt+shift+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'version control':
                top_buffer += '#'
            elif word == 'default':
                top_buffer += 'p'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_305(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 12, '\'update\' (\'version control\' | \'default\')', e)
            self.firstWord = -1

    # 'commit to version control'
    def gotResults_158(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+alt+k}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_158(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 14, '\'commit to version control\'', e)
            self.firstWord = -1

    # 'commit version control'
    def gotResults_306(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+alt+k}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_306(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 14, '\'commit version control\'', e)
            self.firstWord = -1

    # ('next' | 'previous') 1..9
    def gotResults_159(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[1 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer += '{Alt+'
                word = fullResults[0 + self.firstWord][0]
                if word == 'next':
                    top_buffer += 'Right'
                elif word == 'previous':
                    top_buffer += 'Left'
                top_buffer += '}'
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_159(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 15, '(\'next\' | \'previous\') 1..9', e)
            self.firstWord = -1

    # ('switch' | 'close') 'split'
    def gotResults_160(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+w}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'switch':
                top_buffer += 'n'
            elif word == 'close':
                top_buffer += 'x'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_160(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 18, '(\'switch\' | \'close\') \'split\'', e)
            self.firstWord = -1

    # 'vim window' ('right' | 'left' | 'switch')
    def gotResults_161(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+w}'
            top_buffer += 'n'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_161(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 20, '\'vim window\' (\'right\' | \'left\' | \'switch\')', e)
            self.firstWord = -1

    # ('charm' | 'window') 'split vertical'
    def gotResults_162(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+\\}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_162(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 21, '(\'charm\' | \'window\') \'split vertical\'', e)
            self.firstWord = -1

    # 'split vertical'
    def gotResults_307(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+\\}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_307(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 21, '\'split vertical\'', e)
            self.firstWord = -1

    # 'go to' ('class' | 'file' | 'file structure' | 'project settings' | 'symbol' | 'declaration' | 'implementation' | 'type declaration' | 'usages' | 'action')
    def gotResults_163(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{esc}'
            word = fullResults[1 + self.firstWord][0]
            if word == 'class':
                top_buffer += '{Ctrl+n}'
            elif word == 'file':
                top_buffer += '{Ctrl+Shift+n}'
            elif word == 'file structure':
                top_buffer += '{Ctrl+Alt+Shift+s}'
            elif word == 'project settings':
                top_buffer += '{Ctrl+Alt+Shift+s}'
            elif word == 'symbol':
                top_buffer += '{Ctrl+Alt+Shift+n}'
            elif word == 'declaration':
                top_buffer += '{Ctrl+b}'
            elif word == 'implementation':
                top_buffer += '{Ctrl+Alt+b}'
            elif word == 'type declaration':
                top_buffer += '{Ctrl+Shift+b}'
            elif word == 'usages':
                top_buffer += '{Ctrl+Alt+F7}'
            elif word == 'action':
                top_buffer += '{ctrl+shift+a}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_163(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 36, '\'go to\' (\'class\' | \'file\' | \'file structure\' | \'project settings\' | \'symbol\' | \'declaration\' | \'implementation\' | \'type declaration\' | \'usages\' | \'action\')', e)
            self.firstWord = -1

    # 'return from jump'
    def gotResults_164(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+u}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_164(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 37, '\'return from jump\'', e)
            self.firstWord = -1

    # 'symbol preview'
    def gotResults_165(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+y}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_165(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 38, '\'symbol preview\'', e)
            self.firstWord = -1

    # 'version control popup'
    def gotResults_166(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+`}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_166(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 40, '\'version control popup\'', e)
            self.firstWord = -1

    # 'Recent files popup'
    def gotResults_167(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+shift+e}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_167(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 41, '\'Recent files popup\'', e)
            self.firstWord = -1

    # 'File structure popup'
    def gotResults_168(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F12}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_168(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 42, '\'File structure popup\'', e)
            self.firstWord = -1

    # 'File structure view'
    def gotResults_169(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_169(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 43, '\'File structure view\'', e)
            self.firstWord = -1

    # ('project' | 'structure') 'view'
    def gotResults_170(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+'
            word = fullResults[0 + self.firstWord][0]
            if word == 'project':
                top_buffer += '1'
            elif word == 'structure':
                top_buffer += '7'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_170(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 44, '(\'project\' | \'structure\') \'view\'', e)
            self.firstWord = -1

    # 'Show navigation bar'
    def gotResults_171(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_171(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 45, '\'Show navigation bar\'', e)
            self.firstWord = -1

    # 'quick definition lookup'
    def gotResults_172(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+i}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_172(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 46, '\'quick definition lookup\'', e)
            self.firstWord = -1

    # 'charm Switch tab' 1..9
    def gotResults_173(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            when_value += self.convert_number_word(word)
            if when_value != "":
                top_buffer += '{Ctrl+Tab_'
                word = fullResults[1 + self.firstWord][0]
                top_buffer += self.convert_number_word(word)
                top_buffer += '}'
            else:
                top_buffer += '{ctrl+tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_173(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 49, '\'charm Switch tab\' 1..9', e)
            self.firstWord = -1

    # 'charm Switch tab'
    def gotResults_308(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{Ctrl+Tab_'
                top_buffer += ''
                top_buffer += '}'
            else:
                top_buffer += '{ctrl+tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_308(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 49, '\'charm Switch tab\'', e)
            self.firstWord = -1

    # 'Charm back change'
    def gotResults_174(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_174(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 50, '\'Charm back change\'', e)
            self.firstWord = -1

    # 'Select current file or symbol'
    def gotResults_175(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_175(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 51, '\'Select current file or symbol\'', e)
            self.firstWord = -1

    # 'Toggle bookmark'
    def gotResults_176(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F11}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_176(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 53, '\'Toggle bookmark\'', e)
            self.firstWord = -1

    # 'Toggle bookmark with mnemonic'
    def gotResults_177(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+F11}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_177(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 54, '\'Toggle bookmark with mnemonic\'', e)
            self.firstWord = -1

    # 'Go to numbered bookmark' 0..9
    def gotResults_178(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_178(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 55, '\'Go to numbered bookmark\' 0..9', e)
            self.firstWord = -1

    # 'Show bookmarks'
    def gotResults_179(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+F11}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_179(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 56, '\'Show bookmarks\'', e)
            self.firstWord = -1

    # 'Find usages'
    def gotResults_180(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_180(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 59, '\'Find usages\'', e)
            self.firstWord = -1

    # 'Find usages in file'
    def gotResults_181(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_181(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 60, '\'Find usages in file\'', e)
            self.firstWord = -1

    # 'Highlight usages in file'
    def gotResults_182(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+F7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_182(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 61, '\'Highlight usages in file\'', e)
            self.firstWord = -1

    # 'Rename'
    def gotResults_183(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+F6}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_183(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 62, '\'Rename\'', e)
            self.firstWord = -1

    # 'charm' ('settings' | 'run console' | 'manage tasks' | 'last tool' | 'list tools' | 'run program')
    def gotResults_184(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'settings':
                top_buffer += '{ctrl+shift+f11}'
            elif word == 'run console':
                top_buffer += '{ctrl+shift+f2}'
            elif word == 'manage tasks':
                top_buffer += '{ctrl+shift+'
                top_buffer += ','
                top_buffer += '}'
            elif word == 'last tool':
                top_buffer += '{f12}'
            elif word == 'list tools':
                top_buffer += '{alt+Down}'
            elif word == 'run program':
                top_buffer += '{shift+f10}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_184(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 71, '\'charm\' (\'settings\' | \'run console\' | \'manage tasks\' | \'last tool\' | \'list tools\' | \'run program\')', e)
            self.firstWord = -1

    # 'charm show tool' 0..9
    def gotResults_185(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer += self.convert_number_word(word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_185(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 73, '\'charm show tool\' 0..9', e)
            self.firstWord = -1

    # 'Hide window'
    def gotResults_186(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_186(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 74, '\'Hide window\'', e)
            self.firstWord = -1

    # ('show' | 'hide') ('all' | 'side') ('tools' | 'windows')
    def gotResults_187(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+F12}'
            top_buffer += '{ctrl+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'all':
                top_buffer += 'a'
            elif word == 'side':
                top_buffer += 's'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_187(words[3:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 75, '(\'show\' | \'hide\') (\'all\' | \'side\') (\'tools\' | \'windows\')', e)
            self.firstWord = -1

    # ('tool' | 'window') 'close'
    def gotResults_188(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+'
            word = fullResults[0 + self.firstWord][0]
            if word == 'tool':
                top_buffer += 'shift+'
            elif word == 'window':
                pass  # no actions
            top_buffer += 'f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_188(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 76, '(\'tool\' | \'window\') \'close\'', e)
            self.firstWord = -1

    # 'Show possible actions'
    def gotResults_189(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{esc}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_189(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 79, '\'Show possible actions\'', e)
            self.firstWord = -1

    # 'complete'
    def gotResults_190(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+'
            top_buffer += ' '
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_190(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 80, '\'complete\'', e)
            self.firstWord = -1

    # 'Show error description'
    def gotResults_191(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_191(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 81, '\'Show error description\'', e)
            self.firstWord = -1

    # ('expand' | 'collapse') ('all')
    def gotResults_192(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl'
            word = fullResults[1 + self.firstWord][0]
            if word == 'all':
                top_buffer += '+shift'
            top_buffer += '+'
            word = fullResults[0 + self.firstWord][0]
            if word == 'expand':
                top_buffer += '='
            elif word == 'collapse':
                top_buffer += '-'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_192(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 83, '(\'expand\' | \'collapse\') (\'all\')', e)
            self.firstWord = -1

    # ('expand' | 'collapse')
    def gotResults_309(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl'
            top_buffer += ''
            top_buffer += '+'
            word = fullResults[0 + self.firstWord][0]
            if word == 'expand':
                top_buffer += '='
            elif word == 'collapse':
                top_buffer += '-'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_309(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 83, '(\'expand\' | \'collapse\')', e)
            self.firstWord = -1

    # 'comment line'
    def gotResults_193(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{ctrl+'
            top_buffer += '/'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_193(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 84, '\'comment line\'', e)
            self.firstWord = -1

    # ('indent' | 'auto indent' | 'comment') 'the next' 1..20 'lines'
    def gotResults_194(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
                top_buffer += '{ctrl+'
                word = fullResults[0 + self.firstWord][0]
                if word == 'indent':
                    top_buffer += '>'
                    top_buffer = do_flush(False, top_buffer);
                    dragon2_arg1 = ''
                    dragon2_arg1 += '200'
                    call_Dragon('Wait', 'i', [dragon2_arg1])
                    top_buffer += '>'
                elif word == 'auto indent':
                    top_buffer += 'alt+i'
                elif word == 'comment':
                    top_buffer += '/'
                top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
            if len(words) > 4: self.gotResults_194(words[4:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 85, '(\'indent\' | \'auto indent\' | \'comment\') \'the next\' 1..20 \'lines\'', e)
            self.firstWord = -1

    # ('indent' | 'auto indent' | 'comment') 'next' 1..20 'lines'
    def gotResults_310(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit += self.convert_number_word(word)
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '200'
                call_Dragon('Wait', 'i', [dragon2_arg1])
                top_buffer += '{ctrl+'
                word = fullResults[0 + self.firstWord][0]
                if word == 'indent':
                    top_buffer += '>'
                    top_buffer = do_flush(False, top_buffer);
                    dragon2_arg1 = ''
                    dragon2_arg1 += '200'
                    call_Dragon('Wait', 'i', [dragon2_arg1])
                    top_buffer += '>'
                elif word == 'auto indent':
                    top_buffer += 'alt+i'
                elif word == 'comment':
                    top_buffer += '/'
                top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
            if len(words) > 4: self.gotResults_310(words[4:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 85, '(\'indent\' | \'auto indent\' | \'comment\') \'next\' 1..20 \'lines\'', e)
            self.firstWord = -1

    # 'surround with'
    def gotResults_195(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+alt+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_195(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 87, '\'surround with\'', e)
            self.firstWord = -1

    # ('replace normal' | 'find in path' | 'replace in path' | 'structure find' | 'structure replace')
    def gotResults_196(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'replace normal':
                top_buffer += 'ctrl+alt+shift+r'
            elif word == 'find in path':
                top_buffer += 'ctrl+shift+F'
            elif word == 'replace in path':
                top_buffer += 'ctrl+shift+R'
            elif word == 'structure find':
                pass  # no actions
            elif word == 'structure replace':
                pass  # no actions
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_196(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 88, '(\'replace normal\' | \'find in path\' | \'replace in path\' | \'structure find\' | \'structure replace\')', e)
            self.firstWord = -1

    # 'Select successively increasing code blocks'
    def gotResults_197(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_197(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 90, '\'Select successively increasing code blocks\'', e)
            self.firstWord = -1

    # 'Decrease current selection to previous state'
    def gotResults_198(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+w}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_198(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 91, '\'Decrease current selection to previous state\'', e)
            self.firstWord = -1

    # 'Select till code block' ('end' | 'start')
    def gotResults_199(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'end':
                top_buffer += ']'
            elif word == 'start':
                top_buffer += '['
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_199(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 92, '\'Select till code block\' (\'end\' | \'start\')', e)
            self.firstWord = -1

    # 'Save all'
    def gotResults_200(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+s}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_200(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 94, '\'Save all\'', e)
            self.firstWord = -1

    # 'Inspect file'
    def gotResults_201(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Shift+i}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_201(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 95, '\'Inspect file\'', e)
            self.firstWord = -1

    # 'Optimize imports'
    def gotResults_202(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_202(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 96, '\'Optimize imports\'', e)
            self.firstWord = -1

    # 'Select configuration and run'
    def gotResults_203(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Shift+F10}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_203(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 101, '\'Select configuration and run\'', e)
            self.firstWord = -1

    # 'Select configuration and debug'
    def gotResults_204(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Shift+F9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_204(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 102, '\'Select configuration and debug\'', e)
            self.firstWord = -1

    # 'Debug'
    def gotResults_205(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+F9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_205(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 103, '\'Debug\'', e)
            self.firstWord = -1

    # 'Run context configuration from editor'
    def gotResults_206(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+F10}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_206(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 104, '\'Run context configuration from editor\'', e)
            self.firstWord = -1

    # 'Step over'
    def gotResults_207(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_207(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 105, '\'Step over\'', e)
            self.firstWord = -1

    # 'Step into'
    def gotResults_208(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F7}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_208(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 106, '\'Step into\'', e)
            self.firstWord = -1

    # 'Step out'
    def gotResults_209(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_209(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 107, '\'Step out\'', e)
            self.firstWord = -1

    # 'Run to cursor'
    def gotResults_210(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_210(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 108, '\'Run to cursor\'', e)
            self.firstWord = -1

    # 'Evaluate expression'
    def gotResults_211(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_211(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 109, '\'Evaluate expression\'', e)
            self.firstWord = -1

    # 'Quick evaluate expression'
    def gotResults_212(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_212(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 110, '\'Quick evaluate expression\'', e)
            self.firstWord = -1

    # 'Resume program'
    def gotResults_213(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{F9}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_213(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 111, '\'Resume program\'', e)
            self.firstWord = -1

    # 'Toggle breakpoint'
    def gotResults_214(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_214(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 112, '\'Toggle breakpoint\'', e)
            self.firstWord = -1

    # 'View breakpoints'
    def gotResults_215(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+F8}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_215(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 113, '\'View breakpoints\'', e)
            self.firstWord = -1

    # 'Go to' ('previous' | 'next') 'method'
    def gotResults_216(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'previous':
                top_buffer += 'Up'
            elif word == 'next':
                top_buffer += 'Down'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
            if len(words) > 3: self.gotResults_216(words[3:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 117, '\'Go to\' (\'previous\' | \'next\') \'method\'', e)
            self.firstWord = -1

    # 'Move to code block' ('end' | 'start')
    def gotResults_217(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'end':
                top_buffer += ']'
            elif word == 'start':
                top_buffer += '['
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_217(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 118, '\'Move to code block\' (\'end\' | \'start\')', e)
            self.firstWord = -1

    # 'Type hierarchy'
    def gotResults_218(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+h}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_218(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 119, '\'Type hierarchy\'', e)
            self.firstWord = -1

    # 'Method hierarchy'
    def gotResults_219(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+h}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_219(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 120, '\'Method hierarchy\'', e)
            self.firstWord = -1

    # 'Call hierarchy'
    def gotResults_220(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+h}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_220(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 121, '\'Call hierarchy\'', e)
            self.firstWord = -1

    # ('Next' | 'previous') 'highlighted error'
    def gotResults_221(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Next':
                top_buffer += 'f2'
            elif word == 'previous':
                top_buffer += 'shift+f2'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_221(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 122, '(\'Next\' | \'previous\') \'highlighted error\'', e)
            self.firstWord = -1

    # 'Safe Delete'
    def gotResults_222(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Delete}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_222(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 126, '\'Safe Delete\'', e)
            self.firstWord = -1

    # 'Change Signature'
    def gotResults_223(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+F6}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_223(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 127, '\'Change Signature\'', e)
            self.firstWord = -1

    # 'Inline'
    def gotResults_224(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+n}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_224(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 128, '\'Inline\'', e)
            self.firstWord = -1

    # 'Extract' ('Method' | 'Variable' | 'Field' | 'Constant' | 'Parameter')
    def gotResults_225(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+'
            word = fullResults[1 + self.firstWord][0]
            if word == 'Method':
                top_buffer += 'M'
            elif word == 'Variable':
                top_buffer += 'V'
            elif word == 'Field':
                top_buffer += 'F'
            elif word == 'Constant':
                top_buffer += 'C'
            elif word == 'Parameter':
                top_buffer += 'P'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_225(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 129, '\'Extract\' (\'Method\' | \'Variable\' | \'Field\' | \'Constant\' | \'Parameter\')', e)
            self.firstWord = -1

    # 'Add to Favorites'
    def gotResults_226(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Shift+f}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_226(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 133, '\'Add to Favorites\'', e)
            self.firstWord = -1

    # 'Quick switch current scheme'
    def gotResults_227(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            top_buffer += '`'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_227(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 134, '\'Quick switch current scheme\'', e)
            self.firstWord = -1

    # 'add item'
    def gotResults_228(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{alt+insert}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_228(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 135, '\'add item\'', e)
            self.firstWord = -1

    # 'search everywhere'
    def gotResults_229(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{shift}{shift}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_229(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 136, '\'search everywhere\'', e)
            self.firstWord = -1

    # 'clean compile files'
    def gotResults_230(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{ctrl+shift+'
            top_buffer += '#'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_230(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 137, '\'clean compile files\'', e)
            self.firstWord = -1

    # 'Complete statement'
    def gotResults_231(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_231(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 141, '\'Complete statement\'', e)
            self.firstWord = -1

    # 'Parameter info'
    def gotResults_232(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+p}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_232(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 142, '\'Parameter info\'', e)
            self.firstWord = -1

    # 'Quick documentation lookup'
    def gotResults_233(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+q}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_233(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 143, '\'Quick documentation lookup\'', e)
            self.firstWord = -1

    # 'External Doc'
    def gotResults_234(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+F1}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_234(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 144, '\'External Doc\'', e)
            self.firstWord = -1

    # 'Generate code'
    def gotResults_235(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Insert}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_235(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 145, '\'Generate code\'', e)
            self.firstWord = -1

    # 'Override methods'
    def gotResults_236(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+o}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_236(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 146, '\'Override methods\'', e)
            self.firstWord = -1

    # 'Reformat code'
    def gotResults_237(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+l}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_237(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 147, '\'Reformat code\'', e)
            self.firstWord = -1

    # 'Auto indent line'
    def gotResults_238(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+i}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_238(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 148, '\'Auto indent line\'', e)
            self.firstWord = -1

    # 'Copy to clipboard'
    def gotResults_239(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_239(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 149, '\'Copy to clipboard\'', e)
            self.firstWord = -1

    # 'Paste from clipboard'
    def gotResults_240(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_240(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 150, '\'Paste from clipboard\'', e)
            self.firstWord = -1

    # 'Paste from recent buffers'
    def gotResults_241(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_241(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 151, '\'Paste from recent buffers\'', e)
            self.firstWord = -1

    # 'Duplicate current line or selected block'
    def gotResults_242(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+d}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_242(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 152, '\'Duplicate current line or selected block\'', e)
            self.firstWord = -1

    # 'Smart line split'
    def gotResults_243(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_243(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 153, '\'Smart line split\'', e)
            self.firstWord = -1

    # 'Toggle case for word at caret or selected block'
    def gotResults_244(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+u}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_244(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 154, '\'Toggle case for word at caret or selected block\'', e)
            self.firstWord = -1

    # 'find' ('this' | 'next' | 'back')
    def gotResults_245(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            word = fullResults[1 + self.firstWord][0]
            if word == 'this':
                when_value += 'ctrl+'
            elif word == 'next':
                pass  # no actions
            elif word == 'back':
                when_value += 'shift+'
            if when_value != "":
                top_buffer += '{'
                word = fullResults[1 + self.firstWord][0]
                if word == 'this':
                    top_buffer += 'ctrl+'
                elif word == 'next':
                    pass  # no actions
                elif word == 'back':
                    top_buffer += 'shift+'
                top_buffer += 'f3}'
            else:
                top_buffer += '{alt+f3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_245(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 157, '\'find\' (\'this\' | \'next\' | \'back\')', e)
            self.firstWord = -1

    # 'find'
    def gotResults_311(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            when_value = ''
            when_value += ''
            if when_value != "":
                top_buffer += '{'
                top_buffer += ''
                top_buffer += 'f3}'
            else:
                top_buffer += '{alt+f3}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_311(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 157, '\'find\'', e)
            self.firstWord = -1

    # 'select' ('next' | 'all' | 'unselect')
    def gotResults_246(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            if word == 'next':
                top_buffer += 'alt+'
            elif word == 'all':
                top_buffer += 'ctrl+alt+'
            elif word == 'unselect':
                top_buffer += 'shift+alt+'
            top_buffer += 'j}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_246(words[2:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 158, '\'select\' (\'next\' | \'all\' | \'unselect\')', e)
            self.firstWord = -1

    # 'Commit project to VCS'
    def gotResults_247(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+k}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_247(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 161, '\'Commit project to VCS\'', e)
            self.firstWord = -1

    # 'Update project from VCS'
    def gotResults_248(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+t}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_248(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 162, '\'Update project from VCS\'', e)
            self.firstWord = -1

    # 'View recent changes'
    def gotResults_249(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Shift+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_249(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 163, '\'View recent changes\'', e)
            self.firstWord = -1

    # 'quick popup'
    def gotResults_250(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+'
            top_buffer += '`'
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_250(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 164, '\'quick popup\'', e)
            self.firstWord = -1

    # 'Surround with Live Template'
    def gotResults_251(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Alt+j}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_251(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 167, '\'Surround with Live Template\'', e)
            self.firstWord = -1

    # 'Insert Live Template'
    def gotResults_252(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+j}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_252(words[1:], fullResults)
        except Exception, e:
            handle_error('pycharm.vcl', 168, '\'Insert Live Template\'', e)
            self.firstWord = -1

    def get_line_modcharm(self, list_buffer, functional, word):
        if word == 'expand':
            list_buffer += '{ctrl+'
            list_buffer += '='
            list_buffer += '}'
        elif word == 'collapse':
            list_buffer += '{ctrl+'
            list_buffer += '-'
            list_buffer += '}'
        elif word == 'comment':
            list_buffer += '{ctrl+'
            list_buffer += '/'
            list_buffer += '}'
        elif word == 'auto indent':
            list_buffer += '{ctrl+alt+i}'
        return list_buffer

    # 'charm line' <line_modcharm> <0to9>
    def gotResults_253(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_modcharm(top_buffer, False, word)
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('pycharm.vcl', 179, '\'charm line\' <line_modcharm> <0to9>', e)
            self.firstWord = -1

    # 'charm line' <0to9>
    def gotResults_312(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_0to9(top_buffer, False, word)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('pycharm.vcl', 179, '\'charm line\' <0to9>', e)
            self.firstWord = -1

    # 'charm line' <line_modcharm> <0to9> <0to9>
    def gotResults_254(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_modcharm(top_buffer, False, word)
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('pycharm.vcl', 180, '\'charm line\' <line_modcharm> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'charm line' <0to9> <0to9>
    def gotResults_313(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            eval_template_arg3 += '0'
            eval_template_arg4 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('pycharm.vcl', 180, '\'charm line\' <0to9> <0to9>', e)
            self.firstWord = -1

    # 'charm line' <line_modcharm> <0to9> <0to9> <0to9>
    def gotResults_255(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_modcharm(top_buffer, False, word)
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('pycharm.vcl', 181, '\'charm line\' <line_modcharm> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'charm line' <0to9> <0to9> <0to9>
    def gotResults_314(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            eval_template_arg2 += '0'
            eval_template_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('pycharm.vcl', 181, '\'charm line\' <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'charm line' <line_modcharm> <0to9> <0to9> <0to9> <0to9>
    def gotResults_256(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[5 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_line_modcharm(top_buffer, False, word)
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('pycharm.vcl', 182, '\'charm line\' <line_modcharm> <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

    # 'charm line' <0to9> <0to9> <0to9> <0to9>
    def gotResults_315(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Esc}'
            top_buffer += 'mv'
            top_buffer += ':'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            eval_template_arg1 = ''
            eval_template_arg1 += '%a*1000+%a*100+%a*10+%a'
            eval_template_arg2 = ''
            word = fullResults[1 + self.firstWord][0]
            eval_template_arg2 = self.get_0to9(eval_template_arg2, True, word)
            eval_template_arg3 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template_arg3 = self.get_0to9(eval_template_arg3, True, word)
            eval_template_arg4 = ''
            word = fullResults[3 + self.firstWord][0]
            eval_template_arg4 = self.get_0to9(eval_template_arg4, True, word)
            eval_template_arg5 = ''
            word = fullResults[4 + self.firstWord][0]
            eval_template_arg5 = self.get_0to9(eval_template_arg5, True, word)
            top_buffer += eval_template(eval_template_arg1, eval_template_arg2, eval_template_arg3, eval_template_arg4, eval_template_arg5)
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '200'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += ''
            top_buffer += 'zz'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('pycharm.vcl', 182, '\'charm line\' <0to9> <0to9> <0to9> <0to9>', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
