# NatLink macro definitions for NaturallySpeaking
# coding: latin-1
# Generated by vcl2py 2.8.1, Mon Mar 24 23:08:01 2014

import natlink
from natlinkutils import *
from VocolaUtils import *


class ThisGrammar(GrammarBase):

    gramSpec = """
        <1> = 'Switch Window' ;
        <2> = 'Copy and Switch' ;
        <3> = 'Copy to' ('NatSpeak' | 'Emacs' | 'Composition' ) ;
        <4> = 'Close Here' ;
        <5> = 'Close Prompt' ;
        <6> = 'Context Menu' ;
        <7> = ('Switch' | 'Next' ) 'View' ;
        <8> = ('Switch' | 'Next' ) 'View' <n> ;
        <9> = 'Previous View' ;
        <10> = 'Previous View' <n> ;
        <11> = 'Back Tab' ;
        <12> = 'Back Tab' <n> ;
        <13> = 'Page' ;
        <14> = 'Page' <n> ;
        <15> = ('Expand' | 'Collapse' ) 'That' ;
        <16> = 'Dragon Menu' ;
        <17> = ('Edit' | 'Train' ) 'Words' ;
        <18> = 'Save Speech Files' ;
        <19> = 'Exit NatSpeak' ;
        <20> = 'Die Die' ;
        <21> = 'Hit Down' ;
        <22> = 'Hit Double' ;
        <23> = ('Shift' | 'Control' | 'Alt' ) 'Click' ;
        <24> = 'Hit Start Menu' ;
        <93> = 'Hit Start' ;
        <n> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30) ;
        <upDown> = ('Up' | 'Down' ) ;
        <leftRight> = ('Left' | 'Right' ) ;
        <25> = 'Drag' <n> <upDown> ;
        <26> = 'Drag' <n> <leftRight> ;
        <ns> = ('0' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10) ;
        <27> = 'Window move' <direction> ;
        <28> = 'Window move' <direction> <ns> ;
        <29> = 'Window maximise' ('swap' | 'left' | 'right' ) ;
        <direction> = 'Left' | 'Right' | 'Up' | 'Down' ;
        <left_right> = 'Left' | 'Right' ;
        <start_end> = ('Start' | 'End' ) ;
        <compass> = ('North' | 'South' | 'East' | 'West' ) ;
        <30> = 'Kill' ('Char' | '1' | 'One' ) ;
        <31> = 'Kill Back 1' ;
        <94> = 'Kill Back' ;
        <32> = 'Kill' <n> ;
        <33> = 'Kill Back' <n> ;
        <95> = 'Back' <n> ;
        <34> = 'One Word' <left_right> ;
        <96> = 'Word' <left_right> ;
        <35> = <n> 'Words' <left_right> ;
        <36> = 'Kill Word' ;
        <37> = 'Kill' <37b> ;
        <37b> = <n> 'Words' ;
        <38> = 'Kill Back Word' ;
        <39> = 'Kill Back' <39b> ;
        <39b> = <n> 'Words' ;
        <40> = 'Line' <start_end> ;
        <41> = 'Line Here' ;
        <42> = 'Copy Line' ;
        <43> = 'Kill Line' ;
        <44> = 'Kill Back Line' ;
        <45> = 'Kill' <45b> ;
        <45b> = <n> 'Lines' ;
        <46> = 'Kill Back' <46b> ;
        <46b> = <n> 'Lines' ;
        <47> = 'Kill Here' ;
        <48> = 'Kill Back Here' ;
        <49> = 'Duplicate Line' ;
        <50> = 'Graph Start' ;
        <51> = 'Graph End' ;
        <52> = ('Paragraph' | 'Graph' ) 'Here' ;
        <53> = 'Open' ('Graph' | 'Line' ) ;
        <54> = 'Copy Graph' ;
        <55> = 'Kill Graph' ;
        <56> = 'Duplicate Graph' ;
        <57> = 'Flow Start' ;
        <58> = 'Flow End' ;
        <59> = 'All' ;
        <60> = 'Copy All' ;
        <61> = ('Cut' | 'Kill' ) 'All' ;
        <62> = 'Kill Flow Here' ;
        <63> = 'Kill Back Flow Here' ;
        <64> = 'Replace All' ;
        <65> = 'Kill That' ;
        <66> = 'Yank That' ;
        <67> = 'Paste Here' ;
        <68> = 'Duplicate That' ;
        <69> = 'Keep That' ;
        <70> = 'Select' <compass> ;
        <71> = 'undo that' <n> ;
        <72> = 'Camel Case That' ;
        <97> = 'Camel That' ;
        <73> = ('Cap' | 'Up Case' ) <n> ;
        <key> = ('alpha' | 'bravo' | 'charlie' | 'delta' | 'echo' | 'foxtrot' | 'golf' | 'hotel' | 'india' | 'juliett' | 'kilo' | 'lima' | 'mike' | 'november' | 'oscar' | 'papa' | 'quebec' | 'romeo' | 'sierra' | 'tango' | 'uniform' | 'victor' | 'whiskey' | 'xray' | 'yankee' | 'zulu' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '`' | '~' | '-' | '_' | '=' | '+' | '\\' | '|' | '[' | '{' | ']' | '}' | ';' | ':' | "'" | '"' | ',' | '<' | '.' | '>' | '/' | '?' | 'Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'Escape' | 'Home' | 'End' ) ;
        <74> = 'Press' <key> ;
        <75> = <key> 'Here' ;
        <76> = 'Space Bar' ;
        <77> = 'Tab Key' ;
        <special> = ('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ;
        <mod> = 'Shift' | 'control-key' | 'Alt' ;
        <nn> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50) ;
        <78> = 'Press' <special> <nn> ;
        <98> = (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape' ) ) <nn> ;
        <79> = 'Press' <mod> <key> <nn> ;
        <99> = ('Shift' | 'control-key' | 'Alt' ) <key> <nn> ;
        <80> = 'Press' <mod> <mod> <key> <nn> ;
        <100> = ('Shift' | 'control-key' | 'Alt' ) <mod> <key> <nn> ;
        <81> = 'Press' <mod> <mod> <mod> <key> <nn> ;
        <101> = ('Shift' | 'control-key' | 'Alt' ) <mod> <mod> <key> <nn> ;
        <82> = 'Recent Documents' ;
        <83> = 'Run Program' ;
        <84> = 'Environment Variables' ;
        <1to20> = (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20) ;
        <launch_actions> = ('Launch' | 'launch Close' ) ;
        <85> = (('Launch' | 'launch Close' ) ) <1to20> ;
        <86> = <launch_actions> <1to20> 'from bottom' ;
        <sound_device> = ('headset' | 'car' | 'laptop' ) ;
        <up_down> = ('Up' | 'Down' ) ;
        <adjust_amount> = ('tiny' | 'small' | 'medium' | 'large' | 'massive' ) ;
        <87> = 'Control Panel' ;
        <88> = 'Sound controls' ;
        <89> = 'Sound to' <sound_device> ;
        <90> = 'volume' <up_down> <adjust_amount> <sound_device> ;
        <91> = 'volume' ('mute' | 'unmute' ) <sound_device> ;
        <92> = 'Short date separator' ;
        <any> = <1>|<2>|<3>|<4>|<5>|<6>|<7>|<8>|<9>|<10>|<11>|<12>|<13>|<14>|<15>|<16>|<17>|<18>|<19>|<20>|<21>|<22>|<23>|<24>|<93>|<25>|<26>|<27>|<28>|<29>|<30>|<31>|<94>|<32>|<33>|<95>|<34>|<96>|<35>|<36>|<37>|<38>|<39>|<40>|<41>|<42>|<43>|<44>|<45>|<46>|<47>|<48>|<49>|<50>|<51>|<52>|<53>|<54>|<55>|<56>|<57>|<58>|<59>|<60>|<61>|<62>|<63>|<64>|<65>|<66>|<67>|<68>|<69>|<70>|<71>|<72>|<97>|<73>|<74>|<75>|<76>|<77>|<78>|<98>|<79>|<99>|<80>|<100>|<81>|<101>|<82>|<83>|<84>|<85>|<86>|<87>|<88>|<89>|<90>|<91>|<92>;
        <sequence> exported = <any>;
    """
    
    def initialize(self):
        self.load(self.gramSpec)
        self.currentModule = ("","",0)
        self.ruleSet1 = ['sequence']

    def gotBegin(self,moduleInfo):
        window = moduleInfo[2]
        self.firstWord = 0
        # Return if same window and title as before
        if moduleInfo == self.currentModule: return None
        self.currentModule = moduleInfo

        self.deactivateAll()
        title = string.lower(moduleInfo[1])
        if string.find(title,'') >= 0:
            for rule in self.ruleSet1:
                self.activate(rule)

    def convert_number_word(self, word):
        if   word == '0':
            return '0'
        else:
            return word

    # 'Switch Window'
    def gotResults_1(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+Tab}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_1(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 8, '\'Switch Window\'', e)
            self.firstWord = -1

    # 'Copy and Switch'
    def gotResults_2(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Alt+Tab}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_2(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 9, '\'Copy and Switch\'', e)
            self.firstWord = -1

    # 'Copy to' ('NatSpeak' | 'Emacs' | 'Composition')
    def gotResults_3(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'switch'
            dragon_arg2 = ''
            dragon_arg2 += 'to'
            dragon_arg3 = ''
            word = fullResults[1 + self.firstWord][0]
            dragon_arg3 += word
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_3(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 10, '\'Copy to\' (\'NatSpeak\' | \'Emacs\' | \'Composition\')', e)
            self.firstWord = -1

    # 'Close Here'
    def gotResults_4(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            dragon_arg2 += '1'
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_4(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 11, '\'Close Here\'', e)
            self.firstWord = -1

    # 'Close Prompt'
    def gotResults_5(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+Space}c'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_5(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 12, '\'Close Prompt\'', e)
            self.firstWord = -1

    # 'Context Menu'
    def gotResults_6(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Alt+f}{Down}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_6(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 13, '\'Context Menu\'', e)
            self.firstWord = -1

    # ('Switch' | 'Next') 'View'
    def gotResults_7(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_7(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 18, '(\'Switch\' | \'Next\') \'View\'', e)
            self.firstWord = -1

    # ('Switch' | 'Next') 'View' <n>
    def gotResults_8(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Tab_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 19, '(\'Switch\' | \'Next\') \'View\' <n>', e)
            self.firstWord = -1

    # 'Previous View'
    def gotResults_9(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_9(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 20, '\'Previous View\'', e)
            self.firstWord = -1

    # 'Previous View' <n>
    def gotResults_10(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Tab_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 21, '\'Previous View\' <n>', e)
            self.firstWord = -1

    # 'Back Tab'
    def gotResults_11(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_11(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 23, '\'Back Tab\'', e)
            self.firstWord = -1

    # 'Back Tab' <n>
    def gotResults_12(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Tab_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 24, '\'Back Tab\' <n>', e)
            self.firstWord = -1

    # 'Page'
    def gotResults_13(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{PgDn}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_13(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 25, '\'Page\'', e)
            self.firstWord = -1

    # 'Page' <n>
    def gotResults_14(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{PgDn_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 26, '\'Page\' <n>', e)
            self.firstWord = -1

    # ('Expand' | 'Collapse') 'That'
    def gotResults_15(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'Expand':
                dragon_arg1 += '{Alt+ExtDown}'
            elif word == 'Collapse':
                dragon_arg1 += '{Alt+ExtUp}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_15(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 30, '(\'Expand\' | \'Collapse\') \'That\'', e)
            self.firstWord = -1

    # 'Dragon Menu'
    def gotResults_16(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{NumKey*}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_16(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 34, '\'Dragon Menu\'', e)
            self.firstWord = -1

    # ('Edit' | 'Train') 'Words'
    def gotResults_17(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{NumKey*}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'w'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Edit':
                top_buffer += 'v'
            elif word == 'Train':
                top_buffer += 't'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_17(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 35, '(\'Edit\' | \'Train\') \'Words\'', e)
            self.firstWord = -1

    # 'Save Speech Files'
    def gotResults_18(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{NumKey*}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'ff'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_18(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 36, '\'Save Speech Files\'', e)
            self.firstWord = -1

    # 'Exit NatSpeak'
    def gotResults_19(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{NumKey*}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '100'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += 'e'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_19(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 37, '\'Exit NatSpeak\'', e)
            self.firstWord = -1

    # 'Die Die'
    def gotResults_20(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('GoToSleep', '', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_20(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 38, '\'Die Die\'', e)
            self.firstWord = -1

    # 'Hit Down'
    def gotResults_21(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_21(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 48, '\'Hit Down\'', e)
            self.firstWord = -1

    # 'Hit Double'
    def gotResults_22(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1'
            dragon_arg2 = ''
            dragon_arg2 += '2'
            call_Dragon('ButtonClick', 'ii', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_22(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 49, '\'Hit Double\'', e)
            self.firstWord = -1

    # ('Shift' | 'Control' | 'Alt') 'Click'
    def gotResults_23(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                dragon_arg1 += '1'
            elif word == 'Control':
                dragon_arg1 += '2'
            elif word == 'Alt':
                dragon_arg1 += '3'
            call_Dragon('ShiftKey', 'ii', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_23(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 50, '(\'Shift\' | \'Control\' | \'Alt\') \'Click\'', e)
            self.firstWord = -1

    # 'Hit Start Menu'
    def gotResults_24(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Ctrl+Esc}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_24(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 51, '\'Hit Start Menu\'', e)
            self.firstWord = -1

    # 'Hit Start'
    def gotResults_93(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Ctrl+Esc}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_93(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 51, '\'Hit Start\'', e)
            self.firstWord = -1

    def get_n(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_upDown(self, list_buffer, functional, word):
        if word == 'Up':
            list_buffer += '-'
        elif word == 'Down':
            list_buffer += ''
        return list_buffer

    def get_leftRight(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += '-'
        elif word == 'Right':
            list_buffer += ''
        return list_buffer

    # 'Drag' <n> <upDown>
    def gotResults_25(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('RememberPoint', '', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '0'
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template2_arg2 = self.get_upDown(eval_template2_arg2, True, word)
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('DragToPoint', 'i', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 66, '\'Drag\' <n> <upDown>', e)
            self.firstWord = -1

    # 'Drag' <n> <leftRight>
    def gotResults_26(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('RememberPoint', '', [])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '2'
            dragon_arg2 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            word = fullResults[2 + self.firstWord][0]
            eval_template2_arg2 = self.get_leftRight(eval_template2_arg2, True, word)
            word = fullResults[1 + self.firstWord][0]
            eval_template2_arg2 = self.get_n(eval_template2_arg2, True, word)
            dragon_arg2 += eval_template(eval_template2_arg1, eval_template2_arg2)
            dragon_arg3 = ''
            eval_template2_arg1 = ''
            eval_template2_arg1 += '15*%a'
            eval_template2_arg2 = ''
            eval_template2_arg2 += '0'
            dragon_arg3 += eval_template(eval_template2_arg1, eval_template2_arg2)
            call_Dragon('SetMousePosition', 'iii', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('DragToPoint', 'i', [])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 67, '\'Drag\' <n> <leftRight>', e)
            self.firstWord = -1

    def get_ns(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Window move' <direction>
    def gotResults_27(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+'
            word = fullResults[1 + self.firstWord][0]
            dragon_arg1 = self.get_direction(dragon_arg1, True, word)
            dragon_arg1 += '}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 71, '\'Window move\' <direction>', e)
            self.firstWord = -1

    # 'Window move' <direction> <ns>
    def gotResults_28(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            limit = ''
            word = fullResults[2 + self.firstWord][0]
            limit = self.get_ns(limit, True, word)
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '{Win+'
                word = fullResults[1 + self.firstWord][0]
                dragon2_arg1 = self.get_direction(dragon2_arg1, True, word)
                dragon2_arg1 += '}'
                call_Dragon('SendSystemKeys', 'si', [dragon2_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 72, '\'Window move\' <direction> <ns>', e)
            self.firstWord = -1

    # 'Window maximise' ('swap' | 'left' | 'right')
    def gotResults_29(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+Up}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            limit = ''
            limit += '2'
            for i in range(to_long(limit)):
                top_buffer = do_flush(False, top_buffer);
                dragon2_arg1 = ''
                dragon2_arg1 += '{Win+Right}'
                call_Dragon('SendSystemKeys', 'si', [dragon2_arg1])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win+Up}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_29(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 74, '\'Window maximise\' (\'swap\' | \'left\' | \'right\')', e)
            self.firstWord = -1

    def get_direction(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_left_right(self, list_buffer, functional, word):
        list_buffer += word
        return list_buffer

    def get_start_end(self, list_buffer, functional, word):
        if word == 'Start':
            list_buffer += '{Home}'
        elif word == 'End':
            list_buffer += '{End}'
        return list_buffer

    def get_compass(self, list_buffer, functional, word):
        if word == 'North':
            list_buffer += '{Shift+Ctrl+Home}'
        elif word == 'South':
            list_buffer += '{Shift+Ctrl+End}'
        elif word == 'East':
            list_buffer += '{Shift+End}'
        elif word == 'West':
            list_buffer += '{Shift+Home}'
        return list_buffer

    # 'Kill' ('Char' | '1' | 'One')
    def gotResults_30(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_30(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 103, '\'Kill\' (\'Char\' | \'1\' | \'One\')', e)
            self.firstWord = -1

    # 'Kill Back 1'
    def gotResults_31(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_31(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 104, '\'Kill Back 1\'', e)
            self.firstWord = -1

    # 'Kill Back'
    def gotResults_94(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_94(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 104, '\'Kill Back\'', e)
            self.firstWord = -1

    # 'Kill' <n>
    def gotResults_32(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 105, '\'Kill\' <n>', e)
            self.firstWord = -1

    # 'Kill Back' <n>
    def gotResults_33(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 106, '\'Kill Back\' <n>', e)
            self.firstWord = -1

    # 'Back' <n>
    def gotResults_95(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Backspace_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 106, '\'Back\' <n>', e)
            self.firstWord = -1

    # 'One Word' <left_right>
    def gotResults_34(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 109, '\'One Word\' <left_right>', e)
            self.firstWord = -1

    # 'Word' <left_right>
    def gotResults_96(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 109, '\'Word\' <left_right>', e)
            self.firstWord = -1

    # <n> 'Words' <left_right>
    def gotResults_35(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_left_right(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 110, '<n> \'Words\' <left_right>', e)
            self.firstWord = -1

    # 'Kill Word'
    def gotResults_36(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Right_2}{Ctrl+Left}{Shift+Ctrl+Right}'
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_36(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 111, '\'Kill Word\'', e)
            self.firstWord = -1

    # 'Kill' <n> 'Words'
    def gotResults_37(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Right_2}{Ctrl+Left}{Shift+Ctrl+Right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 112, '\'Kill\' <n> \'Words\'', e)
            self.firstWord = -1

    # 'Kill Back Word'
    def gotResults_38(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Ctrl+Right}{Shift+Ctrl+Left}'
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_38(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 113, '\'Kill Back Word\'', e)
            self.firstWord = -1

    # 'Kill Back' <n> 'Words'
    def gotResults_39(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Left}{Ctrl+Right}{Shift+Ctrl+Left_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 114, '\'Kill Back\' <n> \'Words\'', e)
            self.firstWord = -1

    # 'Line' <start_end>
    def gotResults_40(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_start_end(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 117, '\'Line\' <start_end>', e)
            self.firstWord = -1

    # 'Line Here'
    def gotResults_41(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_41(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 120, '\'Line Here\'', e)
            self.firstWord = -1

    # 'Copy Line'
    def gotResults_42(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+End}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_42(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 121, '\'Copy Line\'', e)
            self.firstWord = -1

    # 'Kill Line'
    def gotResults_43(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+End}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_43(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 122, '\'Kill Line\'', e)
            self.firstWord = -1

    # 'Kill Back Line'
    def gotResults_44(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Up}'
            top_buffer += '{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_44(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 123, '\'Kill Back Line\'', e)
            self.firstWord = -1

    # 'Kill' <n> 'Lines'
    def gotResults_45(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Down_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 124, '\'Kill\' <n> \'Lines\'', e)
            self.firstWord = -1

    # 'Kill Back' <n> 'Lines'
    def gotResults_46(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Up_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 125, '\'Kill Back\' <n> \'Lines\'', e)
            self.firstWord = -1

    # 'Kill Here'
    def gotResults_47(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+End}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_47(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 126, '\'Kill Here\'', e)
            self.firstWord = -1

    # 'Kill Back Here'
    def gotResults_48(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Home}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_48(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 127, '\'Kill Back Here\'', e)
            self.firstWord = -1

    # 'Duplicate Line'
    def gotResults_49(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{home}{Shift+Down}{Shift+Home}{Ctrl+c}{Home}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_49(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 128, '\'Duplicate Line\'', e)
            self.firstWord = -1

    # 'Graph Start'
    def gotResults_50(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Up}{Right}{Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_50(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 131, '\'Graph Start\'', e)
            self.firstWord = -1

    # 'Graph End'
    def gotResults_51(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Left_2}{End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_51(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 132, '\'Graph End\'', e)
            self.firstWord = -1

    # ('Paragraph' | 'Graph') 'Here'
    def gotResults_52(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}{Enter}{Left}{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_52(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 133, '(\'Paragraph\' | \'Graph\') \'Here\'', e)
            self.firstWord = -1

    # 'Open' ('Graph' | 'Line')
    def gotResults_53(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Enter}{Enter}{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_53(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 134, '\'Open\' (\'Graph\' | \'Line\')', e)
            self.firstWord = -1

    # 'Copy Graph'
    def gotResults_54(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Shift+Ctrl+Up}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_54(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 135, '\'Copy Graph\'', e)
            self.firstWord = -1

    # 'Kill Graph'
    def gotResults_55(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Shift+Ctrl+Up}{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_55(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 136, '\'Kill Graph\'', e)
            self.firstWord = -1

    # 'Duplicate Graph'
    def gotResults_56(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Down}{Shift+Ctrl+Up}{Ctrl+c}{Home}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_56(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 137, '\'Duplicate Graph\'', e)
            self.firstWord = -1

    # 'Flow Start'
    def gotResults_57(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Home}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_57(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 140, '\'Flow Start\'', e)
            self.firstWord = -1

    # 'Flow End'
    def gotResults_58(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+End}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_58(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 141, '\'Flow End\'', e)
            self.firstWord = -1

    # 'All'
    def gotResults_59(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_59(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 143, '\'All\'', e)
            self.firstWord = -1

    # 'Copy All'
    def gotResults_60(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+c}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_60(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 144, '\'Copy All\'', e)
            self.firstWord = -1

    # ('Cut' | 'Kill') 'All'
    def gotResults_61(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
            if len(words) > 2: self.gotResults_61(words[2:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 145, '(\'Cut\' | \'Kill\') \'All\'', e)
            self.firstWord = -1

    # 'Kill Flow Here'
    def gotResults_62(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+End}'
            top_buffer += '{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_62(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 146, '\'Kill Flow Here\'', e)
            self.firstWord = -1

    # 'Kill Back Flow Here'
    def gotResults_63(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+Shift+Home}{Ctrl+x}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_63(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 147, '\'Kill Back Flow Here\'', e)
            self.firstWord = -1

    # 'Replace All'
    def gotResults_64(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+a}{Del}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_64(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 148, '\'Replace All\'', e)
            self.firstWord = -1

    # 'Kill That'
    def gotResults_65(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Del}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_65(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 151, '\'Kill That\'', e)
            self.firstWord = -1

    # 'Yank That'
    def gotResults_66(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_66(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 155, '\'Yank That\'', e)
            self.firstWord = -1

    # 'Paste Here'
    def gotResults_67(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_67(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 156, '\'Paste Here\'', e)
            self.firstWord = -1

    # 'Duplicate That'
    def gotResults_68(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}{Left}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_68(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 157, '\'Duplicate That\'', e)
            self.firstWord = -1

    # 'Keep That'
    def gotResults_69(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+c}{Ctrl+a}{Del}{Ctrl+v}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_69(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 158, '\'Keep That\'', e)
            self.firstWord = -1

    # 'Select' <compass>
    def gotResults_70(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_compass(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 159, '\'Select\' <compass>', e)
            self.firstWord = -1

    # 'undo that' <n>
    def gotResults_71(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Ctrl+z_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 162, '\'undo that\' <n>', e)
            self.firstWord = -1

    # 'Camel Case That'
    def gotResults_72(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '\\Cap'
            dragon_arg2 = ''
            dragon_arg2 += 'That'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'compound'
            dragon_arg2 = ''
            dragon_arg2 += 'that'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer += '{Ctrl+Left}'
            top_buffer += '{Shift+Right}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '\\No-Caps'
            dragon_arg2 = ''
            dragon_arg2 += 'That'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer += '{Ctrl+Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_72(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 164, '\'Camel Case That\'', e)
            self.firstWord = -1

    # 'Camel That'
    def gotResults_97(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '\\Cap'
            dragon_arg2 = ''
            dragon_arg2 += 'That'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'compound'
            dragon_arg2 = ''
            dragon_arg2 += 'that'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer += '{Ctrl+Left}'
            top_buffer += '{Shift+Right}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '\\No-Caps'
            dragon_arg2 = ''
            dragon_arg2 += 'That'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer += '{Ctrl+Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_97(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 164, '\'Camel That\'', e)
            self.firstWord = -1

    # ('Cap' | 'Up Case') <n>
    def gotResults_73(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Shift+Right_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_n(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '\\All-Caps'
            dragon_arg2 = ''
            dragon_arg2 += 'That'
            call_Dragon('HeardWord', 'ssssssss', [dragon_arg1, dragon_arg2])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 165, '(\'Cap\' | \'Up Case\') <n>', e)
            self.firstWord = -1

    def get_key(self, list_buffer, functional, word):
        if word == 'alpha':
            list_buffer += 'a'
        elif word == 'bravo':
            list_buffer += 'b'
        elif word == 'charlie':
            list_buffer += 'c'
        elif word == 'delta':
            list_buffer += 'd'
        elif word == 'echo':
            list_buffer += 'e'
        elif word == 'foxtrot':
            list_buffer += 'f'
        elif word == 'golf':
            list_buffer += 'g'
        elif word == 'hotel':
            list_buffer += 'h'
        elif word == 'india':
            list_buffer += 'i'
        elif word == 'juliett':
            list_buffer += 'j'
        elif word == 'kilo':
            list_buffer += 'k'
        elif word == 'lima':
            list_buffer += 'l'
        elif word == 'mike':
            list_buffer += 'm'
        elif word == 'november':
            list_buffer += 'n'
        elif word == 'oscar':
            list_buffer += 'o'
        elif word == 'papa':
            list_buffer += 'p'
        elif word == 'quebec':
            list_buffer += 'q'
        elif word == 'romeo':
            list_buffer += 'r'
        elif word == 'sierra':
            list_buffer += 's'
        elif word == 'tango':
            list_buffer += 't'
        elif word == 'uniform':
            list_buffer += 'u'
        elif word == 'victor':
            list_buffer += 'v'
        elif word == 'whiskey':
            list_buffer += 'w'
        elif word == 'xray':
            list_buffer += 'x'
        elif word == 'yankee':
            list_buffer += 'y'
        elif word == 'zulu':
            list_buffer += 'z'
        elif word == '0':
            list_buffer += '0'
        elif word == '1':
            list_buffer += '1'
        elif word == '2':
            list_buffer += '2'
        elif word == '3':
            list_buffer += '3'
        elif word == '4':
            list_buffer += '4'
        elif word == '5':
            list_buffer += '5'
        elif word == '6':
            list_buffer += '6'
        elif word == '7':
            list_buffer += '7'
        elif word == '8':
            list_buffer += '8'
        elif word == '9':
            list_buffer += '9'
        elif word == '!':
            list_buffer += '!'
        elif word == '@':
            list_buffer += '@'
        elif word == '#':
            list_buffer += '#'
        elif word == '$':
            list_buffer += '$'
        elif word == '%':
            list_buffer += '%'
        elif word == '^':
            list_buffer += '^'
        elif word == '&':
            list_buffer += '&'
        elif word == '*':
            list_buffer += '*'
        elif word == '(':
            list_buffer += '('
        elif word == ')':
            list_buffer += ')'
        elif word == '`':
            list_buffer += '`'
        elif word == '~':
            list_buffer += '~'
        elif word == '-':
            list_buffer += '-'
        elif word == '_':
            list_buffer += '_'
        elif word == '=':
            list_buffer += '='
        elif word == '+':
            list_buffer += '+'
        elif word == '\\':
            list_buffer += '\\'
        elif word == '|':
            list_buffer += '|'
        elif word == '[':
            list_buffer += '['
        elif word == '{':
            list_buffer += '{'
        elif word == ']':
            list_buffer += ']'
        elif word == '}':
            list_buffer += '}'
        elif word == ';':
            list_buffer += ';'
        elif word == ':':
            list_buffer += ':'
        elif word == '\'':
            list_buffer += '\''
        elif word == '"':
            list_buffer += '"'
        elif word == ',':
            list_buffer += ','
        elif word == '<':
            list_buffer += '<'
        elif word == '.':
            list_buffer += '.'
        elif word == '>':
            list_buffer += '>'
        elif word == '/':
            list_buffer += '/'
        elif word == '?':
            list_buffer += '?'
        elif word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'Escape':
            list_buffer += 'Esc'
        elif word == 'Home':
            list_buffer += 'Home'
        elif word == 'End':
            list_buffer += 'End'
        return list_buffer

    # 'Press' <key>
    def gotResults_74(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 20, '\'Press\' <key>', e)
            self.firstWord = -1

    # <key> 'Here'
    def gotResults_75(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            call_Dragon('ButtonClick', 'ii', [])
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 21, '<key> \'Here\'', e)
            self.firstWord = -1

    # 'Space Bar'
    def gotResults_76(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += ' '
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_76(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 23, '\'Space Bar\'', e)
            self.firstWord = -1

    # 'Tab Key'
    def gotResults_77(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{Tab}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_77(words[1:], fullResults)
        except Exception, e:
            handle_error('keys.vch', 24, '\'Tab Key\'', e)
            self.firstWord = -1

    def get_special(self, list_buffer, functional, word):
        if word == 'Left':
            list_buffer += 'Left'
        elif word == 'Right':
            list_buffer += 'Right'
        elif word == 'Up':
            list_buffer += 'Up'
        elif word == 'Down':
            list_buffer += 'Down'
        elif word == 'space-bar':
            list_buffer += ' '
        elif word == 'tab-key':
            list_buffer += 'Tab'
        elif word == 'Enter':
            list_buffer += 'Enter'
        elif word == 'page-up':
            list_buffer += 'PgUp'
        elif word == 'page-down':
            list_buffer += 'PgDn'
        elif word == 'Backspace':
            list_buffer += 'Backspace'
        elif word == 'delete':
            list_buffer += 'Del'
        elif word == 'escape':
            list_buffer += 'Esc'
        return list_buffer

    def get_mod(self, list_buffer, functional, word):
        if word == 'Shift':
            list_buffer += 'Shift'
        elif word == 'control-key':
            list_buffer += 'Ctrl'
        elif word == 'Alt':
            list_buffer += 'Alt'
        return list_buffer

    def get_nn(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    # 'Press' <special> <nn>
    def gotResults_78(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_special(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 36, '\'Press\' <special> <nn>', e)
            self.firstWord = -1

    # (('Left' | 'Right' | 'Up' | 'Down' | 'space-bar' | 'tab-key' | 'Enter' | 'page-up' | 'page-down' | 'Backspace' | 'delete' | 'escape')) <nn>
    def gotResults_98(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Left':
                top_buffer += 'Left'
            elif word == 'Right':
                top_buffer += 'Right'
            elif word == 'Up':
                top_buffer += 'Up'
            elif word == 'Down':
                top_buffer += 'Down'
            elif word == 'space-bar':
                top_buffer += ' '
            elif word == 'tab-key':
                top_buffer += 'Tab'
            elif word == 'Enter':
                top_buffer += 'Enter'
            elif word == 'page-up':
                top_buffer += 'PgUp'
            elif word == 'page-down':
                top_buffer += 'PgDn'
            elif word == 'Backspace':
                top_buffer += 'Backspace'
            elif word == 'delete':
                top_buffer += 'Del'
            elif word == 'escape':
                top_buffer += 'Esc'
            top_buffer += '_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('keys.vch', 36, '((\'Left\' | \'Right\' | \'Up\' | \'Down\' | \'space-bar\' | \'tab-key\' | \'Enter\' | \'page-up\' | \'page-down\' | \'Backspace\' | \'delete\' | \'escape\')) <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <key> <nn>
    def gotResults_79(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 37, '\'Press\' <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <key> <nn>
    def gotResults_99(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('keys.vch', 37, '(\'Shift\' | \'control-key\' | \'Alt\') <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <key> <nn>
    def gotResults_80(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 38, '\'Press\' <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <key> <nn>
    def gotResults_100(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('keys.vch', 38, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Press' <mod> <mod> <mod> <key> <nn>
    def gotResults_81(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[5 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 6
        except Exception, e:
            handle_error('keys.vch', 39, '\'Press\' <mod> <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # ('Shift' | 'control-key' | 'Alt') <mod> <mod> <key> <nn>
    def gotResults_101(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '{'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Shift':
                top_buffer += 'Shift'
            elif word == 'control-key':
                top_buffer += 'Ctrl'
            elif word == 'Alt':
                top_buffer += 'Alt'
            top_buffer += '+'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_mod(top_buffer, False, word)
            top_buffer += '+'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_key(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[4 + self.firstWord][0]
            top_buffer = self.get_nn(top_buffer, False, word)
            top_buffer += '}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 5
        except Exception, e:
            handle_error('keys.vch', 39, '(\'Shift\' | \'control-key\' | \'Alt\') <mod> <mod> <key> <nn>', e)
            self.firstWord = -1

    # 'Recent Documents'
    def gotResults_82(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Ctrl+Esc}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Up_6}{Right}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_82(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 172, '\'Recent Documents\'', e)
            self.firstWord = -1

    # 'Run Program'
    def gotResults_83(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Ctrl+Esc}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Up_2}{Enter}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_83(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 173, '\'Run Program\'', e)
            self.firstWord = -1

    # 'Environment Variables'
    def gotResults_84(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'C:\\WINNT\\System32\\SYSDM.CPL'
            call_Dragon('AppBringUp', 'ssis', [dragon_arg1])
            top_buffer += '{Shift+Tab}{Right_4}{Alt+e}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_84(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 177, '\'Environment Variables\'', e)
            self.firstWord = -1

    def get_1to20(self, list_buffer, functional, word):
        list_buffer += self.convert_number_word(word)
        return list_buffer

    def get_launch_actions(self, list_buffer, functional, word):
        if word == 'Launch':
            list_buffer += ' '
        elif word == 'launch Close':
            list_buffer += ' {Alt+f4}'
        return list_buffer

    # (('Launch' | 'launch Close')) <1to20>
    def gotResults_85(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Ctrl+Esc}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Esc}{Tab}'
            top_buffer += '{Down_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to20(top_buffer, False, word)
            top_buffer += '}{Up}'
            word = fullResults[0 + self.firstWord][0]
            if word == 'Launch':
                top_buffer += ' '
            elif word == 'launch Close':
                top_buffer += ' {Alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 185, '((\'Launch\' | \'launch Close\')) <1to20>', e)
            self.firstWord = -1

    # <launch_actions> <1to20> 'from bottom'
    def gotResults_86(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Ctrl+Esc}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Esc}{Tab}'
            top_buffer += '{Up_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_1to20(top_buffer, False, word)
            top_buffer += '}'
            word = fullResults[0 + self.firstWord][0]
            top_buffer = self.get_launch_actions(top_buffer, False, word)
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 186, '<launch_actions> <1to20> \'from bottom\'', e)
            self.firstWord = -1

    def get_sound_device(self, list_buffer, functional, word):
        if word == 'headset':
            list_buffer += '1'
        elif word == 'car':
            list_buffer += '2'
        elif word == 'laptop':
            list_buffer += '3'
        return list_buffer

    def get_up_down(self, list_buffer, functional, word):
        if word == 'Up':
            list_buffer += 'Right'
        elif word == 'Down':
            list_buffer += 'Left'
        return list_buffer

    def get_adjust_amount(self, list_buffer, functional, word):
        if word == 'tiny':
            list_buffer += '2'
        elif word == 'small':
            list_buffer += '5'
        elif word == 'medium':
            list_buffer += '10'
        elif word == 'large':
            list_buffer += '20'
        elif word == 'massive':
            list_buffer += '40'
        return list_buffer

    # 'Control Panel'
    def gotResults_87(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Right}'
            top_buffer += '{Up_4}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '*Control Panel*'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_87(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 231, '\'Control Panel\'', e)
            self.firstWord = -1

    # 'Sound controls'
    def gotResults_88(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Right}'
            top_buffer += '{Up_4}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '*Control Panel*'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{s}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Sound'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_88(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 232, '\'Sound controls\'', e)
            self.firstWord = -1

    # 'Sound to' <sound_device>
    def gotResults_89(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Right}'
            top_buffer += '{Up_4}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '*Control Panel*'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{s}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Sound'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer += '{Down_'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_sound_device(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{Alt+s}'
            limit = ''
            limit += '2'
            for i in range(to_long(limit)):
                top_buffer += '{Alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 2
        except Exception, e:
            handle_error('_vocola.vcl', 233, '\'Sound to\' <sound_device>', e)
            self.firstWord = -1

    # 'volume' <up_down> <adjust_amount> <sound_device>
    def gotResults_90(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Right}'
            top_buffer += '{Up_4}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '*Control Panel*'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{s}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Sound'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer += '{Down_'
            word = fullResults[3 + self.firstWord][0]
            top_buffer = self.get_sound_device(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{Alt+p}'
            top_buffer += '{Ctrl+Tab}'
            top_buffer += '{'
            word = fullResults[1 + self.firstWord][0]
            top_buffer = self.get_up_down(top_buffer, False, word)
            top_buffer += '_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_adjust_amount(top_buffer, False, word)
            top_buffer += '}'
            limit = ''
            limit += '3'
            for i in range(to_long(limit)):
                top_buffer += '{Alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 4
        except Exception, e:
            handle_error('_vocola.vcl', 235, '\'volume\' <up_down> <adjust_amount> <sound_device>', e)
            self.firstWord = -1

    # 'volume' ('mute' | 'unmute') <sound_device>
    def gotResults_91(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '{Win}'
            call_Dragon('SendSystemKeys', 'si', [dragon_arg1])
            top_buffer += '{Right}'
            top_buffer += '{Up_4}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '*Control Panel*'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += '1000'
            call_Dragon('Wait', 'i', [dragon_arg1])
            top_buffer += '{s}'
            top_buffer += '{enter}'
            top_buffer = do_flush(False, top_buffer);
            dragon_arg1 = ''
            dragon_arg1 += 'Sound'
            dragon_arg2 = ''
            dragon_arg2 += ''
            dragon_arg3 = ''
            dragon_arg3 += '7000'
            call_Dragon('WaitForWindow', 'ssi', [dragon_arg1, dragon_arg2, dragon_arg3])
            top_buffer += '{Down_'
            word = fullResults[2 + self.firstWord][0]
            top_buffer = self.get_sound_device(top_buffer, False, word)
            top_buffer += '}'
            top_buffer += '{Alt+p}'
            top_buffer += '{Ctrl+Tab}'
            top_buffer += '{Tab}'
            top_buffer += '{Space}'
            limit = ''
            limit += '3'
            for i in range(to_long(limit)):
                top_buffer += '{Alt+f4}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 3
        except Exception, e:
            handle_error('_vocola.vcl', 237, '\'volume\' (\'mute\' | \'unmute\') <sound_device>', e)
            self.firstWord = -1

    # 'Short date separator'
    def gotResults_92(self, words, fullResults):
        if self.firstWord<0:
            return
        try:
            top_buffer = ''
            top_buffer += '----{enter}14'
            limit = ''
            limit += '2'
            for i in range(to_long(limit)):
                top_buffer += '{Left}'
            top_buffer = do_flush(False, top_buffer);
            self.firstWord += 1
            if len(words) > 1: self.gotResults_92(words[1:], fullResults)
        except Exception, e:
            handle_error('_vocola.vcl', 247, '\'Short date separator\'', e)
            self.firstWord = -1

thisGrammar = ThisGrammar()
thisGrammar.initialize()

def unload():
    global thisGrammar
    if thisGrammar: thisGrammar.unload()
    thisGrammar = None
